// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/BackgroundToken.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/BackgroundToken.proto</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class BackgroundTokenReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/BackgroundToken.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BackgroundTokenReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQT0dPUHJvdG9zL0RhdGEvQmFja2dyb3VuZFRva2VuLnByb3RvEg9QT0dP",
            "UHJvdG9zLkRhdGEiRQoPQmFja2dyb3VuZFRva2VuEg0KBXRva2VuGAEgASgM",
            "EhcKD2V4cGlyYXRpb25fdGltZRgCIAEoAxIKCgJpdhgDIAEoDGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.BackgroundToken), global::POGOProtos.Data.BackgroundToken.Parser, new[]{ "Token", "ExpirationTime", "Iv" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class BackgroundToken : pb::IMessage<BackgroundToken> {
    private static readonly pb::MessageParser<BackgroundToken> _parser = new pb::MessageParser<BackgroundToken>(() => new BackgroundToken());
    public static pb::MessageParser<BackgroundToken> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.BackgroundTokenReflection.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public BackgroundToken() {
      OnConstruction();
    }

    partial void OnConstruction();

    public BackgroundToken(BackgroundToken other) : this() {
      token_ = other.token_;
      expirationTime_ = other.expirationTime_;
      iv_ = other.iv_;
    }

    public BackgroundToken Clone() {
      return new BackgroundToken(this);
    }

    /// <summary>Field number for the "token" field.</summary>
    public const int TokenFieldNumber = 1;
    private pb::ByteString token_ = pb::ByteString.Empty;
    public pb::ByteString Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "expiration_time" field.</summary>
    public const int ExpirationTimeFieldNumber = 2;
    private long expirationTime_;
    public long ExpirationTime {
      get { return expirationTime_; }
      set {
        expirationTime_ = value;
      }
    }

    /// <summary>Field number for the "iv" field.</summary>
    public const int IvFieldNumber = 3;
    private pb::ByteString iv_ = pb::ByteString.Empty;
    public pb::ByteString Iv {
      get { return iv_; }
      set {
        iv_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public override bool Equals(object other) {
      return Equals(other as BackgroundToken);
    }

    public bool Equals(BackgroundToken other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Token != other.Token) return false;
      if (ExpirationTime != other.ExpirationTime) return false;
      if (Iv != other.Iv) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (Token.Length != 0) hash ^= Token.GetHashCode();
      if (ExpirationTime != 0L) hash ^= ExpirationTime.GetHashCode();
      if (Iv.Length != 0) hash ^= Iv.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Token.Length != 0) {
        output.WriteRawTag(10);
        output.WriteBytes(Token);
      }
      if (ExpirationTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ExpirationTime);
      }
      if (Iv.Length != 0) {
        output.WriteRawTag(26);
        output.WriteBytes(Iv);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Token);
      }
      if (ExpirationTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ExpirationTime);
      }
      if (Iv.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Iv);
      }
      return size;
    }

    public void MergeFrom(BackgroundToken other) {
      if (other == null) {
        return;
      }
      if (other.Token.Length != 0) {
        Token = other.Token;
      }
      if (other.ExpirationTime != 0L) {
        ExpirationTime = other.ExpirationTime;
      }
      if (other.Iv.Length != 0) {
        Iv = other.Iv;
      }
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Token = input.ReadBytes();
            break;
          }
          case 16: {
            ExpirationTime = input.ReadInt64();
            break;
          }
          case 26: {
            Iv = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
