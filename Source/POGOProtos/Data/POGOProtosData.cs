// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Data.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data {

  /// <summary>Holder for reflection information generated from POGOProtos.Data.proto</summary>
  public static partial class POGOProtosDataReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos.Data.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static POGOProtosDataReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVQT0dPUHJvdG9zLkRhdGEucHJvdG8SD1BPR09Qcm90b3MuRGF0YRoWUE9H",
            "T1Byb3Rvcy5FbnVtcy5wcm90bxofUE9HT1Byb3Rvcy5JbnZlbnRvcnkuSXRl",
            "bS5wcm90bxocUE9HT1Byb3Rvcy5EYXRhLlBsYXllci5wcm90byKLAQoLUGxh",
            "eWVyQmFkZ2USLwoKYmFkZ2VfdHlwZRgBIAEoDjIbLlBPR09Qcm90b3MuRW51",
            "bXMuQmFkZ2VUeXBlEgwKBHJhbmsYAiABKAUSEwoLc3RhcnRfdmFsdWUYAyAB",
            "KAUSEQoJZW5kX3ZhbHVlGAQgASgFEhUKDWN1cnJlbnRfdmFsdWUYBSABKAEi",
            "UQoQRG93bmxvYWRVcmxFbnRyeRIQCghhc3NldF9pZBgBIAEoCRILCgN1cmwY",
            "AiABKAkSDAoEc2l6ZRgDIAEoBRIQCghjaGVja3N1bRgEIAEoByKsAQoMUG9r",
            "ZWRleEVudHJ5Ei8KCnBva2Vtb25faWQYASABKA4yGy5QT0dPUHJvdG9zLkVu",
            "dW1zLlBva2Vtb25JZBIZChF0aW1lc19lbmNvdW50ZXJlZBgCIAEoBRIWCg50",
            "aW1lc19jYXB0dXJlZBgDIAEoBRIeChZldm9sdXRpb25fc3RvbmVfcGllY2Vz",
            "GAQgASgFEhgKEGV2b2x1dGlvbl9zdG9uZXMYBSABKAUimAYKC1Bva2Vtb25E",
            "YXRhEgoKAmlkGAEgASgGEi8KCnBva2Vtb25faWQYAiABKA4yGy5QT0dPUHJv",
            "dG9zLkVudW1zLlBva2Vtb25JZBIKCgJjcBgDIAEoBRIPCgdzdGFtaW5hGAQg",
            "ASgFEhMKC3N0YW1pbmFfbWF4GAUgASgFEi0KBm1vdmVfMRgGIAEoDjIdLlBP",
            "R09Qcm90b3MuRW51bXMuUG9rZW1vbk1vdmUSLQoGbW92ZV8yGAcgASgOMh0u",
            "UE9HT1Byb3Rvcy5FbnVtcy5Qb2tlbW9uTW92ZRIYChBkZXBsb3llZF9mb3J0",
            "X2lkGAggASgJEhIKCm93bmVyX25hbWUYCSABKAkSDgoGaXNfZWdnGAogASgI",
            "EhwKFGVnZ19rbV93YWxrZWRfdGFyZ2V0GAsgASgBEhsKE2VnZ19rbV93YWxr",
            "ZWRfc3RhcnQYDCABKAESDgoGb3JpZ2luGA4gASgFEhAKCGhlaWdodF9tGA8g",
            "ASgCEhEKCXdlaWdodF9rZxgQIAEoAhIZChFpbmRpdmlkdWFsX2F0dGFjaxgR",
            "IAEoBRIaChJpbmRpdmlkdWFsX2RlZmVuc2UYEiABKAUSGgoSaW5kaXZpZHVh",
            "bF9zdGFtaW5hGBMgASgFEhUKDWNwX211bHRpcGxpZXIYFCABKAISMwoIcG9r",
            "ZWJhbGwYFSABKA4yIS5QT0dPUHJvdG9zLkludmVudG9yeS5JdGVtLkl0ZW1J",
            "ZBIYChBjYXB0dXJlZF9jZWxsX2lkGBYgASgEEhgKEGJhdHRsZXNfYXR0YWNr",
            "ZWQYFyABKAUSGAoQYmF0dGxlc19kZWZlbmRlZBgYIAEoBRIYChBlZ2dfaW5j",
            "dWJhdG9yX2lkGBkgASgJEhgKEGNyZWF0aW9uX3RpbWVfbXMYGiABKAQSFAoM",
            "bnVtX3VwZ3JhZGVzGBsgASgFEiAKGGFkZGl0aW9uYWxfY3BfbXVsdGlwbGll",
            "chgcIAEoAhIQCghmYXZvcml0ZRgdIAEoBRIQCghuaWNrbmFtZRgeIAEoCRIR",
            "Cglmcm9tX2ZvcnQYHyABKAUidwoQQXNzZXREaWdlc3RFbnRyeRIQCghhc3Nl",
            "dF9pZBgBIAEoCRITCgtidW5kbGVfbmFtZRgCIAEoCRIPCgd2ZXJzaW9uGAMg",
            "ASgDEhAKCGNoZWNrc3VtGAQgASgHEgwKBHNpemUYBSABKAUSCwoDa2V5GAYg",
            "ASgMIoMECgpQbGF5ZXJEYXRhEh0KFWNyZWF0aW9uX3RpbWVzdGFtcF9tcxgB",
            "IAEoAxIQCgh1c2VybmFtZRgCIAEoCRIpCgR0ZWFtGAUgASgOMhsuUE9HT1By",
            "b3Rvcy5FbnVtcy5UZWFtQ29sb3ISOwoOdHV0b3JpYWxfc3RhdGUYByADKA4y",
            "Hy5QT0dPUHJvdG9zLkVudW1zLlR1dG9yaWFsU3RhdGVCAhABEjQKBmF2YXRh",
            "chgIIAEoCzIkLlBPR09Qcm90b3MuRGF0YS5QbGF5ZXIuUGxheWVyQXZhdGFy",
            "EhsKE21heF9wb2tlbW9uX3N0b3JhZ2UYCSABKAUSGAoQbWF4X2l0ZW1fc3Rv",
            "cmFnZRgKIAEoBRI3CgtkYWlseV9ib251cxgLIAEoCzIiLlBPR09Qcm90b3Mu",
            "RGF0YS5QbGF5ZXIuRGFpbHlCb251cxI9Cg5lcXVpcHBlZF9iYWRnZRgMIAEo",
            "CzIlLlBPR09Qcm90b3MuRGF0YS5QbGF5ZXIuRXF1aXBwZWRCYWRnZRJBChBj",
            "b250YWN0X3NldHRpbmdzGA0gASgLMicuUE9HT1Byb3Rvcy5EYXRhLlBsYXll",
            "ci5Db250YWN0U2V0dGluZ3MSNAoKY3VycmVuY2llcxgOIAMoCzIgLlBPR09Q",
            "cm90b3MuRGF0YS5QbGF5ZXIuQ3VycmVuY3lQAFABUAJiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.POGOProtosEnumsReflection.Descriptor, global::POGOProtos.Inventory.Item.POGOProtosInventoryItemReflection.Descriptor, global::POGOProtos.Data.Player.POGOProtosDataPlayerReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.PlayerBadge), global::POGOProtos.Data.PlayerBadge.Parser, new[]{ "BadgeType", "Rank", "StartValue", "EndValue", "CurrentValue" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.DownloadUrlEntry), global::POGOProtos.Data.DownloadUrlEntry.Parser, new[]{ "AssetId", "Url", "Size", "Checksum" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.PokedexEntry), global::POGOProtos.Data.PokedexEntry.Parser, new[]{ "PokemonId", "TimesEncountered", "TimesCaptured", "EvolutionStonePieces", "EvolutionStones" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.PokemonData), global::POGOProtos.Data.PokemonData.Parser, new[]{ "Id", "PokemonId", "Cp", "Stamina", "StaminaMax", "Move1", "Move2", "DeployedFortId", "OwnerName", "IsEgg", "EggKmWalkedTarget", "EggKmWalkedStart", "Origin", "HeightM", "WeightKg", "IndividualAttack", "IndividualDefense", "IndividualStamina", "CpMultiplier", "Pokeball", "CapturedCellId", "BattlesAttacked", "BattlesDefended", "EggIncubatorId", "CreationTimeMs", "NumUpgrades", "AdditionalCpMultiplier", "Favorite", "Nickname", "FromFort" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.AssetDigestEntry), global::POGOProtos.Data.AssetDigestEntry.Parser, new[]{ "AssetId", "BundleName", "Version", "Checksum", "Size", "Key" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.PlayerData), global::POGOProtos.Data.PlayerData.Parser, new[]{ "CreationTimestampMs", "Username", "Team", "TutorialState", "Avatar", "MaxPokemonStorage", "MaxItemStorage", "DailyBonus", "EquippedBadge", "ContactSettings", "Currencies" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerBadge : pb::IMessage<PlayerBadge> {
    private static readonly pb::MessageParser<PlayerBadge> _parser = new pb::MessageParser<PlayerBadge>(() => new PlayerBadge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBadge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.POGOProtosDataReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBadge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBadge(PlayerBadge other) : this() {
      badgeType_ = other.badgeType_;
      rank_ = other.rank_;
      startValue_ = other.startValue_;
      endValue_ = other.endValue_;
      currentValue_ = other.currentValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBadge Clone() {
      return new PlayerBadge(this);
    }

    /// <summary>Field number for the "badge_type" field.</summary>
    public const int BadgeTypeFieldNumber = 1;
    private global::POGOProtos.Enums.BadgeType badgeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.BadgeType BadgeType {
      get { return badgeType_; }
      set {
        badgeType_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "start_value" field.</summary>
    public const int StartValueFieldNumber = 3;
    private int startValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartValue {
      get { return startValue_; }
      set {
        startValue_ = value;
      }
    }

    /// <summary>Field number for the "end_value" field.</summary>
    public const int EndValueFieldNumber = 4;
    private int endValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndValue {
      get { return endValue_; }
      set {
        endValue_ = value;
      }
    }

    /// <summary>Field number for the "current_value" field.</summary>
    public const int CurrentValueFieldNumber = 5;
    private double currentValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentValue {
      get { return currentValue_; }
      set {
        currentValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBadge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBadge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BadgeType != other.BadgeType) return false;
      if (Rank != other.Rank) return false;
      if (StartValue != other.StartValue) return false;
      if (EndValue != other.EndValue) return false;
      if (CurrentValue != other.CurrentValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BadgeType != 0) hash ^= BadgeType.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (StartValue != 0) hash ^= StartValue.GetHashCode();
      if (EndValue != 0) hash ^= EndValue.GetHashCode();
      if (CurrentValue != 0D) hash ^= CurrentValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BadgeType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BadgeType);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (StartValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartValue);
      }
      if (EndValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndValue);
      }
      if (CurrentValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CurrentValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BadgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BadgeType);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (StartValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartValue);
      }
      if (EndValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndValue);
      }
      if (CurrentValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBadge other) {
      if (other == null) {
        return;
      }
      if (other.BadgeType != 0) {
        BadgeType = other.BadgeType;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.StartValue != 0) {
        StartValue = other.StartValue;
      }
      if (other.EndValue != 0) {
        EndValue = other.EndValue;
      }
      if (other.CurrentValue != 0D) {
        CurrentValue = other.CurrentValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            badgeType_ = (global::POGOProtos.Enums.BadgeType) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 24: {
            StartValue = input.ReadInt32();
            break;
          }
          case 32: {
            EndValue = input.ReadInt32();
            break;
          }
          case 41: {
            CurrentValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DownloadUrlEntry : pb::IMessage<DownloadUrlEntry> {
    private static readonly pb::MessageParser<DownloadUrlEntry> _parser = new pb::MessageParser<DownloadUrlEntry>(() => new DownloadUrlEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DownloadUrlEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.POGOProtosDataReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadUrlEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadUrlEntry(DownloadUrlEntry other) : this() {
      assetId_ = other.assetId_;
      url_ = other.url_;
      size_ = other.size_;
      checksum_ = other.checksum_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DownloadUrlEntry Clone() {
      return new DownloadUrlEntry(this);
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 1;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "url" field.</summary>
    public const int UrlFieldNumber = 2;
    private string url_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Url {
      get { return url_; }
      set {
        url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 3;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 4;
    private uint checksum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Checksum {
      get { return checksum_; }
      set {
        checksum_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DownloadUrlEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DownloadUrlEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetId != other.AssetId) return false;
      if (Url != other.Url) return false;
      if (Size != other.Size) return false;
      if (Checksum != other.Checksum) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (Url.Length != 0) hash ^= Url.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Checksum != 0) hash ^= Checksum.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetId);
      }
      if (Url.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Url);
      }
      if (Size != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Size);
      }
      if (Checksum != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Checksum);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (Url.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Checksum != 0) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DownloadUrlEntry other) {
      if (other == null) {
        return;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.Url.Length != 0) {
        Url = other.Url;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Checksum != 0) {
        Checksum = other.Checksum;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AssetId = input.ReadString();
            break;
          }
          case 18: {
            Url = input.ReadString();
            break;
          }
          case 24: {
            Size = input.ReadInt32();
            break;
          }
          case 37: {
            Checksum = input.ReadFixed32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokedexEntry : pb::IMessage<PokedexEntry> {
    private static readonly pb::MessageParser<PokedexEntry> _parser = new pb::MessageParser<PokedexEntry>(() => new PokedexEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokedexEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.POGOProtosDataReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokedexEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokedexEntry(PokedexEntry other) : this() {
      pokemonId_ = other.pokemonId_;
      timesEncountered_ = other.timesEncountered_;
      timesCaptured_ = other.timesCaptured_;
      evolutionStonePieces_ = other.evolutionStonePieces_;
      evolutionStones_ = other.evolutionStones_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokedexEntry Clone() {
      return new PokedexEntry(this);
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private global::POGOProtos.Enums.PokemonId pokemonId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonId PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "times_encountered" field.</summary>
    public const int TimesEncounteredFieldNumber = 2;
    private int timesEncountered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesEncountered {
      get { return timesEncountered_; }
      set {
        timesEncountered_ = value;
      }
    }

    /// <summary>Field number for the "times_captured" field.</summary>
    public const int TimesCapturedFieldNumber = 3;
    private int timesCaptured_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesCaptured {
      get { return timesCaptured_; }
      set {
        timesCaptured_ = value;
      }
    }

    /// <summary>Field number for the "evolution_stone_pieces" field.</summary>
    public const int EvolutionStonePiecesFieldNumber = 4;
    private int evolutionStonePieces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EvolutionStonePieces {
      get { return evolutionStonePieces_; }
      set {
        evolutionStonePieces_ = value;
      }
    }

    /// <summary>Field number for the "evolution_stones" field.</summary>
    public const int EvolutionStonesFieldNumber = 5;
    private int evolutionStones_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EvolutionStones {
      get { return evolutionStones_; }
      set {
        evolutionStones_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokedexEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokedexEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      if (TimesEncountered != other.TimesEncountered) return false;
      if (TimesCaptured != other.TimesCaptured) return false;
      if (EvolutionStonePieces != other.EvolutionStonePieces) return false;
      if (EvolutionStones != other.EvolutionStones) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (TimesEncountered != 0) hash ^= TimesEncountered.GetHashCode();
      if (TimesCaptured != 0) hash ^= TimesCaptured.GetHashCode();
      if (EvolutionStonePieces != 0) hash ^= EvolutionStonePieces.GetHashCode();
      if (EvolutionStones != 0) hash ^= EvolutionStones.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PokemonId);
      }
      if (TimesEncountered != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimesEncountered);
      }
      if (TimesCaptured != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimesCaptured);
      }
      if (EvolutionStonePieces != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EvolutionStonePieces);
      }
      if (EvolutionStones != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EvolutionStones);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonId);
      }
      if (TimesEncountered != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesEncountered);
      }
      if (TimesCaptured != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesCaptured);
      }
      if (EvolutionStonePieces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionStonePieces);
      }
      if (EvolutionStones != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionStones);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokedexEntry other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.TimesEncountered != 0) {
        TimesEncountered = other.TimesEncountered;
      }
      if (other.TimesCaptured != 0) {
        TimesCaptured = other.TimesCaptured;
      }
      if (other.EvolutionStonePieces != 0) {
        EvolutionStonePieces = other.EvolutionStonePieces;
      }
      if (other.EvolutionStones != 0) {
        EvolutionStones = other.EvolutionStones;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pokemonId_ = (global::POGOProtos.Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 16: {
            TimesEncountered = input.ReadInt32();
            break;
          }
          case 24: {
            TimesCaptured = input.ReadInt32();
            break;
          }
          case 32: {
            EvolutionStonePieces = input.ReadInt32();
            break;
          }
          case 40: {
            EvolutionStones = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokemonData : pb::IMessage<PokemonData> {
    private static readonly pb::MessageParser<PokemonData> _parser = new pb::MessageParser<PokemonData>(() => new PokemonData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.POGOProtosDataReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonData(PokemonData other) : this() {
      id_ = other.id_;
      pokemonId_ = other.pokemonId_;
      cp_ = other.cp_;
      stamina_ = other.stamina_;
      staminaMax_ = other.staminaMax_;
      move1_ = other.move1_;
      move2_ = other.move2_;
      deployedFortId_ = other.deployedFortId_;
      ownerName_ = other.ownerName_;
      isEgg_ = other.isEgg_;
      eggKmWalkedTarget_ = other.eggKmWalkedTarget_;
      eggKmWalkedStart_ = other.eggKmWalkedStart_;
      origin_ = other.origin_;
      heightM_ = other.heightM_;
      weightKg_ = other.weightKg_;
      individualAttack_ = other.individualAttack_;
      individualDefense_ = other.individualDefense_;
      individualStamina_ = other.individualStamina_;
      cpMultiplier_ = other.cpMultiplier_;
      pokeball_ = other.pokeball_;
      capturedCellId_ = other.capturedCellId_;
      battlesAttacked_ = other.battlesAttacked_;
      battlesDefended_ = other.battlesDefended_;
      eggIncubatorId_ = other.eggIncubatorId_;
      creationTimeMs_ = other.creationTimeMs_;
      numUpgrades_ = other.numUpgrades_;
      additionalCpMultiplier_ = other.additionalCpMultiplier_;
      favorite_ = other.favorite_;
      nickname_ = other.nickname_;
      fromFort_ = other.fromFort_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonData Clone() {
      return new PokemonData(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private ulong id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 2;
    private global::POGOProtos.Enums.PokemonId pokemonId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonId PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "cp" field.</summary>
    public const int CpFieldNumber = 3;
    private int cp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Cp {
      get { return cp_; }
      set {
        cp_ = value;
      }
    }

    /// <summary>Field number for the "stamina" field.</summary>
    public const int StaminaFieldNumber = 4;
    private int stamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Stamina {
      get { return stamina_; }
      set {
        stamina_ = value;
      }
    }

    /// <summary>Field number for the "stamina_max" field.</summary>
    public const int StaminaMaxFieldNumber = 5;
    private int staminaMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaminaMax {
      get { return staminaMax_; }
      set {
        staminaMax_ = value;
      }
    }

    /// <summary>Field number for the "move_1" field.</summary>
    public const int Move1FieldNumber = 6;
    private global::POGOProtos.Enums.PokemonMove move1_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonMove Move1 {
      get { return move1_; }
      set {
        move1_ = value;
      }
    }

    /// <summary>Field number for the "move_2" field.</summary>
    public const int Move2FieldNumber = 7;
    private global::POGOProtos.Enums.PokemonMove move2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonMove Move2 {
      get { return move2_; }
      set {
        move2_ = value;
      }
    }

    /// <summary>Field number for the "deployed_fort_id" field.</summary>
    public const int DeployedFortIdFieldNumber = 8;
    private string deployedFortId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DeployedFortId {
      get { return deployedFortId_; }
      set {
        deployedFortId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "owner_name" field.</summary>
    public const int OwnerNameFieldNumber = 9;
    private string ownerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OwnerName {
      get { return ownerName_; }
      set {
        ownerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_egg" field.</summary>
    public const int IsEggFieldNumber = 10;
    private bool isEgg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsEgg {
      get { return isEgg_; }
      set {
        isEgg_ = value;
      }
    }

    /// <summary>Field number for the "egg_km_walked_target" field.</summary>
    public const int EggKmWalkedTargetFieldNumber = 11;
    private double eggKmWalkedTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EggKmWalkedTarget {
      get { return eggKmWalkedTarget_; }
      set {
        eggKmWalkedTarget_ = value;
      }
    }

    /// <summary>Field number for the "egg_km_walked_start" field.</summary>
    public const int EggKmWalkedStartFieldNumber = 12;
    private double eggKmWalkedStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double EggKmWalkedStart {
      get { return eggKmWalkedStart_; }
      set {
        eggKmWalkedStart_ = value;
      }
    }

    /// <summary>Field number for the "origin" field.</summary>
    public const int OriginFieldNumber = 14;
    private int origin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Origin {
      get { return origin_; }
      set {
        origin_ = value;
      }
    }

    /// <summary>Field number for the "height_m" field.</summary>
    public const int HeightMFieldNumber = 15;
    private float heightM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightM {
      get { return heightM_; }
      set {
        heightM_ = value;
      }
    }

    /// <summary>Field number for the "weight_kg" field.</summary>
    public const int WeightKgFieldNumber = 16;
    private float weightKg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeightKg {
      get { return weightKg_; }
      set {
        weightKg_ = value;
      }
    }

    /// <summary>Field number for the "individual_attack" field.</summary>
    public const int IndividualAttackFieldNumber = 17;
    private int individualAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualAttack {
      get { return individualAttack_; }
      set {
        individualAttack_ = value;
      }
    }

    /// <summary>Field number for the "individual_defense" field.</summary>
    public const int IndividualDefenseFieldNumber = 18;
    private int individualDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualDefense {
      get { return individualDefense_; }
      set {
        individualDefense_ = value;
      }
    }

    /// <summary>Field number for the "individual_stamina" field.</summary>
    public const int IndividualStaminaFieldNumber = 19;
    private int individualStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IndividualStamina {
      get { return individualStamina_; }
      set {
        individualStamina_ = value;
      }
    }

    /// <summary>Field number for the "cp_multiplier" field.</summary>
    public const int CpMultiplierFieldNumber = 20;
    private float cpMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CpMultiplier {
      get { return cpMultiplier_; }
      set {
        cpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "pokeball" field.</summary>
    public const int PokeballFieldNumber = 21;
    private global::POGOProtos.Inventory.Item.ItemId pokeball_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.Item.ItemId Pokeball {
      get { return pokeball_; }
      set {
        pokeball_ = value;
      }
    }

    /// <summary>Field number for the "captured_cell_id" field.</summary>
    public const int CapturedCellIdFieldNumber = 22;
    private ulong capturedCellId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CapturedCellId {
      get { return capturedCellId_; }
      set {
        capturedCellId_ = value;
      }
    }

    /// <summary>Field number for the "battles_attacked" field.</summary>
    public const int BattlesAttackedFieldNumber = 23;
    private int battlesAttacked_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlesAttacked {
      get { return battlesAttacked_; }
      set {
        battlesAttacked_ = value;
      }
    }

    /// <summary>Field number for the "battles_defended" field.</summary>
    public const int BattlesDefendedFieldNumber = 24;
    private int battlesDefended_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BattlesDefended {
      get { return battlesDefended_; }
      set {
        battlesDefended_ = value;
      }
    }

    /// <summary>Field number for the "egg_incubator_id" field.</summary>
    public const int EggIncubatorIdFieldNumber = 25;
    private string eggIncubatorId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EggIncubatorId {
      get { return eggIncubatorId_; }
      set {
        eggIncubatorId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "creation_time_ms" field.</summary>
    public const int CreationTimeMsFieldNumber = 26;
    private ulong creationTimeMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong CreationTimeMs {
      get { return creationTimeMs_; }
      set {
        creationTimeMs_ = value;
      }
    }

    /// <summary>Field number for the "num_upgrades" field.</summary>
    public const int NumUpgradesFieldNumber = 27;
    private int numUpgrades_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int NumUpgrades {
      get { return numUpgrades_; }
      set {
        numUpgrades_ = value;
      }
    }

    /// <summary>Field number for the "additional_cp_multiplier" field.</summary>
    public const int AdditionalCpMultiplierFieldNumber = 28;
    private float additionalCpMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AdditionalCpMultiplier {
      get { return additionalCpMultiplier_; }
      set {
        additionalCpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "favorite" field.</summary>
    public const int FavoriteFieldNumber = 29;
    private int favorite_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Favorite {
      get { return favorite_; }
      set {
        favorite_ = value;
      }
    }

    /// <summary>Field number for the "nickname" field.</summary>
    public const int NicknameFieldNumber = 30;
    private string nickname_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Nickname {
      get { return nickname_; }
      set {
        nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "from_fort" field.</summary>
    public const int FromFortFieldNumber = 31;
    private int fromFort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int FromFort {
      get { return fromFort_; }
      set {
        fromFort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (PokemonId != other.PokemonId) return false;
      if (Cp != other.Cp) return false;
      if (Stamina != other.Stamina) return false;
      if (StaminaMax != other.StaminaMax) return false;
      if (Move1 != other.Move1) return false;
      if (Move2 != other.Move2) return false;
      if (DeployedFortId != other.DeployedFortId) return false;
      if (OwnerName != other.OwnerName) return false;
      if (IsEgg != other.IsEgg) return false;
      if (EggKmWalkedTarget != other.EggKmWalkedTarget) return false;
      if (EggKmWalkedStart != other.EggKmWalkedStart) return false;
      if (Origin != other.Origin) return false;
      if (HeightM != other.HeightM) return false;
      if (WeightKg != other.WeightKg) return false;
      if (IndividualAttack != other.IndividualAttack) return false;
      if (IndividualDefense != other.IndividualDefense) return false;
      if (IndividualStamina != other.IndividualStamina) return false;
      if (CpMultiplier != other.CpMultiplier) return false;
      if (Pokeball != other.Pokeball) return false;
      if (CapturedCellId != other.CapturedCellId) return false;
      if (BattlesAttacked != other.BattlesAttacked) return false;
      if (BattlesDefended != other.BattlesDefended) return false;
      if (EggIncubatorId != other.EggIncubatorId) return false;
      if (CreationTimeMs != other.CreationTimeMs) return false;
      if (NumUpgrades != other.NumUpgrades) return false;
      if (AdditionalCpMultiplier != other.AdditionalCpMultiplier) return false;
      if (Favorite != other.Favorite) return false;
      if (Nickname != other.Nickname) return false;
      if (FromFort != other.FromFort) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0UL) hash ^= Id.GetHashCode();
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (Cp != 0) hash ^= Cp.GetHashCode();
      if (Stamina != 0) hash ^= Stamina.GetHashCode();
      if (StaminaMax != 0) hash ^= StaminaMax.GetHashCode();
      if (Move1 != 0) hash ^= Move1.GetHashCode();
      if (Move2 != 0) hash ^= Move2.GetHashCode();
      if (DeployedFortId.Length != 0) hash ^= DeployedFortId.GetHashCode();
      if (OwnerName.Length != 0) hash ^= OwnerName.GetHashCode();
      if (IsEgg != false) hash ^= IsEgg.GetHashCode();
      if (EggKmWalkedTarget != 0D) hash ^= EggKmWalkedTarget.GetHashCode();
      if (EggKmWalkedStart != 0D) hash ^= EggKmWalkedStart.GetHashCode();
      if (Origin != 0) hash ^= Origin.GetHashCode();
      if (HeightM != 0F) hash ^= HeightM.GetHashCode();
      if (WeightKg != 0F) hash ^= WeightKg.GetHashCode();
      if (IndividualAttack != 0) hash ^= IndividualAttack.GetHashCode();
      if (IndividualDefense != 0) hash ^= IndividualDefense.GetHashCode();
      if (IndividualStamina != 0) hash ^= IndividualStamina.GetHashCode();
      if (CpMultiplier != 0F) hash ^= CpMultiplier.GetHashCode();
      if (Pokeball != 0) hash ^= Pokeball.GetHashCode();
      if (CapturedCellId != 0UL) hash ^= CapturedCellId.GetHashCode();
      if (BattlesAttacked != 0) hash ^= BattlesAttacked.GetHashCode();
      if (BattlesDefended != 0) hash ^= BattlesDefended.GetHashCode();
      if (EggIncubatorId.Length != 0) hash ^= EggIncubatorId.GetHashCode();
      if (CreationTimeMs != 0UL) hash ^= CreationTimeMs.GetHashCode();
      if (NumUpgrades != 0) hash ^= NumUpgrades.GetHashCode();
      if (AdditionalCpMultiplier != 0F) hash ^= AdditionalCpMultiplier.GetHashCode();
      if (Favorite != 0) hash ^= Favorite.GetHashCode();
      if (Nickname.Length != 0) hash ^= Nickname.GetHashCode();
      if (FromFort != 0) hash ^= FromFort.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0UL) {
        output.WriteRawTag(9);
        output.WriteFixed64(Id);
      }
      if (PokemonId != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) PokemonId);
      }
      if (Cp != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Cp);
      }
      if (Stamina != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Stamina);
      }
      if (StaminaMax != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(StaminaMax);
      }
      if (Move1 != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) Move1);
      }
      if (Move2 != 0) {
        output.WriteRawTag(56);
        output.WriteEnum((int) Move2);
      }
      if (DeployedFortId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DeployedFortId);
      }
      if (OwnerName.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(OwnerName);
      }
      if (IsEgg != false) {
        output.WriteRawTag(80);
        output.WriteBool(IsEgg);
      }
      if (EggKmWalkedTarget != 0D) {
        output.WriteRawTag(89);
        output.WriteDouble(EggKmWalkedTarget);
      }
      if (EggKmWalkedStart != 0D) {
        output.WriteRawTag(97);
        output.WriteDouble(EggKmWalkedStart);
      }
      if (Origin != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Origin);
      }
      if (HeightM != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(HeightM);
      }
      if (WeightKg != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(WeightKg);
      }
      if (IndividualAttack != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(IndividualStamina);
      }
      if (CpMultiplier != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(CpMultiplier);
      }
      if (Pokeball != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) Pokeball);
      }
      if (CapturedCellId != 0UL) {
        output.WriteRawTag(176, 1);
        output.WriteUInt64(CapturedCellId);
      }
      if (BattlesAttacked != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(BattlesAttacked);
      }
      if (BattlesDefended != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(BattlesDefended);
      }
      if (EggIncubatorId.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(EggIncubatorId);
      }
      if (CreationTimeMs != 0UL) {
        output.WriteRawTag(208, 1);
        output.WriteUInt64(CreationTimeMs);
      }
      if (NumUpgrades != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(NumUpgrades);
      }
      if (AdditionalCpMultiplier != 0F) {
        output.WriteRawTag(229, 1);
        output.WriteFloat(AdditionalCpMultiplier);
      }
      if (Favorite != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(Favorite);
      }
      if (Nickname.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Nickname);
      }
      if (FromFort != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(FromFort);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0UL) {
        size += 1 + 8;
      }
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonId);
      }
      if (Cp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Cp);
      }
      if (Stamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Stamina);
      }
      if (StaminaMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaminaMax);
      }
      if (Move1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Move1);
      }
      if (Move2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Move2);
      }
      if (DeployedFortId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeployedFortId);
      }
      if (OwnerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OwnerName);
      }
      if (IsEgg != false) {
        size += 1 + 1;
      }
      if (EggKmWalkedTarget != 0D) {
        size += 1 + 8;
      }
      if (EggKmWalkedStart != 0D) {
        size += 1 + 8;
      }
      if (Origin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Origin);
      }
      if (HeightM != 0F) {
        size += 1 + 4;
      }
      if (WeightKg != 0F) {
        size += 2 + 4;
      }
      if (IndividualAttack != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualAttack);
      }
      if (IndividualDefense != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualDefense);
      }
      if (IndividualStamina != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(IndividualStamina);
      }
      if (CpMultiplier != 0F) {
        size += 2 + 4;
      }
      if (Pokeball != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Pokeball);
      }
      if (CapturedCellId != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CapturedCellId);
      }
      if (BattlesAttacked != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattlesAttacked);
      }
      if (BattlesDefended != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BattlesDefended);
      }
      if (EggIncubatorId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EggIncubatorId);
      }
      if (CreationTimeMs != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(CreationTimeMs);
      }
      if (NumUpgrades != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NumUpgrades);
      }
      if (AdditionalCpMultiplier != 0F) {
        size += 2 + 4;
      }
      if (Favorite != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Favorite);
      }
      if (Nickname.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Nickname);
      }
      if (FromFort != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FromFort);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonData other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0UL) {
        Id = other.Id;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.Cp != 0) {
        Cp = other.Cp;
      }
      if (other.Stamina != 0) {
        Stamina = other.Stamina;
      }
      if (other.StaminaMax != 0) {
        StaminaMax = other.StaminaMax;
      }
      if (other.Move1 != 0) {
        Move1 = other.Move1;
      }
      if (other.Move2 != 0) {
        Move2 = other.Move2;
      }
      if (other.DeployedFortId.Length != 0) {
        DeployedFortId = other.DeployedFortId;
      }
      if (other.OwnerName.Length != 0) {
        OwnerName = other.OwnerName;
      }
      if (other.IsEgg != false) {
        IsEgg = other.IsEgg;
      }
      if (other.EggKmWalkedTarget != 0D) {
        EggKmWalkedTarget = other.EggKmWalkedTarget;
      }
      if (other.EggKmWalkedStart != 0D) {
        EggKmWalkedStart = other.EggKmWalkedStart;
      }
      if (other.Origin != 0) {
        Origin = other.Origin;
      }
      if (other.HeightM != 0F) {
        HeightM = other.HeightM;
      }
      if (other.WeightKg != 0F) {
        WeightKg = other.WeightKg;
      }
      if (other.IndividualAttack != 0) {
        IndividualAttack = other.IndividualAttack;
      }
      if (other.IndividualDefense != 0) {
        IndividualDefense = other.IndividualDefense;
      }
      if (other.IndividualStamina != 0) {
        IndividualStamina = other.IndividualStamina;
      }
      if (other.CpMultiplier != 0F) {
        CpMultiplier = other.CpMultiplier;
      }
      if (other.Pokeball != 0) {
        Pokeball = other.Pokeball;
      }
      if (other.CapturedCellId != 0UL) {
        CapturedCellId = other.CapturedCellId;
      }
      if (other.BattlesAttacked != 0) {
        BattlesAttacked = other.BattlesAttacked;
      }
      if (other.BattlesDefended != 0) {
        BattlesDefended = other.BattlesDefended;
      }
      if (other.EggIncubatorId.Length != 0) {
        EggIncubatorId = other.EggIncubatorId;
      }
      if (other.CreationTimeMs != 0UL) {
        CreationTimeMs = other.CreationTimeMs;
      }
      if (other.NumUpgrades != 0) {
        NumUpgrades = other.NumUpgrades;
      }
      if (other.AdditionalCpMultiplier != 0F) {
        AdditionalCpMultiplier = other.AdditionalCpMultiplier;
      }
      if (other.Favorite != 0) {
        Favorite = other.Favorite;
      }
      if (other.Nickname.Length != 0) {
        Nickname = other.Nickname;
      }
      if (other.FromFort != 0) {
        FromFort = other.FromFort;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            Id = input.ReadFixed64();
            break;
          }
          case 16: {
            pokemonId_ = (global::POGOProtos.Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 24: {
            Cp = input.ReadInt32();
            break;
          }
          case 32: {
            Stamina = input.ReadInt32();
            break;
          }
          case 40: {
            StaminaMax = input.ReadInt32();
            break;
          }
          case 48: {
            move1_ = (global::POGOProtos.Enums.PokemonMove) input.ReadEnum();
            break;
          }
          case 56: {
            move2_ = (global::POGOProtos.Enums.PokemonMove) input.ReadEnum();
            break;
          }
          case 66: {
            DeployedFortId = input.ReadString();
            break;
          }
          case 74: {
            OwnerName = input.ReadString();
            break;
          }
          case 80: {
            IsEgg = input.ReadBool();
            break;
          }
          case 89: {
            EggKmWalkedTarget = input.ReadDouble();
            break;
          }
          case 97: {
            EggKmWalkedStart = input.ReadDouble();
            break;
          }
          case 112: {
            Origin = input.ReadInt32();
            break;
          }
          case 125: {
            HeightM = input.ReadFloat();
            break;
          }
          case 133: {
            WeightKg = input.ReadFloat();
            break;
          }
          case 136: {
            IndividualAttack = input.ReadInt32();
            break;
          }
          case 144: {
            IndividualDefense = input.ReadInt32();
            break;
          }
          case 152: {
            IndividualStamina = input.ReadInt32();
            break;
          }
          case 165: {
            CpMultiplier = input.ReadFloat();
            break;
          }
          case 168: {
            pokeball_ = (global::POGOProtos.Inventory.Item.ItemId) input.ReadEnum();
            break;
          }
          case 176: {
            CapturedCellId = input.ReadUInt64();
            break;
          }
          case 184: {
            BattlesAttacked = input.ReadInt32();
            break;
          }
          case 192: {
            BattlesDefended = input.ReadInt32();
            break;
          }
          case 202: {
            EggIncubatorId = input.ReadString();
            break;
          }
          case 208: {
            CreationTimeMs = input.ReadUInt64();
            break;
          }
          case 216: {
            NumUpgrades = input.ReadInt32();
            break;
          }
          case 229: {
            AdditionalCpMultiplier = input.ReadFloat();
            break;
          }
          case 232: {
            Favorite = input.ReadInt32();
            break;
          }
          case 242: {
            Nickname = input.ReadString();
            break;
          }
          case 248: {
            FromFort = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class AssetDigestEntry : pb::IMessage<AssetDigestEntry> {
    private static readonly pb::MessageParser<AssetDigestEntry> _parser = new pb::MessageParser<AssetDigestEntry>(() => new AssetDigestEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AssetDigestEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.POGOProtosDataReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetDigestEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetDigestEntry(AssetDigestEntry other) : this() {
      assetId_ = other.assetId_;
      bundleName_ = other.bundleName_;
      version_ = other.version_;
      checksum_ = other.checksum_;
      size_ = other.size_;
      key_ = other.key_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AssetDigestEntry Clone() {
      return new AssetDigestEntry(this);
    }

    /// <summary>Field number for the "asset_id" field.</summary>
    public const int AssetIdFieldNumber = 1;
    private string assetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string AssetId {
      get { return assetId_; }
      set {
        assetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "bundle_name" field.</summary>
    public const int BundleNameFieldNumber = 2;
    private string bundleName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string BundleName {
      get { return bundleName_; }
      set {
        bundleName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private long version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "checksum" field.</summary>
    public const int ChecksumFieldNumber = 4;
    private uint checksum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Checksum {
      get { return checksum_; }
      set {
        checksum_ = value;
      }
    }

    /// <summary>Field number for the "size" field.</summary>
    public const int SizeFieldNumber = 5;
    private int size_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Size {
      get { return size_; }
      set {
        size_ = value;
      }
    }

    /// <summary>Field number for the "key" field.</summary>
    public const int KeyFieldNumber = 6;
    private pb::ByteString key_ = pb::ByteString.Empty;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pb::ByteString Key {
      get { return key_; }
      set {
        key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AssetDigestEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AssetDigestEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AssetId != other.AssetId) return false;
      if (BundleName != other.BundleName) return false;
      if (Version != other.Version) return false;
      if (Checksum != other.Checksum) return false;
      if (Size != other.Size) return false;
      if (Key != other.Key) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AssetId.Length != 0) hash ^= AssetId.GetHashCode();
      if (BundleName.Length != 0) hash ^= BundleName.GetHashCode();
      if (Version != 0L) hash ^= Version.GetHashCode();
      if (Checksum != 0) hash ^= Checksum.GetHashCode();
      if (Size != 0) hash ^= Size.GetHashCode();
      if (Key.Length != 0) hash ^= Key.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AssetId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(AssetId);
      }
      if (BundleName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(BundleName);
      }
      if (Version != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Version);
      }
      if (Checksum != 0) {
        output.WriteRawTag(37);
        output.WriteFixed32(Checksum);
      }
      if (Size != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Size);
      }
      if (Key.Length != 0) {
        output.WriteRawTag(50);
        output.WriteBytes(Key);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AssetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AssetId);
      }
      if (BundleName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(BundleName);
      }
      if (Version != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Version);
      }
      if (Checksum != 0) {
        size += 1 + 4;
      }
      if (Size != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Size);
      }
      if (Key.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Key);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AssetDigestEntry other) {
      if (other == null) {
        return;
      }
      if (other.AssetId.Length != 0) {
        AssetId = other.AssetId;
      }
      if (other.BundleName.Length != 0) {
        BundleName = other.BundleName;
      }
      if (other.Version != 0L) {
        Version = other.Version;
      }
      if (other.Checksum != 0) {
        Checksum = other.Checksum;
      }
      if (other.Size != 0) {
        Size = other.Size;
      }
      if (other.Key.Length != 0) {
        Key = other.Key;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            AssetId = input.ReadString();
            break;
          }
          case 18: {
            BundleName = input.ReadString();
            break;
          }
          case 24: {
            Version = input.ReadInt64();
            break;
          }
          case 37: {
            Checksum = input.ReadFixed32();
            break;
          }
          case 40: {
            Size = input.ReadInt32();
            break;
          }
          case 50: {
            Key = input.ReadBytes();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerData : pb::IMessage<PlayerData> {
    private static readonly pb::MessageParser<PlayerData> _parser = new pb::MessageParser<PlayerData>(() => new PlayerData());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.POGOProtosDataReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData(PlayerData other) : this() {
      creationTimestampMs_ = other.creationTimestampMs_;
      username_ = other.username_;
      team_ = other.team_;
      tutorialState_ = other.tutorialState_.Clone();
      Avatar = other.avatar_ != null ? other.Avatar.Clone() : null;
      maxPokemonStorage_ = other.maxPokemonStorage_;
      maxItemStorage_ = other.maxItemStorage_;
      DailyBonus = other.dailyBonus_ != null ? other.DailyBonus.Clone() : null;
      EquippedBadge = other.equippedBadge_ != null ? other.EquippedBadge.Clone() : null;
      ContactSettings = other.contactSettings_ != null ? other.ContactSettings.Clone() : null;
      currencies_ = other.currencies_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerData Clone() {
      return new PlayerData(this);
    }

    /// <summary>Field number for the "creation_timestamp_ms" field.</summary>
    public const int CreationTimestampMsFieldNumber = 1;
    private long creationTimestampMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CreationTimestampMs {
      get { return creationTimestampMs_; }
      set {
        creationTimestampMs_ = value;
      }
    }

    /// <summary>Field number for the "username" field.</summary>
    public const int UsernameFieldNumber = 2;
    private string username_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Username {
      get { return username_; }
      set {
        username_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "team" field.</summary>
    public const int TeamFieldNumber = 5;
    private global::POGOProtos.Enums.TeamColor team_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.TeamColor Team {
      get { return team_; }
      set {
        team_ = value;
      }
    }

    /// <summary>Field number for the "tutorial_state" field.</summary>
    public const int TutorialStateFieldNumber = 7;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.TutorialState> _repeated_tutorialState_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::POGOProtos.Enums.TutorialState) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.TutorialState> tutorialState_ = new pbc::RepeatedField<global::POGOProtos.Enums.TutorialState>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.TutorialState> TutorialState {
      get { return tutorialState_; }
    }

    /// <summary>Field number for the "avatar" field.</summary>
    public const int AvatarFieldNumber = 8;
    private global::POGOProtos.Data.Player.PlayerAvatar avatar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Player.PlayerAvatar Avatar {
      get { return avatar_; }
      set {
        avatar_ = value;
      }
    }

    /// <summary>Field number for the "max_pokemon_storage" field.</summary>
    public const int MaxPokemonStorageFieldNumber = 9;
    private int maxPokemonStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxPokemonStorage {
      get { return maxPokemonStorage_; }
      set {
        maxPokemonStorage_ = value;
      }
    }

    /// <summary>Field number for the "max_item_storage" field.</summary>
    public const int MaxItemStorageFieldNumber = 10;
    private int maxItemStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxItemStorage {
      get { return maxItemStorage_; }
      set {
        maxItemStorage_ = value;
      }
    }

    /// <summary>Field number for the "daily_bonus" field.</summary>
    public const int DailyBonusFieldNumber = 11;
    private global::POGOProtos.Data.Player.DailyBonus dailyBonus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Player.DailyBonus DailyBonus {
      get { return dailyBonus_; }
      set {
        dailyBonus_ = value;
      }
    }

    /// <summary>Field number for the "equipped_badge" field.</summary>
    public const int EquippedBadgeFieldNumber = 12;
    private global::POGOProtos.Data.Player.EquippedBadge equippedBadge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Player.EquippedBadge EquippedBadge {
      get { return equippedBadge_; }
      set {
        equippedBadge_ = value;
      }
    }

    /// <summary>Field number for the "contact_settings" field.</summary>
    public const int ContactSettingsFieldNumber = 13;
    private global::POGOProtos.Data.Player.ContactSettings contactSettings_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Data.Player.ContactSettings ContactSettings {
      get { return contactSettings_; }
      set {
        contactSettings_ = value;
      }
    }

    /// <summary>Field number for the "currencies" field.</summary>
    public const int CurrenciesFieldNumber = 14;
    private static readonly pb::FieldCodec<global::POGOProtos.Data.Player.Currency> _repeated_currencies_codec
        = pb::FieldCodec.ForMessage(114, global::POGOProtos.Data.Player.Currency.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Data.Player.Currency> currencies_ = new pbc::RepeatedField<global::POGOProtos.Data.Player.Currency>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Data.Player.Currency> Currencies {
      get { return currencies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (CreationTimestampMs != other.CreationTimestampMs) return false;
      if (Username != other.Username) return false;
      if (Team != other.Team) return false;
      if(!tutorialState_.Equals(other.tutorialState_)) return false;
      if (!object.Equals(Avatar, other.Avatar)) return false;
      if (MaxPokemonStorage != other.MaxPokemonStorage) return false;
      if (MaxItemStorage != other.MaxItemStorage) return false;
      if (!object.Equals(DailyBonus, other.DailyBonus)) return false;
      if (!object.Equals(EquippedBadge, other.EquippedBadge)) return false;
      if (!object.Equals(ContactSettings, other.ContactSettings)) return false;
      if(!currencies_.Equals(other.currencies_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (CreationTimestampMs != 0L) hash ^= CreationTimestampMs.GetHashCode();
      if (Username.Length != 0) hash ^= Username.GetHashCode();
      if (Team != 0) hash ^= Team.GetHashCode();
      hash ^= tutorialState_.GetHashCode();
      if (avatar_ != null) hash ^= Avatar.GetHashCode();
      if (MaxPokemonStorage != 0) hash ^= MaxPokemonStorage.GetHashCode();
      if (MaxItemStorage != 0) hash ^= MaxItemStorage.GetHashCode();
      if (dailyBonus_ != null) hash ^= DailyBonus.GetHashCode();
      if (equippedBadge_ != null) hash ^= EquippedBadge.GetHashCode();
      if (contactSettings_ != null) hash ^= ContactSettings.GetHashCode();
      hash ^= currencies_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (CreationTimestampMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CreationTimestampMs);
      }
      if (Username.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Username);
      }
      if (Team != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Team);
      }
      tutorialState_.WriteTo(output, _repeated_tutorialState_codec);
      if (avatar_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Avatar);
      }
      if (MaxPokemonStorage != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MaxPokemonStorage);
      }
      if (MaxItemStorage != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxItemStorage);
      }
      if (dailyBonus_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(DailyBonus);
      }
      if (equippedBadge_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(EquippedBadge);
      }
      if (contactSettings_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(ContactSettings);
      }
      currencies_.WriteTo(output, _repeated_currencies_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (CreationTimestampMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreationTimestampMs);
      }
      if (Username.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Username);
      }
      if (Team != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Team);
      }
      size += tutorialState_.CalculateSize(_repeated_tutorialState_codec);
      if (avatar_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Avatar);
      }
      if (MaxPokemonStorage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxPokemonStorage);
      }
      if (MaxItemStorage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxItemStorage);
      }
      if (dailyBonus_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DailyBonus);
      }
      if (equippedBadge_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EquippedBadge);
      }
      if (contactSettings_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContactSettings);
      }
      size += currencies_.CalculateSize(_repeated_currencies_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerData other) {
      if (other == null) {
        return;
      }
      if (other.CreationTimestampMs != 0L) {
        CreationTimestampMs = other.CreationTimestampMs;
      }
      if (other.Username.Length != 0) {
        Username = other.Username;
      }
      if (other.Team != 0) {
        Team = other.Team;
      }
      tutorialState_.Add(other.tutorialState_);
      if (other.avatar_ != null) {
        if (avatar_ == null) {
          avatar_ = new global::POGOProtos.Data.Player.PlayerAvatar();
        }
        Avatar.MergeFrom(other.Avatar);
      }
      if (other.MaxPokemonStorage != 0) {
        MaxPokemonStorage = other.MaxPokemonStorage;
      }
      if (other.MaxItemStorage != 0) {
        MaxItemStorage = other.MaxItemStorage;
      }
      if (other.dailyBonus_ != null) {
        if (dailyBonus_ == null) {
          dailyBonus_ = new global::POGOProtos.Data.Player.DailyBonus();
        }
        DailyBonus.MergeFrom(other.DailyBonus);
      }
      if (other.equippedBadge_ != null) {
        if (equippedBadge_ == null) {
          equippedBadge_ = new global::POGOProtos.Data.Player.EquippedBadge();
        }
        EquippedBadge.MergeFrom(other.EquippedBadge);
      }
      if (other.contactSettings_ != null) {
        if (contactSettings_ == null) {
          contactSettings_ = new global::POGOProtos.Data.Player.ContactSettings();
        }
        ContactSettings.MergeFrom(other.ContactSettings);
      }
      currencies_.Add(other.currencies_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CreationTimestampMs = input.ReadInt64();
            break;
          }
          case 18: {
            Username = input.ReadString();
            break;
          }
          case 40: {
            team_ = (global::POGOProtos.Enums.TeamColor) input.ReadEnum();
            break;
          }
          case 58:
          case 56: {
            tutorialState_.AddEntriesFrom(input, _repeated_tutorialState_codec);
            break;
          }
          case 66: {
            if (avatar_ == null) {
              avatar_ = new global::POGOProtos.Data.Player.PlayerAvatar();
            }
            input.ReadMessage(avatar_);
            break;
          }
          case 72: {
            MaxPokemonStorage = input.ReadInt32();
            break;
          }
          case 80: {
            MaxItemStorage = input.ReadInt32();
            break;
          }
          case 90: {
            if (dailyBonus_ == null) {
              dailyBonus_ = new global::POGOProtos.Data.Player.DailyBonus();
            }
            input.ReadMessage(dailyBonus_);
            break;
          }
          case 98: {
            if (equippedBadge_ == null) {
              equippedBadge_ = new global::POGOProtos.Data.Player.EquippedBadge();
            }
            input.ReadMessage(equippedBadge_);
            break;
          }
          case 106: {
            if (contactSettings_ == null) {
              contactSettings_ = new global::POGOProtos.Data.Player.ContactSettings();
            }
            input.ReadMessage(contactSettings_);
            break;
          }
          case 114: {
            currencies_.AddEntriesFrom(input, _repeated_currencies_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
