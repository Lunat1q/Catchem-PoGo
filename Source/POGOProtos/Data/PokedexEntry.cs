// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PokedexEntry.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/PokedexEntry.proto</summary>
  public static partial class PokedexEntryReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/PokedexEntry.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PokedexEntryReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiJQT0dPUHJvdG9zL0RhdGEvUG9rZWRleEVudHJ5LnByb3RvEg9QT0dPUHJv",
            "dG9zLkRhdGEaIFBPR09Qcm90b3MvRW51bXMvUG9rZW1vbklkLnByb3RvIqwB",
            "CgxQb2tlZGV4RW50cnkSLwoKcG9rZW1vbl9pZBgBIAEoDjIbLlBPR09Qcm90",
            "b3MuRW51bXMuUG9rZW1vbklkEhkKEXRpbWVzX2VuY291bnRlcmVkGAIgASgF",
            "EhYKDnRpbWVzX2NhcHR1cmVkGAMgASgFEh4KFmV2b2x1dGlvbl9zdG9uZV9w",
            "aWVjZXMYBCABKAUSGAoQZXZvbHV0aW9uX3N0b25lcxgFIAEoBWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.PokemonIdReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.PokedexEntry), global::POGOProtos.Data.PokedexEntry.Parser, new[]{ "PokemonId", "TimesEncountered", "TimesCaptured", "EvolutionStonePieces", "EvolutionStones" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PokedexEntry : pb::IMessage<PokedexEntry> {
    private static readonly pb::MessageParser<PokedexEntry> _parser = new pb::MessageParser<PokedexEntry>(() => new PokedexEntry());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokedexEntry> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.PokedexEntryReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokedexEntry() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokedexEntry(PokedexEntry other) : this() {
      pokemonId_ = other.pokemonId_;
      timesEncountered_ = other.timesEncountered_;
      timesCaptured_ = other.timesCaptured_;
      evolutionStonePieces_ = other.evolutionStonePieces_;
      evolutionStones_ = other.evolutionStones_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokedexEntry Clone() {
      return new PokedexEntry(this);
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private global::POGOProtos.Enums.PokemonId pokemonId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonId PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "times_encountered" field.</summary>
    public const int TimesEncounteredFieldNumber = 2;
    private int timesEncountered_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesEncountered {
      get { return timesEncountered_; }
      set {
        timesEncountered_ = value;
      }
    }

    /// <summary>Field number for the "times_captured" field.</summary>
    public const int TimesCapturedFieldNumber = 3;
    private int timesCaptured_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TimesCaptured {
      get { return timesCaptured_; }
      set {
        timesCaptured_ = value;
      }
    }

    /// <summary>Field number for the "evolution_stone_pieces" field.</summary>
    public const int EvolutionStonePiecesFieldNumber = 4;
    private int evolutionStonePieces_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EvolutionStonePieces {
      get { return evolutionStonePieces_; }
      set {
        evolutionStonePieces_ = value;
      }
    }

    /// <summary>Field number for the "evolution_stones" field.</summary>
    public const int EvolutionStonesFieldNumber = 5;
    private int evolutionStones_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EvolutionStones {
      get { return evolutionStones_; }
      set {
        evolutionStones_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokedexEntry);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokedexEntry other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      if (TimesEncountered != other.TimesEncountered) return false;
      if (TimesCaptured != other.TimesCaptured) return false;
      if (EvolutionStonePieces != other.EvolutionStonePieces) return false;
      if (EvolutionStones != other.EvolutionStones) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (TimesEncountered != 0) hash ^= TimesEncountered.GetHashCode();
      if (TimesCaptured != 0) hash ^= TimesCaptured.GetHashCode();
      if (EvolutionStonePieces != 0) hash ^= EvolutionStonePieces.GetHashCode();
      if (EvolutionStones != 0) hash ^= EvolutionStones.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PokemonId);
      }
      if (TimesEncountered != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TimesEncountered);
      }
      if (TimesCaptured != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TimesCaptured);
      }
      if (EvolutionStonePieces != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EvolutionStonePieces);
      }
      if (EvolutionStones != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EvolutionStones);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonId);
      }
      if (TimesEncountered != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesEncountered);
      }
      if (TimesCaptured != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimesCaptured);
      }
      if (EvolutionStonePieces != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionStonePieces);
      }
      if (EvolutionStones != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionStones);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokedexEntry other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.TimesEncountered != 0) {
        TimesEncountered = other.TimesEncountered;
      }
      if (other.TimesCaptured != 0) {
        TimesCaptured = other.TimesCaptured;
      }
      if (other.EvolutionStonePieces != 0) {
        EvolutionStonePieces = other.EvolutionStonePieces;
      }
      if (other.EvolutionStones != 0) {
        EvolutionStones = other.EvolutionStones;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pokemonId_ = (global::POGOProtos.Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 16: {
            TimesEncountered = input.ReadInt32();
            break;
          }
          case 24: {
            TimesCaptured = input.ReadInt32();
            break;
          }
          case 32: {
            EvolutionStonePieces = input.ReadInt32();
            break;
          }
          case 40: {
            EvolutionStones = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
