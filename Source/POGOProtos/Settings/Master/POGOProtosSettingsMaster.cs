// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Settings.Master.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Settings.Master {

  /// <summary>Holder for reflection information generated from POGOProtos.Settings.Master.proto</summary>
  public static partial class POGOProtosSettingsMasterReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos.Settings.Master.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static POGOProtosSettingsMasterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBQT0dPUHJvdG9zLlNldHRpbmdzLk1hc3Rlci5wcm90bxIaUE9HT1Byb3Rv",
            "cy5TZXR0aW5ncy5NYXN0ZXIaFlBPR09Qcm90b3MuRW51bXMucHJvdG8aH1BP",
            "R09Qcm90b3MuSW52ZW50b3J5Lkl0ZW0ucHJvdG8aKFBPR09Qcm90b3MuU2V0",
            "dGluZ3MuTWFzdGVyLlBva2Vtb24ucHJvdG8aJVBPR09Qcm90b3MuU2V0dGlu",
            "Z3MuTWFzdGVyLkl0ZW0ucHJvdG8ihAEKFlBva2Vtb25VcGdyYWRlU2V0dGlu",
            "Z3MSGgoSdXBncmFkZXNfcGVyX2xldmVsGAEgASgFEiMKG2FsbG93ZWRfbGV2",
            "ZWxzX2Fib3ZlX3BsYXllchgCIAEoBRISCgpjYW5keV9jb3N0GAMgAygFEhUK",
            "DXN0YXJkdXN0X2Nvc3QYBCADKAUiKAoUTW92ZVNlcXVlbmNlU2V0dGluZ3MS",
            "EAoIc2VxdWVuY2UYASADKAkisQMKDE1vdmVTZXR0aW5ncxIyCgttb3ZlbWVu",
            "dF9pZBgBIAEoDjIdLlBPR09Qcm90b3MuRW51bXMuUG9rZW1vbk1vdmUSFAoM",
            "YW5pbWF0aW9uX2lkGAIgASgFEjMKDHBva2Vtb25fdHlwZRgDIAEoDjIdLlBP",
            "R09Qcm90b3MuRW51bXMuUG9rZW1vblR5cGUSDQoFcG93ZXIYBCABKAISFwoP",
            "YWNjdXJhY3lfY2hhbmNlGAUgASgCEhcKD2NyaXRpY2FsX2NoYW5jZRgGIAEo",
            "AhITCgtoZWFsX3NjYWxhchgHIAEoAhIbChNzdGFtaW5hX2xvc3Nfc2NhbGFy",
            "GAggASgCEhkKEXRyYWluZXJfbGV2ZWxfbWluGAkgASgFEhkKEXRyYWluZXJf",
            "bGV2ZWxfbWF4GAogASgFEhAKCHZmeF9uYW1lGAsgASgJEhMKC2R1cmF0aW9u",
            "X21zGAwgASgFEh4KFmRhbWFnZV93aW5kb3dfc3RhcnRfbXMYDSABKAUSHAoU",
            "ZGFtYWdlX3dpbmRvd19lbmRfbXMYDiABKAUSFAoMZW5lcmd5X2RlbHRhGA8g",
            "ASgFImUKDUJhZGdlU2V0dGluZ3MSLwoKYmFkZ2VfdHlwZRgBIAEoDjIbLlBP",
            "R09Qcm90b3MuRW51bXMuQmFkZ2VUeXBlEhIKCmJhZGdlX3JhbmsYAiABKAUS",
            "DwoHdGFyZ2V0cxgDIAMoBSKvAQoOSWFwSXRlbURpc3BsYXkSCwoDc2t1GAEg",
            "ASgJEjcKCGNhdGVnb3J5GAIgASgOMiUuUE9HT1Byb3Rvcy5FbnVtcy5Ib2xv",
            "SWFwSXRlbUNhdGVnb3J5EhIKCnNvcnRfb3JkZXIYAyABKAUSMwoIaXRlbV9p",
            "ZHMYBCADKA4yIS5QT0dPUHJvdG9zLkludmVudG9yeS5JdGVtLkl0ZW1JZBIO",
            "CgZjb3VudHMYBSADKAUilAcKD1Bva2Vtb25TZXR0aW5ncxIvCgpwb2tlbW9u",
            "X2lkGAEgASgOMhsuUE9HT1Byb3Rvcy5FbnVtcy5Qb2tlbW9uSWQSEwoLbW9k",
            "ZWxfc2NhbGUYAyABKAISKwoEdHlwZRgEIAEoDjIdLlBPR09Qcm90b3MuRW51",
            "bXMuUG9rZW1vblR5cGUSLQoGdHlwZV8yGAUgASgOMh0uUE9HT1Byb3Rvcy5F",
            "bnVtcy5Qb2tlbW9uVHlwZRJECgZjYW1lcmEYBiABKAsyNC5QT0dPUHJvdG9z",
            "LlNldHRpbmdzLk1hc3Rlci5Qb2tlbW9uLkNhbWVyYUF0dHJpYnV0ZXMSSgoJ",
            "ZW5jb3VudGVyGAcgASgLMjcuUE9HT1Byb3Rvcy5TZXR0aW5ncy5NYXN0ZXIu",
            "UG9rZW1vbi5FbmNvdW50ZXJBdHRyaWJ1dGVzEkIKBXN0YXRzGAggASgLMjMu",
            "UE9HT1Byb3Rvcy5TZXR0aW5ncy5NYXN0ZXIuUG9rZW1vbi5TdGF0c0F0dHJp",
            "YnV0ZXMSMgoLcXVpY2tfbW92ZXMYCSADKA4yHS5QT0dPUHJvdG9zLkVudW1z",
            "LlBva2Vtb25Nb3ZlEjYKD2NpbmVtYXRpY19tb3ZlcxgKIAMoDjIdLlBPR09Q",
            "cm90b3MuRW51bXMuUG9rZW1vbk1vdmUSFgoOYW5pbWF0aW9uX3RpbWUYCyAD",
            "KAISMgoNZXZvbHV0aW9uX2lkcxgMIAMoDjIbLlBPR09Qcm90b3MuRW51bXMu",
            "UG9rZW1vbklkEhYKDmV2b2x1dGlvbl9waXBzGA0gASgFEi8KBnJhcml0eRgO",
            "IAEoDjIfLlBPR09Qcm90b3MuRW51bXMuUG9rZW1vblJhcml0eRIYChBwb2tl",
            "ZGV4X2hlaWdodF9tGA8gASgCEhkKEXBva2VkZXhfd2VpZ2h0X2tnGBAgASgC",
            "EjYKEXBhcmVudF9wb2tlbW9uX2lkGBEgASgOMhsuUE9HT1Byb3Rvcy5FbnVt",
            "cy5Qb2tlbW9uSWQSFgoOaGVpZ2h0X3N0ZF9kZXYYEiABKAISFgoOd2VpZ2h0",
            "X3N0ZF9kZXYYEyABKAISHAoUa21fZGlzdGFuY2VfdG9faGF0Y2gYFCABKAIS",
            "NAoJZmFtaWx5X2lkGBUgASgOMiEuUE9HT1Byb3Rvcy5FbnVtcy5Qb2tlbW9u",
            "RmFtaWx5SWQSFwoPY2FuZHlfdG9fZXZvbHZlGBYgASgFItcDCg5DYW1lcmFT",
            "ZXR0aW5ncxITCgtuZXh0X2NhbWVyYRgBIAEoCRI8Cg1pbnRlcnBvbGF0aW9u",
            "GAIgAygOMiUuUE9HT1Byb3Rvcy5FbnVtcy5DYW1lcmFJbnRlcnBvbGF0aW9u",
            "EjMKC3RhcmdldF90eXBlGAMgAygOMh4uUE9HT1Byb3Rvcy5FbnVtcy5DYW1l",
            "cmFUYXJnZXQSFQoNZWFzZV9pbl9zcGVlZBgEIAMoAhIWCg5lYXN0X291dF9z",
            "cGVlZBgFIAMoAhIYChBkdXJhdGlvbl9zZWNvbmRzGAYgAygCEhQKDHdhaXRf",
            "c2Vjb25kcxgHIAMoAhIaChJ0cmFuc2l0aW9uX3NlY29uZHMYCCADKAISFAoM",
            "YW5nbGVfZGVncmVlGAkgAygCEhsKE2FuZ2xlX29mZnNldF9kZWdyZWUYCiAD",
            "KAISFAoMcGl0Y2hfZGVncmVlGAsgAygCEhsKE3BpdGNoX29mZnNldF9kZWdy",
            "ZWUYDCADKAISEwoLcm9sbF9kZWdyZWUYDSADKAISFwoPZGlzdGFuY2VfbWV0",
            "ZXJzGA4gAygCEhYKDmhlaWdodF9wZXJjZW50GA8gAygCEhYKDnZlcnRfY3Ry",
            "X3JhdGlvGBAgAygCIsYDChFHeW1CYXR0bGVTZXR0aW5ncxIWCg5lbmVyZ3lf",
            "cGVyX3NlYxgBIAEoAhIZChFkb2RnZV9lbmVyZ3lfY29zdBgCIAEoAhIYChBy",
            "ZXRhcmdldF9zZWNvbmRzGAMgASgCEh0KFWVuZW15X2F0dGFja19pbnRlcnZh",
            "bBgEIAEoAhIeChZhdHRhY2tfc2VydmVyX2ludGVydmFsGAUgASgCEh4KFnJv",
            "dW5kX2R1cmF0aW9uX3NlY29uZHMYBiABKAISIwobYm9udXNfdGltZV9wZXJf",
            "YWxseV9zZWNvbmRzGAcgASgCEiQKHG1heGltdW1fYXR0YWNrZXJzX3Blcl9i",
            "YXR0bGUYCCABKAUSKQohc2FtZV90eXBlX2F0dGFja19ib251c19tdWx0aXBs",
            "aWVyGAkgASgCEhYKDm1heGltdW1fZW5lcmd5GAogASgFEiQKHGVuZXJneV9k",
            "ZWx0YV9wZXJfaGVhbHRoX2xvc3QYCyABKAISGQoRZG9kZ2VfZHVyYXRpb25f",
            "bXMYDCABKAUSHAoUbWluaW11bV9wbGF5ZXJfbGV2ZWwYDSABKAUSGAoQc3dh",
            "cF9kdXJhdGlvbl9tcxgOIAEoBSJ5ChVFcXVpcHBlZEJhZGdlU2V0dGluZ3MS",
            "HwoXZXF1aXBfYmFkZ2VfY29vbGRvd25fbXMYASABKAMSHwoXY2F0Y2hfcHJv",
            "YmFiaWxpdHlfYm9udXMYAiADKAISHgoWZmxlZV9wcm9iYWJpbGl0eV9ib251",
            "cxgDIAMoAiKMAgoLSWFwU2V0dGluZ3MSGQoRZGFpbHlfYm9udXNfY29pbnMY",
            "ASABKAUSKAogZGFpbHlfZGVmZW5kZXJfYm9udXNfcGVyX3Bva2Vtb24YAiAD",
            "KAUSKgoiZGFpbHlfZGVmZW5kZXJfYm9udXNfbWF4X2RlZmVuZGVycxgDIAEo",
            "BRIlCh1kYWlseV9kZWZlbmRlcl9ib251c19jdXJyZW5jeRgEIAMoCRIiChpt",
            "aW5fdGltZV9iZXR3ZWVuX2NsYWltc19tcxgFIAEoAxIbChNkYWlseV9ib251",
            "c19lbmFibGVkGAYgASgIEiQKHGRhaWx5X2RlZmVuZGVyX2JvbnVzX2VuYWJs",
            "ZWQYByABKAgitQcKDEl0ZW1TZXR0aW5ncxIyCgdpdGVtX2lkGAEgASgOMiEu",
            "UE9HT1Byb3Rvcy5JbnZlbnRvcnkuSXRlbS5JdGVtSWQSNgoJaXRlbV90eXBl",
            "GAIgASgOMiMuUE9HT1Byb3Rvcy5JbnZlbnRvcnkuSXRlbS5JdGVtVHlwZRIw",
            "CghjYXRlZ29yeRgDIAEoDjIeLlBPR09Qcm90b3MuRW51bXMuSXRlbUNhdGVn",
            "b3J5EhEKCWRyb3BfZnJlcRgEIAEoAhIaChJkcm9wX3RyYWluZXJfbGV2ZWwY",
            "BSABKAUSRQoIcG9rZWJhbGwYBiABKAsyMy5QT0dPUHJvdG9zLlNldHRpbmdz",
            "Lk1hc3Rlci5JdGVtLlBva2ViYWxsQXR0cmlidXRlcxJBCgZwb3Rpb24YByAB",
            "KAsyMS5QT0dPUHJvdG9zLlNldHRpbmdzLk1hc3Rlci5JdGVtLlBvdGlvbkF0",
            "dHJpYnV0ZXMSQQoGcmV2aXZlGAggASgLMjEuUE9HT1Byb3Rvcy5TZXR0aW5n",
            "cy5NYXN0ZXIuSXRlbS5SZXZpdmVBdHRyaWJ1dGVzEkEKBmJhdHRsZRgJIAEo",
            "CzIxLlBPR09Qcm90b3MuU2V0dGluZ3MuTWFzdGVyLkl0ZW0uQmF0dGxlQXR0",
            "cmlidXRlcxI9CgRmb29kGAogASgLMi8uUE9HT1Byb3Rvcy5TZXR0aW5ncy5N",
            "YXN0ZXIuSXRlbS5Gb29kQXR0cmlidXRlcxJWChFpbnZlbnRvcnlfdXBncmFk",
            "ZRgLIAEoCzI7LlBPR09Qcm90b3MuU2V0dGluZ3MuTWFzdGVyLkl0ZW0uSW52",
            "ZW50b3J5VXBncmFkZUF0dHJpYnV0ZXMSTAoIeHBfYm9vc3QYDCABKAsyOi5Q",
            "T0dPUHJvdG9zLlNldHRpbmdzLk1hc3Rlci5JdGVtLkV4cGVyaWVuY2VCb29z",
            "dEF0dHJpYnV0ZXMSQwoHaW5jZW5zZRgNIAEoCzIyLlBPR09Qcm90b3MuU2V0",
            "dGluZ3MuTWFzdGVyLkl0ZW0uSW5jZW5zZUF0dHJpYnV0ZXMSTgoNZWdnX2lu",
            "Y3ViYXRvchgOIAEoCzI3LlBPR09Qcm90b3MuU2V0dGluZ3MuTWFzdGVyLkl0",
            "ZW0uRWdnSW5jdWJhdG9yQXR0cmlidXRlcxJOCg1mb3J0X21vZGlmaWVyGA8g",
            "ASgLMjcuUE9HT1Byb3Rvcy5TZXR0aW5ncy5NYXN0ZXIuSXRlbS5Gb3J0TW9k",
            "aWZpZXJBdHRyaWJ1dGVzIp0BChNQbGF5ZXJMZXZlbFNldHRpbmdzEhAKCHJh",
            "bmtfbnVtGAEgAygFEhsKE3JlcXVpcmVkX2V4cGVyaWVuY2UYAiADKAUSFQoN",
            "Y3BfbXVsdGlwbGllchgDIAMoAhIcChRtYXhfZWdnX3BsYXllcl9sZXZlbBgE",
            "IAEoBRIiChptYXhfZW5jb3VudGVyX3BsYXllcl9sZXZlbBgFIAEoBSJ3ChBH",
            "eW1MZXZlbFNldHRpbmdzEhsKE3JlcXVpcmVkX2V4cGVyaWVuY2UYASADKAUS",
            "FAoMbGVhZGVyX3Nsb3RzGAIgAygFEhUKDXRyYWluZXJfc2xvdHMYAyADKAUS",
            "GQoRc2VhcmNoX3JvbGxfYm9udXMYBCADKAUiYgoVVHlwZUVmZmVjdGl2ZVNl",
            "dHRpbmdzEhUKDWF0dGFja19zY2FsYXIYASADKAISMgoLYXR0YWNrX3R5cGUY",
            "AiABKA4yHS5QT0dPUHJvdG9zLkVudW1zLlBva2Vtb25UeXBlIq4BChFFbmNv",
            "dW50ZXJTZXR0aW5ncxIcChRzcGluX2JvbnVzX3RocmVzaG9sZBgBIAEoAhIh",
            "ChlleGNlbGxlbnRfdGhyb3dfdGhyZXNob2xkGAIgASgCEh0KFWdyZWF0X3Ro",
            "cm93X3RocmVzaG9sZBgDIAEoAhIcChRuaWNlX3Rocm93X3RocmVzaG9sZBgE",
            "IAEoAhIbChNtaWxlc3RvbmVfdGhyZXNob2xkGAUgASgFUABQAVACUANiBnBy",
            "b3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.POGOProtosEnumsReflection.Descriptor, global::POGOProtos.Inventory.Item.POGOProtosInventoryItemReflection.Descriptor, global::POGOProtos.Settings.Master.Pokemon.POGOProtosSettingsMasterPokemonReflection.Descriptor, global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.PokemonUpgradeSettings), global::POGOProtos.Settings.Master.PokemonUpgradeSettings.Parser, new[]{ "UpgradesPerLevel", "AllowedLevelsAbovePlayer", "CandyCost", "StardustCost" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.MoveSequenceSettings), global::POGOProtos.Settings.Master.MoveSequenceSettings.Parser, new[]{ "Sequence" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.MoveSettings), global::POGOProtos.Settings.Master.MoveSettings.Parser, new[]{ "MovementId", "AnimationId", "PokemonType", "Power", "AccuracyChance", "CriticalChance", "HealScalar", "StaminaLossScalar", "TrainerLevelMin", "TrainerLevelMax", "VfxName", "DurationMs", "DamageWindowStartMs", "DamageWindowEndMs", "EnergyDelta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.BadgeSettings), global::POGOProtos.Settings.Master.BadgeSettings.Parser, new[]{ "BadgeType", "BadgeRank", "Targets" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.IapItemDisplay), global::POGOProtos.Settings.Master.IapItemDisplay.Parser, new[]{ "Sku", "Category", "SortOrder", "ItemIds", "Counts" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.PokemonSettings), global::POGOProtos.Settings.Master.PokemonSettings.Parser, new[]{ "PokemonId", "ModelScale", "Type", "Type2", "Camera", "Encounter", "Stats", "QuickMoves", "CinematicMoves", "AnimationTime", "EvolutionIds", "EvolutionPips", "Rarity", "PokedexHeightM", "PokedexWeightKg", "ParentPokemonId", "HeightStdDev", "WeightStdDev", "KmDistanceToHatch", "FamilyId", "CandyToEvolve" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.CameraSettings), global::POGOProtos.Settings.Master.CameraSettings.Parser, new[]{ "NextCamera", "Interpolation", "TargetType", "EaseInSpeed", "EastOutSpeed", "DurationSeconds", "WaitSeconds", "TransitionSeconds", "AngleDegree", "AngleOffsetDegree", "PitchDegree", "PitchOffsetDegree", "RollDegree", "DistanceMeters", "HeightPercent", "VertCtrRatio" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.GymBattleSettings), global::POGOProtos.Settings.Master.GymBattleSettings.Parser, new[]{ "EnergyPerSec", "DodgeEnergyCost", "RetargetSeconds", "EnemyAttackInterval", "AttackServerInterval", "RoundDurationSeconds", "BonusTimePerAllySeconds", "MaximumAttackersPerBattle", "SameTypeAttackBonusMultiplier", "MaximumEnergy", "EnergyDeltaPerHealthLost", "DodgeDurationMs", "MinimumPlayerLevel", "SwapDurationMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.EquippedBadgeSettings), global::POGOProtos.Settings.Master.EquippedBadgeSettings.Parser, new[]{ "EquipBadgeCooldownMs", "CatchProbabilityBonus", "FleeProbabilityBonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.IapSettings), global::POGOProtos.Settings.Master.IapSettings.Parser, new[]{ "DailyBonusCoins", "DailyDefenderBonusPerPokemon", "DailyDefenderBonusMaxDefenders", "DailyDefenderBonusCurrency", "MinTimeBetweenClaimsMs", "DailyBonusEnabled", "DailyDefenderBonusEnabled" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.ItemSettings), global::POGOProtos.Settings.Master.ItemSettings.Parser, new[]{ "ItemId", "ItemType", "Category", "DropFreq", "DropTrainerLevel", "Pokeball", "Potion", "Revive", "Battle", "Food", "InventoryUpgrade", "XpBoost", "Incense", "EggIncubator", "FortModifier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.PlayerLevelSettings), global::POGOProtos.Settings.Master.PlayerLevelSettings.Parser, new[]{ "RankNum", "RequiredExperience", "CpMultiplier", "MaxEggPlayerLevel", "MaxEncounterPlayerLevel" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.GymLevelSettings), global::POGOProtos.Settings.Master.GymLevelSettings.Parser, new[]{ "RequiredExperience", "LeaderSlots", "TrainerSlots", "SearchRollBonus" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.TypeEffectiveSettings), global::POGOProtos.Settings.Master.TypeEffectiveSettings.Parser, new[]{ "AttackScalar", "AttackType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.EncounterSettings), global::POGOProtos.Settings.Master.EncounterSettings.Parser, new[]{ "SpinBonusThreshold", "ExcellentThrowThreshold", "GreatThrowThreshold", "NiceThrowThreshold", "MilestoneThreshold" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PokemonUpgradeSettings : pb::IMessage<PokemonUpgradeSettings> {
    private static readonly pb::MessageParser<PokemonUpgradeSettings> _parser = new pb::MessageParser<PokemonUpgradeSettings>(() => new PokemonUpgradeSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonUpgradeSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonUpgradeSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonUpgradeSettings(PokemonUpgradeSettings other) : this() {
      upgradesPerLevel_ = other.upgradesPerLevel_;
      allowedLevelsAbovePlayer_ = other.allowedLevelsAbovePlayer_;
      candyCost_ = other.candyCost_.Clone();
      stardustCost_ = other.stardustCost_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonUpgradeSettings Clone() {
      return new PokemonUpgradeSettings(this);
    }

    /// <summary>Field number for the "upgrades_per_level" field.</summary>
    public const int UpgradesPerLevelFieldNumber = 1;
    private int upgradesPerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int UpgradesPerLevel {
      get { return upgradesPerLevel_; }
      set {
        upgradesPerLevel_ = value;
      }
    }

    /// <summary>Field number for the "allowed_levels_above_player" field.</summary>
    public const int AllowedLevelsAbovePlayerFieldNumber = 2;
    private int allowedLevelsAbovePlayer_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AllowedLevelsAbovePlayer {
      get { return allowedLevelsAbovePlayer_; }
      set {
        allowedLevelsAbovePlayer_ = value;
      }
    }

    /// <summary>Field number for the "candy_cost" field.</summary>
    public const int CandyCostFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_candyCost_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> candyCost_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> CandyCost {
      get { return candyCost_; }
    }

    /// <summary>Field number for the "stardust_cost" field.</summary>
    public const int StardustCostFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_stardustCost_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> stardustCost_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> StardustCost {
      get { return stardustCost_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonUpgradeSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonUpgradeSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (UpgradesPerLevel != other.UpgradesPerLevel) return false;
      if (AllowedLevelsAbovePlayer != other.AllowedLevelsAbovePlayer) return false;
      if(!candyCost_.Equals(other.candyCost_)) return false;
      if(!stardustCost_.Equals(other.stardustCost_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (UpgradesPerLevel != 0) hash ^= UpgradesPerLevel.GetHashCode();
      if (AllowedLevelsAbovePlayer != 0) hash ^= AllowedLevelsAbovePlayer.GetHashCode();
      hash ^= candyCost_.GetHashCode();
      hash ^= stardustCost_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (UpgradesPerLevel != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UpgradesPerLevel);
      }
      if (AllowedLevelsAbovePlayer != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AllowedLevelsAbovePlayer);
      }
      candyCost_.WriteTo(output, _repeated_candyCost_codec);
      stardustCost_.WriteTo(output, _repeated_stardustCost_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (UpgradesPerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UpgradesPerLevel);
      }
      if (AllowedLevelsAbovePlayer != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AllowedLevelsAbovePlayer);
      }
      size += candyCost_.CalculateSize(_repeated_candyCost_codec);
      size += stardustCost_.CalculateSize(_repeated_stardustCost_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonUpgradeSettings other) {
      if (other == null) {
        return;
      }
      if (other.UpgradesPerLevel != 0) {
        UpgradesPerLevel = other.UpgradesPerLevel;
      }
      if (other.AllowedLevelsAbovePlayer != 0) {
        AllowedLevelsAbovePlayer = other.AllowedLevelsAbovePlayer;
      }
      candyCost_.Add(other.candyCost_);
      stardustCost_.Add(other.stardustCost_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UpgradesPerLevel = input.ReadInt32();
            break;
          }
          case 16: {
            AllowedLevelsAbovePlayer = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            candyCost_.AddEntriesFrom(input, _repeated_candyCost_codec);
            break;
          }
          case 34:
          case 32: {
            stardustCost_.AddEntriesFrom(input, _repeated_stardustCost_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveSequenceSettings : pb::IMessage<MoveSequenceSettings> {
    private static readonly pb::MessageParser<MoveSequenceSettings> _parser = new pb::MessageParser<MoveSequenceSettings>(() => new MoveSequenceSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveSequenceSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSequenceSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSequenceSettings(MoveSequenceSettings other) : this() {
      sequence_ = other.sequence_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSequenceSettings Clone() {
      return new MoveSequenceSettings(this);
    }

    /// <summary>Field number for the "sequence" field.</summary>
    public const int SequenceFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_sequence_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> sequence_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Sequence {
      get { return sequence_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveSequenceSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveSequenceSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!sequence_.Equals(other.sequence_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= sequence_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      sequence_.WriteTo(output, _repeated_sequence_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += sequence_.CalculateSize(_repeated_sequence_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveSequenceSettings other) {
      if (other == null) {
        return;
      }
      sequence_.Add(other.sequence_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            sequence_.AddEntriesFrom(input, _repeated_sequence_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class MoveSettings : pb::IMessage<MoveSettings> {
    private static readonly pb::MessageParser<MoveSettings> _parser = new pb::MessageParser<MoveSettings>(() => new MoveSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<MoveSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSettings(MoveSettings other) : this() {
      movementId_ = other.movementId_;
      animationId_ = other.animationId_;
      pokemonType_ = other.pokemonType_;
      power_ = other.power_;
      accuracyChance_ = other.accuracyChance_;
      criticalChance_ = other.criticalChance_;
      healScalar_ = other.healScalar_;
      staminaLossScalar_ = other.staminaLossScalar_;
      trainerLevelMin_ = other.trainerLevelMin_;
      trainerLevelMax_ = other.trainerLevelMax_;
      vfxName_ = other.vfxName_;
      durationMs_ = other.durationMs_;
      damageWindowStartMs_ = other.damageWindowStartMs_;
      damageWindowEndMs_ = other.damageWindowEndMs_;
      energyDelta_ = other.energyDelta_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MoveSettings Clone() {
      return new MoveSettings(this);
    }

    /// <summary>Field number for the "movement_id" field.</summary>
    public const int MovementIdFieldNumber = 1;
    private global::POGOProtos.Enums.PokemonMove movementId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonMove MovementId {
      get { return movementId_; }
      set {
        movementId_ = value;
      }
    }

    /// <summary>Field number for the "animation_id" field.</summary>
    public const int AnimationIdFieldNumber = 2;
    private int animationId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AnimationId {
      get { return animationId_; }
      set {
        animationId_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_type" field.</summary>
    public const int PokemonTypeFieldNumber = 3;
    private global::POGOProtos.Enums.PokemonType pokemonType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonType PokemonType {
      get { return pokemonType_; }
      set {
        pokemonType_ = value;
      }
    }

    /// <summary>Field number for the "power" field.</summary>
    public const int PowerFieldNumber = 4;
    private float power_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    /// <summary>Field number for the "accuracy_chance" field.</summary>
    public const int AccuracyChanceFieldNumber = 5;
    private float accuracyChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AccuracyChance {
      get { return accuracyChance_; }
      set {
        accuracyChance_ = value;
      }
    }

    /// <summary>Field number for the "critical_chance" field.</summary>
    public const int CriticalChanceFieldNumber = 6;
    private float criticalChance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CriticalChance {
      get { return criticalChance_; }
      set {
        criticalChance_ = value;
      }
    }

    /// <summary>Field number for the "heal_scalar" field.</summary>
    public const int HealScalarFieldNumber = 7;
    private float healScalar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HealScalar {
      get { return healScalar_; }
      set {
        healScalar_ = value;
      }
    }

    /// <summary>Field number for the "stamina_loss_scalar" field.</summary>
    public const int StaminaLossScalarFieldNumber = 8;
    private float staminaLossScalar_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaminaLossScalar {
      get { return staminaLossScalar_; }
      set {
        staminaLossScalar_ = value;
      }
    }

    /// <summary>Field number for the "trainer_level_min" field.</summary>
    public const int TrainerLevelMinFieldNumber = 9;
    private int trainerLevelMin_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainerLevelMin {
      get { return trainerLevelMin_; }
      set {
        trainerLevelMin_ = value;
      }
    }

    /// <summary>Field number for the "trainer_level_max" field.</summary>
    public const int TrainerLevelMaxFieldNumber = 10;
    private int trainerLevelMax_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TrainerLevelMax {
      get { return trainerLevelMax_; }
      set {
        trainerLevelMax_ = value;
      }
    }

    /// <summary>Field number for the "vfx_name" field.</summary>
    public const int VfxNameFieldNumber = 11;
    private string vfxName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string VfxName {
      get { return vfxName_; }
      set {
        vfxName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration_ms" field.</summary>
    public const int DurationMsFieldNumber = 12;
    private int durationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DurationMs {
      get { return durationMs_; }
      set {
        durationMs_ = value;
      }
    }

    /// <summary>Field number for the "damage_window_start_ms" field.</summary>
    public const int DamageWindowStartMsFieldNumber = 13;
    private int damageWindowStartMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageWindowStartMs {
      get { return damageWindowStartMs_; }
      set {
        damageWindowStartMs_ = value;
      }
    }

    /// <summary>Field number for the "damage_window_end_ms" field.</summary>
    public const int DamageWindowEndMsFieldNumber = 14;
    private int damageWindowEndMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DamageWindowEndMs {
      get { return damageWindowEndMs_; }
      set {
        damageWindowEndMs_ = value;
      }
    }

    /// <summary>Field number for the "energy_delta" field.</summary>
    public const int EnergyDeltaFieldNumber = 15;
    private int energyDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EnergyDelta {
      get { return energyDelta_; }
      set {
        energyDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as MoveSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(MoveSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MovementId != other.MovementId) return false;
      if (AnimationId != other.AnimationId) return false;
      if (PokemonType != other.PokemonType) return false;
      if (Power != other.Power) return false;
      if (AccuracyChance != other.AccuracyChance) return false;
      if (CriticalChance != other.CriticalChance) return false;
      if (HealScalar != other.HealScalar) return false;
      if (StaminaLossScalar != other.StaminaLossScalar) return false;
      if (TrainerLevelMin != other.TrainerLevelMin) return false;
      if (TrainerLevelMax != other.TrainerLevelMax) return false;
      if (VfxName != other.VfxName) return false;
      if (DurationMs != other.DurationMs) return false;
      if (DamageWindowStartMs != other.DamageWindowStartMs) return false;
      if (DamageWindowEndMs != other.DamageWindowEndMs) return false;
      if (EnergyDelta != other.EnergyDelta) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (MovementId != 0) hash ^= MovementId.GetHashCode();
      if (AnimationId != 0) hash ^= AnimationId.GetHashCode();
      if (PokemonType != 0) hash ^= PokemonType.GetHashCode();
      if (Power != 0F) hash ^= Power.GetHashCode();
      if (AccuracyChance != 0F) hash ^= AccuracyChance.GetHashCode();
      if (CriticalChance != 0F) hash ^= CriticalChance.GetHashCode();
      if (HealScalar != 0F) hash ^= HealScalar.GetHashCode();
      if (StaminaLossScalar != 0F) hash ^= StaminaLossScalar.GetHashCode();
      if (TrainerLevelMin != 0) hash ^= TrainerLevelMin.GetHashCode();
      if (TrainerLevelMax != 0) hash ^= TrainerLevelMax.GetHashCode();
      if (VfxName.Length != 0) hash ^= VfxName.GetHashCode();
      if (DurationMs != 0) hash ^= DurationMs.GetHashCode();
      if (DamageWindowStartMs != 0) hash ^= DamageWindowStartMs.GetHashCode();
      if (DamageWindowEndMs != 0) hash ^= DamageWindowEndMs.GetHashCode();
      if (EnergyDelta != 0) hash ^= EnergyDelta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (MovementId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) MovementId);
      }
      if (AnimationId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(AnimationId);
      }
      if (PokemonType != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) PokemonType);
      }
      if (Power != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Power);
      }
      if (AccuracyChance != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AccuracyChance);
      }
      if (CriticalChance != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(CriticalChance);
      }
      if (HealScalar != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(HealScalar);
      }
      if (StaminaLossScalar != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(StaminaLossScalar);
      }
      if (TrainerLevelMin != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TrainerLevelMin);
      }
      if (TrainerLevelMax != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TrainerLevelMax);
      }
      if (VfxName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(VfxName);
      }
      if (DurationMs != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DurationMs);
      }
      if (DamageWindowStartMs != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(DamageWindowStartMs);
      }
      if (DamageWindowEndMs != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(DamageWindowEndMs);
      }
      if (EnergyDelta != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EnergyDelta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (MovementId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MovementId);
      }
      if (AnimationId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AnimationId);
      }
      if (PokemonType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonType);
      }
      if (Power != 0F) {
        size += 1 + 4;
      }
      if (AccuracyChance != 0F) {
        size += 1 + 4;
      }
      if (CriticalChance != 0F) {
        size += 1 + 4;
      }
      if (HealScalar != 0F) {
        size += 1 + 4;
      }
      if (StaminaLossScalar != 0F) {
        size += 1 + 4;
      }
      if (TrainerLevelMin != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainerLevelMin);
      }
      if (TrainerLevelMax != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TrainerLevelMax);
      }
      if (VfxName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(VfxName);
      }
      if (DurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationMs);
      }
      if (DamageWindowStartMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageWindowStartMs);
      }
      if (DamageWindowEndMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageWindowEndMs);
      }
      if (EnergyDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnergyDelta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(MoveSettings other) {
      if (other == null) {
        return;
      }
      if (other.MovementId != 0) {
        MovementId = other.MovementId;
      }
      if (other.AnimationId != 0) {
        AnimationId = other.AnimationId;
      }
      if (other.PokemonType != 0) {
        PokemonType = other.PokemonType;
      }
      if (other.Power != 0F) {
        Power = other.Power;
      }
      if (other.AccuracyChance != 0F) {
        AccuracyChance = other.AccuracyChance;
      }
      if (other.CriticalChance != 0F) {
        CriticalChance = other.CriticalChance;
      }
      if (other.HealScalar != 0F) {
        HealScalar = other.HealScalar;
      }
      if (other.StaminaLossScalar != 0F) {
        StaminaLossScalar = other.StaminaLossScalar;
      }
      if (other.TrainerLevelMin != 0) {
        TrainerLevelMin = other.TrainerLevelMin;
      }
      if (other.TrainerLevelMax != 0) {
        TrainerLevelMax = other.TrainerLevelMax;
      }
      if (other.VfxName.Length != 0) {
        VfxName = other.VfxName;
      }
      if (other.DurationMs != 0) {
        DurationMs = other.DurationMs;
      }
      if (other.DamageWindowStartMs != 0) {
        DamageWindowStartMs = other.DamageWindowStartMs;
      }
      if (other.DamageWindowEndMs != 0) {
        DamageWindowEndMs = other.DamageWindowEndMs;
      }
      if (other.EnergyDelta != 0) {
        EnergyDelta = other.EnergyDelta;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            movementId_ = (global::POGOProtos.Enums.PokemonMove) input.ReadEnum();
            break;
          }
          case 16: {
            AnimationId = input.ReadInt32();
            break;
          }
          case 24: {
            pokemonType_ = (global::POGOProtos.Enums.PokemonType) input.ReadEnum();
            break;
          }
          case 37: {
            Power = input.ReadFloat();
            break;
          }
          case 45: {
            AccuracyChance = input.ReadFloat();
            break;
          }
          case 53: {
            CriticalChance = input.ReadFloat();
            break;
          }
          case 61: {
            HealScalar = input.ReadFloat();
            break;
          }
          case 69: {
            StaminaLossScalar = input.ReadFloat();
            break;
          }
          case 72: {
            TrainerLevelMin = input.ReadInt32();
            break;
          }
          case 80: {
            TrainerLevelMax = input.ReadInt32();
            break;
          }
          case 90: {
            VfxName = input.ReadString();
            break;
          }
          case 96: {
            DurationMs = input.ReadInt32();
            break;
          }
          case 104: {
            DamageWindowStartMs = input.ReadInt32();
            break;
          }
          case 112: {
            DamageWindowEndMs = input.ReadInt32();
            break;
          }
          case 120: {
            EnergyDelta = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BadgeSettings : pb::IMessage<BadgeSettings> {
    private static readonly pb::MessageParser<BadgeSettings> _parser = new pb::MessageParser<BadgeSettings>(() => new BadgeSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BadgeSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadgeSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadgeSettings(BadgeSettings other) : this() {
      badgeType_ = other.badgeType_;
      badgeRank_ = other.badgeRank_;
      targets_ = other.targets_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BadgeSettings Clone() {
      return new BadgeSettings(this);
    }

    /// <summary>Field number for the "badge_type" field.</summary>
    public const int BadgeTypeFieldNumber = 1;
    private global::POGOProtos.Enums.BadgeType badgeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.BadgeType BadgeType {
      get { return badgeType_; }
      set {
        badgeType_ = value;
      }
    }

    /// <summary>Field number for the "badge_rank" field.</summary>
    public const int BadgeRankFieldNumber = 2;
    private int badgeRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BadgeRank {
      get { return badgeRank_; }
      set {
        badgeRank_ = value;
      }
    }

    /// <summary>Field number for the "targets" field.</summary>
    public const int TargetsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_targets_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> targets_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Targets {
      get { return targets_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BadgeSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BadgeSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BadgeType != other.BadgeType) return false;
      if (BadgeRank != other.BadgeRank) return false;
      if(!targets_.Equals(other.targets_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BadgeType != 0) hash ^= BadgeType.GetHashCode();
      if (BadgeRank != 0) hash ^= BadgeRank.GetHashCode();
      hash ^= targets_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BadgeType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BadgeType);
      }
      if (BadgeRank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BadgeRank);
      }
      targets_.WriteTo(output, _repeated_targets_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BadgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BadgeType);
      }
      if (BadgeRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BadgeRank);
      }
      size += targets_.CalculateSize(_repeated_targets_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BadgeSettings other) {
      if (other == null) {
        return;
      }
      if (other.BadgeType != 0) {
        BadgeType = other.BadgeType;
      }
      if (other.BadgeRank != 0) {
        BadgeRank = other.BadgeRank;
      }
      targets_.Add(other.targets_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            badgeType_ = (global::POGOProtos.Enums.BadgeType) input.ReadEnum();
            break;
          }
          case 16: {
            BadgeRank = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            targets_.AddEntriesFrom(input, _repeated_targets_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IapItemDisplay : pb::IMessage<IapItemDisplay> {
    private static readonly pb::MessageParser<IapItemDisplay> _parser = new pb::MessageParser<IapItemDisplay>(() => new IapItemDisplay());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IapItemDisplay> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IapItemDisplay() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IapItemDisplay(IapItemDisplay other) : this() {
      sku_ = other.sku_;
      category_ = other.category_;
      sortOrder_ = other.sortOrder_;
      itemIds_ = other.itemIds_.Clone();
      counts_ = other.counts_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IapItemDisplay Clone() {
      return new IapItemDisplay(this);
    }

    /// <summary>Field number for the "sku" field.</summary>
    public const int SkuFieldNumber = 1;
    private string sku_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Sku {
      get { return sku_; }
      set {
        sku_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 2;
    private global::POGOProtos.Enums.HoloIapItemCategory category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.HoloIapItemCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "sort_order" field.</summary>
    public const int SortOrderFieldNumber = 3;
    private int sortOrder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SortOrder {
      get { return sortOrder_; }
      set {
        sortOrder_ = value;
      }
    }

    /// <summary>Field number for the "item_ids" field.</summary>
    public const int ItemIdsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::POGOProtos.Inventory.Item.ItemId> _repeated_itemIds_codec
        = pb::FieldCodec.ForEnum(34, x => (int) x, x => (global::POGOProtos.Inventory.Item.ItemId) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Inventory.Item.ItemId> itemIds_ = new pbc::RepeatedField<global::POGOProtos.Inventory.Item.ItemId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Inventory.Item.ItemId> ItemIds {
      get { return itemIds_; }
    }

    /// <summary>Field number for the "counts" field.</summary>
    public const int CountsFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_counts_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> counts_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> Counts {
      get { return counts_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IapItemDisplay);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IapItemDisplay other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Sku != other.Sku) return false;
      if (Category != other.Category) return false;
      if (SortOrder != other.SortOrder) return false;
      if(!itemIds_.Equals(other.itemIds_)) return false;
      if(!counts_.Equals(other.counts_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Sku.Length != 0) hash ^= Sku.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (SortOrder != 0) hash ^= SortOrder.GetHashCode();
      hash ^= itemIds_.GetHashCode();
      hash ^= counts_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Sku.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Sku);
      }
      if (Category != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Category);
      }
      if (SortOrder != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SortOrder);
      }
      itemIds_.WriteTo(output, _repeated_itemIds_codec);
      counts_.WriteTo(output, _repeated_counts_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Sku.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Sku);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (SortOrder != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SortOrder);
      }
      size += itemIds_.CalculateSize(_repeated_itemIds_codec);
      size += counts_.CalculateSize(_repeated_counts_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IapItemDisplay other) {
      if (other == null) {
        return;
      }
      if (other.Sku.Length != 0) {
        Sku = other.Sku;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.SortOrder != 0) {
        SortOrder = other.SortOrder;
      }
      itemIds_.Add(other.itemIds_);
      counts_.Add(other.counts_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Sku = input.ReadString();
            break;
          }
          case 16: {
            category_ = (global::POGOProtos.Enums.HoloIapItemCategory) input.ReadEnum();
            break;
          }
          case 24: {
            SortOrder = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            itemIds_.AddEntriesFrom(input, _repeated_itemIds_codec);
            break;
          }
          case 42:
          case 40: {
            counts_.AddEntriesFrom(input, _repeated_counts_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokemonSettings : pb::IMessage<PokemonSettings> {
    private static readonly pb::MessageParser<PokemonSettings> _parser = new pb::MessageParser<PokemonSettings>(() => new PokemonSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokemonSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonSettings(PokemonSettings other) : this() {
      pokemonId_ = other.pokemonId_;
      modelScale_ = other.modelScale_;
      type_ = other.type_;
      type2_ = other.type2_;
      Camera = other.camera_ != null ? other.Camera.Clone() : null;
      Encounter = other.encounter_ != null ? other.Encounter.Clone() : null;
      Stats = other.stats_ != null ? other.Stats.Clone() : null;
      quickMoves_ = other.quickMoves_.Clone();
      cinematicMoves_ = other.cinematicMoves_.Clone();
      animationTime_ = other.animationTime_.Clone();
      evolutionIds_ = other.evolutionIds_.Clone();
      evolutionPips_ = other.evolutionPips_;
      rarity_ = other.rarity_;
      pokedexHeightM_ = other.pokedexHeightM_;
      pokedexWeightKg_ = other.pokedexWeightKg_;
      parentPokemonId_ = other.parentPokemonId_;
      heightStdDev_ = other.heightStdDev_;
      weightStdDev_ = other.weightStdDev_;
      kmDistanceToHatch_ = other.kmDistanceToHatch_;
      familyId_ = other.familyId_;
      candyToEvolve_ = other.candyToEvolve_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokemonSettings Clone() {
      return new PokemonSettings(this);
    }

    /// <summary>Field number for the "pokemon_id" field.</summary>
    public const int PokemonIdFieldNumber = 1;
    private global::POGOProtos.Enums.PokemonId pokemonId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonId PokemonId {
      get { return pokemonId_; }
      set {
        pokemonId_ = value;
      }
    }

    /// <summary>Field number for the "model_scale" field.</summary>
    public const int ModelScaleFieldNumber = 3;
    private float modelScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ModelScale {
      get { return modelScale_; }
      set {
        modelScale_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 4;
    private global::POGOProtos.Enums.PokemonType type_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "type_2" field.</summary>
    public const int Type2FieldNumber = 5;
    private global::POGOProtos.Enums.PokemonType type2_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonType Type2 {
      get { return type2_; }
      set {
        type2_ = value;
      }
    }

    /// <summary>Field number for the "camera" field.</summary>
    public const int CameraFieldNumber = 6;
    private global::POGOProtos.Settings.Master.Pokemon.CameraAttributes camera_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Pokemon.CameraAttributes Camera {
      get { return camera_; }
      set {
        camera_ = value;
      }
    }

    /// <summary>Field number for the "encounter" field.</summary>
    public const int EncounterFieldNumber = 7;
    private global::POGOProtos.Settings.Master.Pokemon.EncounterAttributes encounter_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Pokemon.EncounterAttributes Encounter {
      get { return encounter_; }
      set {
        encounter_ = value;
      }
    }

    /// <summary>Field number for the "stats" field.</summary>
    public const int StatsFieldNumber = 8;
    private global::POGOProtos.Settings.Master.Pokemon.StatsAttributes stats_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Pokemon.StatsAttributes Stats {
      get { return stats_; }
      set {
        stats_ = value;
      }
    }

    /// <summary>Field number for the "quick_moves" field.</summary>
    public const int QuickMovesFieldNumber = 9;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.PokemonMove> _repeated_quickMoves_codec
        = pb::FieldCodec.ForEnum(74, x => (int) x, x => (global::POGOProtos.Enums.PokemonMove) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.PokemonMove> quickMoves_ = new pbc::RepeatedField<global::POGOProtos.Enums.PokemonMove>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.PokemonMove> QuickMoves {
      get { return quickMoves_; }
    }

    /// <summary>Field number for the "cinematic_moves" field.</summary>
    public const int CinematicMovesFieldNumber = 10;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.PokemonMove> _repeated_cinematicMoves_codec
        = pb::FieldCodec.ForEnum(82, x => (int) x, x => (global::POGOProtos.Enums.PokemonMove) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.PokemonMove> cinematicMoves_ = new pbc::RepeatedField<global::POGOProtos.Enums.PokemonMove>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.PokemonMove> CinematicMoves {
      get { return cinematicMoves_; }
    }

    /// <summary>Field number for the "animation_time" field.</summary>
    public const int AnimationTimeFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_animationTime_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> animationTime_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AnimationTime {
      get { return animationTime_; }
    }

    /// <summary>Field number for the "evolution_ids" field.</summary>
    public const int EvolutionIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.PokemonId> _repeated_evolutionIds_codec
        = pb::FieldCodec.ForEnum(98, x => (int) x, x => (global::POGOProtos.Enums.PokemonId) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.PokemonId> evolutionIds_ = new pbc::RepeatedField<global::POGOProtos.Enums.PokemonId>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.PokemonId> EvolutionIds {
      get { return evolutionIds_; }
    }

    /// <summary>Field number for the "evolution_pips" field.</summary>
    public const int EvolutionPipsFieldNumber = 13;
    private int evolutionPips_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EvolutionPips {
      get { return evolutionPips_; }
      set {
        evolutionPips_ = value;
      }
    }

    /// <summary>Field number for the "rarity" field.</summary>
    public const int RarityFieldNumber = 14;
    private global::POGOProtos.Enums.PokemonRarity rarity_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonRarity Rarity {
      get { return rarity_; }
      set {
        rarity_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_height_m" field.</summary>
    public const int PokedexHeightMFieldNumber = 15;
    private float pokedexHeightM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PokedexHeightM {
      get { return pokedexHeightM_; }
      set {
        pokedexHeightM_ = value;
      }
    }

    /// <summary>Field number for the "pokedex_weight_kg" field.</summary>
    public const int PokedexWeightKgFieldNumber = 16;
    private float pokedexWeightKg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PokedexWeightKg {
      get { return pokedexWeightKg_; }
      set {
        pokedexWeightKg_ = value;
      }
    }

    /// <summary>Field number for the "parent_pokemon_id" field.</summary>
    public const int ParentPokemonIdFieldNumber = 17;
    private global::POGOProtos.Enums.PokemonId parentPokemonId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonId ParentPokemonId {
      get { return parentPokemonId_; }
      set {
        parentPokemonId_ = value;
      }
    }

    /// <summary>Field number for the "height_std_dev" field.</summary>
    public const int HeightStdDevFieldNumber = 18;
    private float heightStdDev_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float HeightStdDev {
      get { return heightStdDev_; }
      set {
        heightStdDev_ = value;
      }
    }

    /// <summary>Field number for the "weight_std_dev" field.</summary>
    public const int WeightStdDevFieldNumber = 19;
    private float weightStdDev_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float WeightStdDev {
      get { return weightStdDev_; }
      set {
        weightStdDev_ = value;
      }
    }

    /// <summary>Field number for the "km_distance_to_hatch" field.</summary>
    public const int KmDistanceToHatchFieldNumber = 20;
    private float kmDistanceToHatch_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float KmDistanceToHatch {
      get { return kmDistanceToHatch_; }
      set {
        kmDistanceToHatch_ = value;
      }
    }

    /// <summary>Field number for the "family_id" field.</summary>
    public const int FamilyIdFieldNumber = 21;
    private global::POGOProtos.Enums.PokemonFamilyId familyId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonFamilyId FamilyId {
      get { return familyId_; }
      set {
        familyId_ = value;
      }
    }

    /// <summary>Field number for the "candy_to_evolve" field.</summary>
    public const int CandyToEvolveFieldNumber = 22;
    private int candyToEvolve_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CandyToEvolve {
      get { return candyToEvolve_; }
      set {
        candyToEvolve_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokemonSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokemonSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PokemonId != other.PokemonId) return false;
      if (ModelScale != other.ModelScale) return false;
      if (Type != other.Type) return false;
      if (Type2 != other.Type2) return false;
      if (!object.Equals(Camera, other.Camera)) return false;
      if (!object.Equals(Encounter, other.Encounter)) return false;
      if (!object.Equals(Stats, other.Stats)) return false;
      if(!quickMoves_.Equals(other.quickMoves_)) return false;
      if(!cinematicMoves_.Equals(other.cinematicMoves_)) return false;
      if(!animationTime_.Equals(other.animationTime_)) return false;
      if(!evolutionIds_.Equals(other.evolutionIds_)) return false;
      if (EvolutionPips != other.EvolutionPips) return false;
      if (Rarity != other.Rarity) return false;
      if (PokedexHeightM != other.PokedexHeightM) return false;
      if (PokedexWeightKg != other.PokedexWeightKg) return false;
      if (ParentPokemonId != other.ParentPokemonId) return false;
      if (HeightStdDev != other.HeightStdDev) return false;
      if (WeightStdDev != other.WeightStdDev) return false;
      if (KmDistanceToHatch != other.KmDistanceToHatch) return false;
      if (FamilyId != other.FamilyId) return false;
      if (CandyToEvolve != other.CandyToEvolve) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PokemonId != 0) hash ^= PokemonId.GetHashCode();
      if (ModelScale != 0F) hash ^= ModelScale.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (Type2 != 0) hash ^= Type2.GetHashCode();
      if (camera_ != null) hash ^= Camera.GetHashCode();
      if (encounter_ != null) hash ^= Encounter.GetHashCode();
      if (stats_ != null) hash ^= Stats.GetHashCode();
      hash ^= quickMoves_.GetHashCode();
      hash ^= cinematicMoves_.GetHashCode();
      hash ^= animationTime_.GetHashCode();
      hash ^= evolutionIds_.GetHashCode();
      if (EvolutionPips != 0) hash ^= EvolutionPips.GetHashCode();
      if (Rarity != 0) hash ^= Rarity.GetHashCode();
      if (PokedexHeightM != 0F) hash ^= PokedexHeightM.GetHashCode();
      if (PokedexWeightKg != 0F) hash ^= PokedexWeightKg.GetHashCode();
      if (ParentPokemonId != 0) hash ^= ParentPokemonId.GetHashCode();
      if (HeightStdDev != 0F) hash ^= HeightStdDev.GetHashCode();
      if (WeightStdDev != 0F) hash ^= WeightStdDev.GetHashCode();
      if (KmDistanceToHatch != 0F) hash ^= KmDistanceToHatch.GetHashCode();
      if (FamilyId != 0) hash ^= FamilyId.GetHashCode();
      if (CandyToEvolve != 0) hash ^= CandyToEvolve.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PokemonId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) PokemonId);
      }
      if (ModelScale != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(ModelScale);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (Type2 != 0) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Type2);
      }
      if (camera_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Camera);
      }
      if (encounter_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Encounter);
      }
      if (stats_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Stats);
      }
      quickMoves_.WriteTo(output, _repeated_quickMoves_codec);
      cinematicMoves_.WriteTo(output, _repeated_cinematicMoves_codec);
      animationTime_.WriteTo(output, _repeated_animationTime_codec);
      evolutionIds_.WriteTo(output, _repeated_evolutionIds_codec);
      if (EvolutionPips != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(EvolutionPips);
      }
      if (Rarity != 0) {
        output.WriteRawTag(112);
        output.WriteEnum((int) Rarity);
      }
      if (PokedexHeightM != 0F) {
        output.WriteRawTag(125);
        output.WriteFloat(PokedexHeightM);
      }
      if (PokedexWeightKg != 0F) {
        output.WriteRawTag(133, 1);
        output.WriteFloat(PokedexWeightKg);
      }
      if (ParentPokemonId != 0) {
        output.WriteRawTag(136, 1);
        output.WriteEnum((int) ParentPokemonId);
      }
      if (HeightStdDev != 0F) {
        output.WriteRawTag(149, 1);
        output.WriteFloat(HeightStdDev);
      }
      if (WeightStdDev != 0F) {
        output.WriteRawTag(157, 1);
        output.WriteFloat(WeightStdDev);
      }
      if (KmDistanceToHatch != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(KmDistanceToHatch);
      }
      if (FamilyId != 0) {
        output.WriteRawTag(168, 1);
        output.WriteEnum((int) FamilyId);
      }
      if (CandyToEvolve != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(CandyToEvolve);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PokemonId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PokemonId);
      }
      if (ModelScale != 0F) {
        size += 1 + 4;
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (Type2 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type2);
      }
      if (camera_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Camera);
      }
      if (encounter_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Encounter);
      }
      if (stats_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Stats);
      }
      size += quickMoves_.CalculateSize(_repeated_quickMoves_codec);
      size += cinematicMoves_.CalculateSize(_repeated_cinematicMoves_codec);
      size += animationTime_.CalculateSize(_repeated_animationTime_codec);
      size += evolutionIds_.CalculateSize(_repeated_evolutionIds_codec);
      if (EvolutionPips != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EvolutionPips);
      }
      if (Rarity != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Rarity);
      }
      if (PokedexHeightM != 0F) {
        size += 1 + 4;
      }
      if (PokedexWeightKg != 0F) {
        size += 2 + 4;
      }
      if (ParentPokemonId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ParentPokemonId);
      }
      if (HeightStdDev != 0F) {
        size += 2 + 4;
      }
      if (WeightStdDev != 0F) {
        size += 2 + 4;
      }
      if (KmDistanceToHatch != 0F) {
        size += 2 + 4;
      }
      if (FamilyId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) FamilyId);
      }
      if (CandyToEvolve != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CandyToEvolve);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokemonSettings other) {
      if (other == null) {
        return;
      }
      if (other.PokemonId != 0) {
        PokemonId = other.PokemonId;
      }
      if (other.ModelScale != 0F) {
        ModelScale = other.ModelScale;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.Type2 != 0) {
        Type2 = other.Type2;
      }
      if (other.camera_ != null) {
        if (camera_ == null) {
          camera_ = new global::POGOProtos.Settings.Master.Pokemon.CameraAttributes();
        }
        Camera.MergeFrom(other.Camera);
      }
      if (other.encounter_ != null) {
        if (encounter_ == null) {
          encounter_ = new global::POGOProtos.Settings.Master.Pokemon.EncounterAttributes();
        }
        Encounter.MergeFrom(other.Encounter);
      }
      if (other.stats_ != null) {
        if (stats_ == null) {
          stats_ = new global::POGOProtos.Settings.Master.Pokemon.StatsAttributes();
        }
        Stats.MergeFrom(other.Stats);
      }
      quickMoves_.Add(other.quickMoves_);
      cinematicMoves_.Add(other.cinematicMoves_);
      animationTime_.Add(other.animationTime_);
      evolutionIds_.Add(other.evolutionIds_);
      if (other.EvolutionPips != 0) {
        EvolutionPips = other.EvolutionPips;
      }
      if (other.Rarity != 0) {
        Rarity = other.Rarity;
      }
      if (other.PokedexHeightM != 0F) {
        PokedexHeightM = other.PokedexHeightM;
      }
      if (other.PokedexWeightKg != 0F) {
        PokedexWeightKg = other.PokedexWeightKg;
      }
      if (other.ParentPokemonId != 0) {
        ParentPokemonId = other.ParentPokemonId;
      }
      if (other.HeightStdDev != 0F) {
        HeightStdDev = other.HeightStdDev;
      }
      if (other.WeightStdDev != 0F) {
        WeightStdDev = other.WeightStdDev;
      }
      if (other.KmDistanceToHatch != 0F) {
        KmDistanceToHatch = other.KmDistanceToHatch;
      }
      if (other.FamilyId != 0) {
        FamilyId = other.FamilyId;
      }
      if (other.CandyToEvolve != 0) {
        CandyToEvolve = other.CandyToEvolve;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            pokemonId_ = (global::POGOProtos.Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 29: {
            ModelScale = input.ReadFloat();
            break;
          }
          case 32: {
            type_ = (global::POGOProtos.Enums.PokemonType) input.ReadEnum();
            break;
          }
          case 40: {
            type2_ = (global::POGOProtos.Enums.PokemonType) input.ReadEnum();
            break;
          }
          case 50: {
            if (camera_ == null) {
              camera_ = new global::POGOProtos.Settings.Master.Pokemon.CameraAttributes();
            }
            input.ReadMessage(camera_);
            break;
          }
          case 58: {
            if (encounter_ == null) {
              encounter_ = new global::POGOProtos.Settings.Master.Pokemon.EncounterAttributes();
            }
            input.ReadMessage(encounter_);
            break;
          }
          case 66: {
            if (stats_ == null) {
              stats_ = new global::POGOProtos.Settings.Master.Pokemon.StatsAttributes();
            }
            input.ReadMessage(stats_);
            break;
          }
          case 74:
          case 72: {
            quickMoves_.AddEntriesFrom(input, _repeated_quickMoves_codec);
            break;
          }
          case 82:
          case 80: {
            cinematicMoves_.AddEntriesFrom(input, _repeated_cinematicMoves_codec);
            break;
          }
          case 90:
          case 93: {
            animationTime_.AddEntriesFrom(input, _repeated_animationTime_codec);
            break;
          }
          case 98:
          case 96: {
            evolutionIds_.AddEntriesFrom(input, _repeated_evolutionIds_codec);
            break;
          }
          case 104: {
            EvolutionPips = input.ReadInt32();
            break;
          }
          case 112: {
            rarity_ = (global::POGOProtos.Enums.PokemonRarity) input.ReadEnum();
            break;
          }
          case 125: {
            PokedexHeightM = input.ReadFloat();
            break;
          }
          case 133: {
            PokedexWeightKg = input.ReadFloat();
            break;
          }
          case 136: {
            parentPokemonId_ = (global::POGOProtos.Enums.PokemonId) input.ReadEnum();
            break;
          }
          case 149: {
            HeightStdDev = input.ReadFloat();
            break;
          }
          case 157: {
            WeightStdDev = input.ReadFloat();
            break;
          }
          case 165: {
            KmDistanceToHatch = input.ReadFloat();
            break;
          }
          case 168: {
            familyId_ = (global::POGOProtos.Enums.PokemonFamilyId) input.ReadEnum();
            break;
          }
          case 176: {
            CandyToEvolve = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CameraSettings : pb::IMessage<CameraSettings> {
    private static readonly pb::MessageParser<CameraSettings> _parser = new pb::MessageParser<CameraSettings>(() => new CameraSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSettings(CameraSettings other) : this() {
      nextCamera_ = other.nextCamera_;
      interpolation_ = other.interpolation_.Clone();
      targetType_ = other.targetType_.Clone();
      easeInSpeed_ = other.easeInSpeed_.Clone();
      eastOutSpeed_ = other.eastOutSpeed_.Clone();
      durationSeconds_ = other.durationSeconds_.Clone();
      waitSeconds_ = other.waitSeconds_.Clone();
      transitionSeconds_ = other.transitionSeconds_.Clone();
      angleDegree_ = other.angleDegree_.Clone();
      angleOffsetDegree_ = other.angleOffsetDegree_.Clone();
      pitchDegree_ = other.pitchDegree_.Clone();
      pitchOffsetDegree_ = other.pitchOffsetDegree_.Clone();
      rollDegree_ = other.rollDegree_.Clone();
      distanceMeters_ = other.distanceMeters_.Clone();
      heightPercent_ = other.heightPercent_.Clone();
      vertCtrRatio_ = other.vertCtrRatio_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraSettings Clone() {
      return new CameraSettings(this);
    }

    /// <summary>Field number for the "next_camera" field.</summary>
    public const int NextCameraFieldNumber = 1;
    private string nextCamera_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NextCamera {
      get { return nextCamera_; }
      set {
        nextCamera_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "interpolation" field.</summary>
    public const int InterpolationFieldNumber = 2;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.CameraInterpolation> _repeated_interpolation_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::POGOProtos.Enums.CameraInterpolation) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.CameraInterpolation> interpolation_ = new pbc::RepeatedField<global::POGOProtos.Enums.CameraInterpolation>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.CameraInterpolation> Interpolation {
      get { return interpolation_; }
    }

    /// <summary>Field number for the "target_type" field.</summary>
    public const int TargetTypeFieldNumber = 3;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.CameraTarget> _repeated_targetType_codec
        = pb::FieldCodec.ForEnum(26, x => (int) x, x => (global::POGOProtos.Enums.CameraTarget) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.CameraTarget> targetType_ = new pbc::RepeatedField<global::POGOProtos.Enums.CameraTarget>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.CameraTarget> TargetType {
      get { return targetType_; }
    }

    /// <summary>Field number for the "ease_in_speed" field.</summary>
    public const int EaseInSpeedFieldNumber = 4;
    private static readonly pb::FieldCodec<float> _repeated_easeInSpeed_codec
        = pb::FieldCodec.ForFloat(34);
    private readonly pbc::RepeatedField<float> easeInSpeed_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> EaseInSpeed {
      get { return easeInSpeed_; }
    }

    /// <summary>Field number for the "east_out_speed" field.</summary>
    public const int EastOutSpeedFieldNumber = 5;
    private static readonly pb::FieldCodec<float> _repeated_eastOutSpeed_codec
        = pb::FieldCodec.ForFloat(42);
    private readonly pbc::RepeatedField<float> eastOutSpeed_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> EastOutSpeed {
      get { return eastOutSpeed_; }
    }

    /// <summary>Field number for the "duration_seconds" field.</summary>
    public const int DurationSecondsFieldNumber = 6;
    private static readonly pb::FieldCodec<float> _repeated_durationSeconds_codec
        = pb::FieldCodec.ForFloat(50);
    private readonly pbc::RepeatedField<float> durationSeconds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DurationSeconds {
      get { return durationSeconds_; }
    }

    /// <summary>Field number for the "wait_seconds" field.</summary>
    public const int WaitSecondsFieldNumber = 7;
    private static readonly pb::FieldCodec<float> _repeated_waitSeconds_codec
        = pb::FieldCodec.ForFloat(58);
    private readonly pbc::RepeatedField<float> waitSeconds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> WaitSeconds {
      get { return waitSeconds_; }
    }

    /// <summary>Field number for the "transition_seconds" field.</summary>
    public const int TransitionSecondsFieldNumber = 8;
    private static readonly pb::FieldCodec<float> _repeated_transitionSeconds_codec
        = pb::FieldCodec.ForFloat(66);
    private readonly pbc::RepeatedField<float> transitionSeconds_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> TransitionSeconds {
      get { return transitionSeconds_; }
    }

    /// <summary>Field number for the "angle_degree" field.</summary>
    public const int AngleDegreeFieldNumber = 9;
    private static readonly pb::FieldCodec<float> _repeated_angleDegree_codec
        = pb::FieldCodec.ForFloat(74);
    private readonly pbc::RepeatedField<float> angleDegree_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AngleDegree {
      get { return angleDegree_; }
    }

    /// <summary>Field number for the "angle_offset_degree" field.</summary>
    public const int AngleOffsetDegreeFieldNumber = 10;
    private static readonly pb::FieldCodec<float> _repeated_angleOffsetDegree_codec
        = pb::FieldCodec.ForFloat(82);
    private readonly pbc::RepeatedField<float> angleOffsetDegree_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AngleOffsetDegree {
      get { return angleOffsetDegree_; }
    }

    /// <summary>Field number for the "pitch_degree" field.</summary>
    public const int PitchDegreeFieldNumber = 11;
    private static readonly pb::FieldCodec<float> _repeated_pitchDegree_codec
        = pb::FieldCodec.ForFloat(90);
    private readonly pbc::RepeatedField<float> pitchDegree_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PitchDegree {
      get { return pitchDegree_; }
    }

    /// <summary>Field number for the "pitch_offset_degree" field.</summary>
    public const int PitchOffsetDegreeFieldNumber = 12;
    private static readonly pb::FieldCodec<float> _repeated_pitchOffsetDegree_codec
        = pb::FieldCodec.ForFloat(98);
    private readonly pbc::RepeatedField<float> pitchOffsetDegree_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> PitchOffsetDegree {
      get { return pitchOffsetDegree_; }
    }

    /// <summary>Field number for the "roll_degree" field.</summary>
    public const int RollDegreeFieldNumber = 13;
    private static readonly pb::FieldCodec<float> _repeated_rollDegree_codec
        = pb::FieldCodec.ForFloat(106);
    private readonly pbc::RepeatedField<float> rollDegree_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> RollDegree {
      get { return rollDegree_; }
    }

    /// <summary>Field number for the "distance_meters" field.</summary>
    public const int DistanceMetersFieldNumber = 14;
    private static readonly pb::FieldCodec<float> _repeated_distanceMeters_codec
        = pb::FieldCodec.ForFloat(114);
    private readonly pbc::RepeatedField<float> distanceMeters_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> DistanceMeters {
      get { return distanceMeters_; }
    }

    /// <summary>Field number for the "height_percent" field.</summary>
    public const int HeightPercentFieldNumber = 15;
    private static readonly pb::FieldCodec<float> _repeated_heightPercent_codec
        = pb::FieldCodec.ForFloat(122);
    private readonly pbc::RepeatedField<float> heightPercent_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> HeightPercent {
      get { return heightPercent_; }
    }

    /// <summary>Field number for the "vert_ctr_ratio" field.</summary>
    public const int VertCtrRatioFieldNumber = 16;
    private static readonly pb::FieldCodec<float> _repeated_vertCtrRatio_codec
        = pb::FieldCodec.ForFloat(130);
    private readonly pbc::RepeatedField<float> vertCtrRatio_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> VertCtrRatio {
      get { return vertCtrRatio_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NextCamera != other.NextCamera) return false;
      if(!interpolation_.Equals(other.interpolation_)) return false;
      if(!targetType_.Equals(other.targetType_)) return false;
      if(!easeInSpeed_.Equals(other.easeInSpeed_)) return false;
      if(!eastOutSpeed_.Equals(other.eastOutSpeed_)) return false;
      if(!durationSeconds_.Equals(other.durationSeconds_)) return false;
      if(!waitSeconds_.Equals(other.waitSeconds_)) return false;
      if(!transitionSeconds_.Equals(other.transitionSeconds_)) return false;
      if(!angleDegree_.Equals(other.angleDegree_)) return false;
      if(!angleOffsetDegree_.Equals(other.angleOffsetDegree_)) return false;
      if(!pitchDegree_.Equals(other.pitchDegree_)) return false;
      if(!pitchOffsetDegree_.Equals(other.pitchOffsetDegree_)) return false;
      if(!rollDegree_.Equals(other.rollDegree_)) return false;
      if(!distanceMeters_.Equals(other.distanceMeters_)) return false;
      if(!heightPercent_.Equals(other.heightPercent_)) return false;
      if(!vertCtrRatio_.Equals(other.vertCtrRatio_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NextCamera.Length != 0) hash ^= NextCamera.GetHashCode();
      hash ^= interpolation_.GetHashCode();
      hash ^= targetType_.GetHashCode();
      hash ^= easeInSpeed_.GetHashCode();
      hash ^= eastOutSpeed_.GetHashCode();
      hash ^= durationSeconds_.GetHashCode();
      hash ^= waitSeconds_.GetHashCode();
      hash ^= transitionSeconds_.GetHashCode();
      hash ^= angleDegree_.GetHashCode();
      hash ^= angleOffsetDegree_.GetHashCode();
      hash ^= pitchDegree_.GetHashCode();
      hash ^= pitchOffsetDegree_.GetHashCode();
      hash ^= rollDegree_.GetHashCode();
      hash ^= distanceMeters_.GetHashCode();
      hash ^= heightPercent_.GetHashCode();
      hash ^= vertCtrRatio_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NextCamera.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NextCamera);
      }
      interpolation_.WriteTo(output, _repeated_interpolation_codec);
      targetType_.WriteTo(output, _repeated_targetType_codec);
      easeInSpeed_.WriteTo(output, _repeated_easeInSpeed_codec);
      eastOutSpeed_.WriteTo(output, _repeated_eastOutSpeed_codec);
      durationSeconds_.WriteTo(output, _repeated_durationSeconds_codec);
      waitSeconds_.WriteTo(output, _repeated_waitSeconds_codec);
      transitionSeconds_.WriteTo(output, _repeated_transitionSeconds_codec);
      angleDegree_.WriteTo(output, _repeated_angleDegree_codec);
      angleOffsetDegree_.WriteTo(output, _repeated_angleOffsetDegree_codec);
      pitchDegree_.WriteTo(output, _repeated_pitchDegree_codec);
      pitchOffsetDegree_.WriteTo(output, _repeated_pitchOffsetDegree_codec);
      rollDegree_.WriteTo(output, _repeated_rollDegree_codec);
      distanceMeters_.WriteTo(output, _repeated_distanceMeters_codec);
      heightPercent_.WriteTo(output, _repeated_heightPercent_codec);
      vertCtrRatio_.WriteTo(output, _repeated_vertCtrRatio_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NextCamera.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NextCamera);
      }
      size += interpolation_.CalculateSize(_repeated_interpolation_codec);
      size += targetType_.CalculateSize(_repeated_targetType_codec);
      size += easeInSpeed_.CalculateSize(_repeated_easeInSpeed_codec);
      size += eastOutSpeed_.CalculateSize(_repeated_eastOutSpeed_codec);
      size += durationSeconds_.CalculateSize(_repeated_durationSeconds_codec);
      size += waitSeconds_.CalculateSize(_repeated_waitSeconds_codec);
      size += transitionSeconds_.CalculateSize(_repeated_transitionSeconds_codec);
      size += angleDegree_.CalculateSize(_repeated_angleDegree_codec);
      size += angleOffsetDegree_.CalculateSize(_repeated_angleOffsetDegree_codec);
      size += pitchDegree_.CalculateSize(_repeated_pitchDegree_codec);
      size += pitchOffsetDegree_.CalculateSize(_repeated_pitchOffsetDegree_codec);
      size += rollDegree_.CalculateSize(_repeated_rollDegree_codec);
      size += distanceMeters_.CalculateSize(_repeated_distanceMeters_codec);
      size += heightPercent_.CalculateSize(_repeated_heightPercent_codec);
      size += vertCtrRatio_.CalculateSize(_repeated_vertCtrRatio_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraSettings other) {
      if (other == null) {
        return;
      }
      if (other.NextCamera.Length != 0) {
        NextCamera = other.NextCamera;
      }
      interpolation_.Add(other.interpolation_);
      targetType_.Add(other.targetType_);
      easeInSpeed_.Add(other.easeInSpeed_);
      eastOutSpeed_.Add(other.eastOutSpeed_);
      durationSeconds_.Add(other.durationSeconds_);
      waitSeconds_.Add(other.waitSeconds_);
      transitionSeconds_.Add(other.transitionSeconds_);
      angleDegree_.Add(other.angleDegree_);
      angleOffsetDegree_.Add(other.angleOffsetDegree_);
      pitchDegree_.Add(other.pitchDegree_);
      pitchOffsetDegree_.Add(other.pitchOffsetDegree_);
      rollDegree_.Add(other.rollDegree_);
      distanceMeters_.Add(other.distanceMeters_);
      heightPercent_.Add(other.heightPercent_);
      vertCtrRatio_.Add(other.vertCtrRatio_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            NextCamera = input.ReadString();
            break;
          }
          case 18:
          case 16: {
            interpolation_.AddEntriesFrom(input, _repeated_interpolation_codec);
            break;
          }
          case 26:
          case 24: {
            targetType_.AddEntriesFrom(input, _repeated_targetType_codec);
            break;
          }
          case 34:
          case 37: {
            easeInSpeed_.AddEntriesFrom(input, _repeated_easeInSpeed_codec);
            break;
          }
          case 42:
          case 45: {
            eastOutSpeed_.AddEntriesFrom(input, _repeated_eastOutSpeed_codec);
            break;
          }
          case 50:
          case 53: {
            durationSeconds_.AddEntriesFrom(input, _repeated_durationSeconds_codec);
            break;
          }
          case 58:
          case 61: {
            waitSeconds_.AddEntriesFrom(input, _repeated_waitSeconds_codec);
            break;
          }
          case 66:
          case 69: {
            transitionSeconds_.AddEntriesFrom(input, _repeated_transitionSeconds_codec);
            break;
          }
          case 74:
          case 77: {
            angleDegree_.AddEntriesFrom(input, _repeated_angleDegree_codec);
            break;
          }
          case 82:
          case 85: {
            angleOffsetDegree_.AddEntriesFrom(input, _repeated_angleOffsetDegree_codec);
            break;
          }
          case 90:
          case 93: {
            pitchDegree_.AddEntriesFrom(input, _repeated_pitchDegree_codec);
            break;
          }
          case 98:
          case 101: {
            pitchOffsetDegree_.AddEntriesFrom(input, _repeated_pitchOffsetDegree_codec);
            break;
          }
          case 106:
          case 109: {
            rollDegree_.AddEntriesFrom(input, _repeated_rollDegree_codec);
            break;
          }
          case 114:
          case 117: {
            distanceMeters_.AddEntriesFrom(input, _repeated_distanceMeters_codec);
            break;
          }
          case 122:
          case 125: {
            heightPercent_.AddEntriesFrom(input, _repeated_heightPercent_codec);
            break;
          }
          case 130:
          case 133: {
            vertCtrRatio_.AddEntriesFrom(input, _repeated_vertCtrRatio_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymBattleSettings : pb::IMessage<GymBattleSettings> {
    private static readonly pb::MessageParser<GymBattleSettings> _parser = new pb::MessageParser<GymBattleSettings>(() => new GymBattleSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymBattleSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymBattleSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymBattleSettings(GymBattleSettings other) : this() {
      energyPerSec_ = other.energyPerSec_;
      dodgeEnergyCost_ = other.dodgeEnergyCost_;
      retargetSeconds_ = other.retargetSeconds_;
      enemyAttackInterval_ = other.enemyAttackInterval_;
      attackServerInterval_ = other.attackServerInterval_;
      roundDurationSeconds_ = other.roundDurationSeconds_;
      bonusTimePerAllySeconds_ = other.bonusTimePerAllySeconds_;
      maximumAttackersPerBattle_ = other.maximumAttackersPerBattle_;
      sameTypeAttackBonusMultiplier_ = other.sameTypeAttackBonusMultiplier_;
      maximumEnergy_ = other.maximumEnergy_;
      energyDeltaPerHealthLost_ = other.energyDeltaPerHealthLost_;
      dodgeDurationMs_ = other.dodgeDurationMs_;
      minimumPlayerLevel_ = other.minimumPlayerLevel_;
      swapDurationMs_ = other.swapDurationMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymBattleSettings Clone() {
      return new GymBattleSettings(this);
    }

    /// <summary>Field number for the "energy_per_sec" field.</summary>
    public const int EnergyPerSecFieldNumber = 1;
    private float energyPerSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EnergyPerSec {
      get { return energyPerSec_; }
      set {
        energyPerSec_ = value;
      }
    }

    /// <summary>Field number for the "dodge_energy_cost" field.</summary>
    public const int DodgeEnergyCostFieldNumber = 2;
    private float dodgeEnergyCost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DodgeEnergyCost {
      get { return dodgeEnergyCost_; }
      set {
        dodgeEnergyCost_ = value;
      }
    }

    /// <summary>Field number for the "retarget_seconds" field.</summary>
    public const int RetargetSecondsFieldNumber = 3;
    private float retargetSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RetargetSeconds {
      get { return retargetSeconds_; }
      set {
        retargetSeconds_ = value;
      }
    }

    /// <summary>Field number for the "enemy_attack_interval" field.</summary>
    public const int EnemyAttackIntervalFieldNumber = 4;
    private float enemyAttackInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EnemyAttackInterval {
      get { return enemyAttackInterval_; }
      set {
        enemyAttackInterval_ = value;
      }
    }

    /// <summary>Field number for the "attack_server_interval" field.</summary>
    public const int AttackServerIntervalFieldNumber = 5;
    private float attackServerInterval_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackServerInterval {
      get { return attackServerInterval_; }
      set {
        attackServerInterval_ = value;
      }
    }

    /// <summary>Field number for the "round_duration_seconds" field.</summary>
    public const int RoundDurationSecondsFieldNumber = 6;
    private float roundDurationSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float RoundDurationSeconds {
      get { return roundDurationSeconds_; }
      set {
        roundDurationSeconds_ = value;
      }
    }

    /// <summary>Field number for the "bonus_time_per_ally_seconds" field.</summary>
    public const int BonusTimePerAllySecondsFieldNumber = 7;
    private float bonusTimePerAllySeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BonusTimePerAllySeconds {
      get { return bonusTimePerAllySeconds_; }
      set {
        bonusTimePerAllySeconds_ = value;
      }
    }

    /// <summary>Field number for the "maximum_attackers_per_battle" field.</summary>
    public const int MaximumAttackersPerBattleFieldNumber = 8;
    private int maximumAttackersPerBattle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumAttackersPerBattle {
      get { return maximumAttackersPerBattle_; }
      set {
        maximumAttackersPerBattle_ = value;
      }
    }

    /// <summary>Field number for the "same_type_attack_bonus_multiplier" field.</summary>
    public const int SameTypeAttackBonusMultiplierFieldNumber = 9;
    private float sameTypeAttackBonusMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SameTypeAttackBonusMultiplier {
      get { return sameTypeAttackBonusMultiplier_; }
      set {
        sameTypeAttackBonusMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "maximum_energy" field.</summary>
    public const int MaximumEnergyFieldNumber = 10;
    private int maximumEnergy_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaximumEnergy {
      get { return maximumEnergy_; }
      set {
        maximumEnergy_ = value;
      }
    }

    /// <summary>Field number for the "energy_delta_per_health_lost" field.</summary>
    public const int EnergyDeltaPerHealthLostFieldNumber = 11;
    private float energyDeltaPerHealthLost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float EnergyDeltaPerHealthLost {
      get { return energyDeltaPerHealthLost_; }
      set {
        energyDeltaPerHealthLost_ = value;
      }
    }

    /// <summary>Field number for the "dodge_duration_ms" field.</summary>
    public const int DodgeDurationMsFieldNumber = 12;
    private int dodgeDurationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DodgeDurationMs {
      get { return dodgeDurationMs_; }
      set {
        dodgeDurationMs_ = value;
      }
    }

    /// <summary>Field number for the "minimum_player_level" field.</summary>
    public const int MinimumPlayerLevelFieldNumber = 13;
    private int minimumPlayerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MinimumPlayerLevel {
      get { return minimumPlayerLevel_; }
      set {
        minimumPlayerLevel_ = value;
      }
    }

    /// <summary>Field number for the "swap_duration_ms" field.</summary>
    public const int SwapDurationMsFieldNumber = 14;
    private int swapDurationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SwapDurationMs {
      get { return swapDurationMs_; }
      set {
        swapDurationMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymBattleSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymBattleSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EnergyPerSec != other.EnergyPerSec) return false;
      if (DodgeEnergyCost != other.DodgeEnergyCost) return false;
      if (RetargetSeconds != other.RetargetSeconds) return false;
      if (EnemyAttackInterval != other.EnemyAttackInterval) return false;
      if (AttackServerInterval != other.AttackServerInterval) return false;
      if (RoundDurationSeconds != other.RoundDurationSeconds) return false;
      if (BonusTimePerAllySeconds != other.BonusTimePerAllySeconds) return false;
      if (MaximumAttackersPerBattle != other.MaximumAttackersPerBattle) return false;
      if (SameTypeAttackBonusMultiplier != other.SameTypeAttackBonusMultiplier) return false;
      if (MaximumEnergy != other.MaximumEnergy) return false;
      if (EnergyDeltaPerHealthLost != other.EnergyDeltaPerHealthLost) return false;
      if (DodgeDurationMs != other.DodgeDurationMs) return false;
      if (MinimumPlayerLevel != other.MinimumPlayerLevel) return false;
      if (SwapDurationMs != other.SwapDurationMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EnergyPerSec != 0F) hash ^= EnergyPerSec.GetHashCode();
      if (DodgeEnergyCost != 0F) hash ^= DodgeEnergyCost.GetHashCode();
      if (RetargetSeconds != 0F) hash ^= RetargetSeconds.GetHashCode();
      if (EnemyAttackInterval != 0F) hash ^= EnemyAttackInterval.GetHashCode();
      if (AttackServerInterval != 0F) hash ^= AttackServerInterval.GetHashCode();
      if (RoundDurationSeconds != 0F) hash ^= RoundDurationSeconds.GetHashCode();
      if (BonusTimePerAllySeconds != 0F) hash ^= BonusTimePerAllySeconds.GetHashCode();
      if (MaximumAttackersPerBattle != 0) hash ^= MaximumAttackersPerBattle.GetHashCode();
      if (SameTypeAttackBonusMultiplier != 0F) hash ^= SameTypeAttackBonusMultiplier.GetHashCode();
      if (MaximumEnergy != 0) hash ^= MaximumEnergy.GetHashCode();
      if (EnergyDeltaPerHealthLost != 0F) hash ^= EnergyDeltaPerHealthLost.GetHashCode();
      if (DodgeDurationMs != 0) hash ^= DodgeDurationMs.GetHashCode();
      if (MinimumPlayerLevel != 0) hash ^= MinimumPlayerLevel.GetHashCode();
      if (SwapDurationMs != 0) hash ^= SwapDurationMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EnergyPerSec != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(EnergyPerSec);
      }
      if (DodgeEnergyCost != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(DodgeEnergyCost);
      }
      if (RetargetSeconds != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(RetargetSeconds);
      }
      if (EnemyAttackInterval != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(EnemyAttackInterval);
      }
      if (AttackServerInterval != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(AttackServerInterval);
      }
      if (RoundDurationSeconds != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(RoundDurationSeconds);
      }
      if (BonusTimePerAllySeconds != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(BonusTimePerAllySeconds);
      }
      if (MaximumAttackersPerBattle != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MaximumAttackersPerBattle);
      }
      if (SameTypeAttackBonusMultiplier != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(SameTypeAttackBonusMultiplier);
      }
      if (MaximumEnergy != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaximumEnergy);
      }
      if (EnergyDeltaPerHealthLost != 0F) {
        output.WriteRawTag(93);
        output.WriteFloat(EnergyDeltaPerHealthLost);
      }
      if (DodgeDurationMs != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DodgeDurationMs);
      }
      if (MinimumPlayerLevel != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(MinimumPlayerLevel);
      }
      if (SwapDurationMs != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SwapDurationMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EnergyPerSec != 0F) {
        size += 1 + 4;
      }
      if (DodgeEnergyCost != 0F) {
        size += 1 + 4;
      }
      if (RetargetSeconds != 0F) {
        size += 1 + 4;
      }
      if (EnemyAttackInterval != 0F) {
        size += 1 + 4;
      }
      if (AttackServerInterval != 0F) {
        size += 1 + 4;
      }
      if (RoundDurationSeconds != 0F) {
        size += 1 + 4;
      }
      if (BonusTimePerAllySeconds != 0F) {
        size += 1 + 4;
      }
      if (MaximumAttackersPerBattle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumAttackersPerBattle);
      }
      if (SameTypeAttackBonusMultiplier != 0F) {
        size += 1 + 4;
      }
      if (MaximumEnergy != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaximumEnergy);
      }
      if (EnergyDeltaPerHealthLost != 0F) {
        size += 1 + 4;
      }
      if (DodgeDurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DodgeDurationMs);
      }
      if (MinimumPlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinimumPlayerLevel);
      }
      if (SwapDurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SwapDurationMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymBattleSettings other) {
      if (other == null) {
        return;
      }
      if (other.EnergyPerSec != 0F) {
        EnergyPerSec = other.EnergyPerSec;
      }
      if (other.DodgeEnergyCost != 0F) {
        DodgeEnergyCost = other.DodgeEnergyCost;
      }
      if (other.RetargetSeconds != 0F) {
        RetargetSeconds = other.RetargetSeconds;
      }
      if (other.EnemyAttackInterval != 0F) {
        EnemyAttackInterval = other.EnemyAttackInterval;
      }
      if (other.AttackServerInterval != 0F) {
        AttackServerInterval = other.AttackServerInterval;
      }
      if (other.RoundDurationSeconds != 0F) {
        RoundDurationSeconds = other.RoundDurationSeconds;
      }
      if (other.BonusTimePerAllySeconds != 0F) {
        BonusTimePerAllySeconds = other.BonusTimePerAllySeconds;
      }
      if (other.MaximumAttackersPerBattle != 0) {
        MaximumAttackersPerBattle = other.MaximumAttackersPerBattle;
      }
      if (other.SameTypeAttackBonusMultiplier != 0F) {
        SameTypeAttackBonusMultiplier = other.SameTypeAttackBonusMultiplier;
      }
      if (other.MaximumEnergy != 0) {
        MaximumEnergy = other.MaximumEnergy;
      }
      if (other.EnergyDeltaPerHealthLost != 0F) {
        EnergyDeltaPerHealthLost = other.EnergyDeltaPerHealthLost;
      }
      if (other.DodgeDurationMs != 0) {
        DodgeDurationMs = other.DodgeDurationMs;
      }
      if (other.MinimumPlayerLevel != 0) {
        MinimumPlayerLevel = other.MinimumPlayerLevel;
      }
      if (other.SwapDurationMs != 0) {
        SwapDurationMs = other.SwapDurationMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            EnergyPerSec = input.ReadFloat();
            break;
          }
          case 21: {
            DodgeEnergyCost = input.ReadFloat();
            break;
          }
          case 29: {
            RetargetSeconds = input.ReadFloat();
            break;
          }
          case 37: {
            EnemyAttackInterval = input.ReadFloat();
            break;
          }
          case 45: {
            AttackServerInterval = input.ReadFloat();
            break;
          }
          case 53: {
            RoundDurationSeconds = input.ReadFloat();
            break;
          }
          case 61: {
            BonusTimePerAllySeconds = input.ReadFloat();
            break;
          }
          case 64: {
            MaximumAttackersPerBattle = input.ReadInt32();
            break;
          }
          case 77: {
            SameTypeAttackBonusMultiplier = input.ReadFloat();
            break;
          }
          case 80: {
            MaximumEnergy = input.ReadInt32();
            break;
          }
          case 93: {
            EnergyDeltaPerHealthLost = input.ReadFloat();
            break;
          }
          case 96: {
            DodgeDurationMs = input.ReadInt32();
            break;
          }
          case 104: {
            MinimumPlayerLevel = input.ReadInt32();
            break;
          }
          case 112: {
            SwapDurationMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EquippedBadgeSettings : pb::IMessage<EquippedBadgeSettings> {
    private static readonly pb::MessageParser<EquippedBadgeSettings> _parser = new pb::MessageParser<EquippedBadgeSettings>(() => new EquippedBadgeSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EquippedBadgeSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquippedBadgeSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquippedBadgeSettings(EquippedBadgeSettings other) : this() {
      equipBadgeCooldownMs_ = other.equipBadgeCooldownMs_;
      catchProbabilityBonus_ = other.catchProbabilityBonus_.Clone();
      fleeProbabilityBonus_ = other.fleeProbabilityBonus_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EquippedBadgeSettings Clone() {
      return new EquippedBadgeSettings(this);
    }

    /// <summary>Field number for the "equip_badge_cooldown_ms" field.</summary>
    public const int EquipBadgeCooldownMsFieldNumber = 1;
    private long equipBadgeCooldownMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EquipBadgeCooldownMs {
      get { return equipBadgeCooldownMs_; }
      set {
        equipBadgeCooldownMs_ = value;
      }
    }

    /// <summary>Field number for the "catch_probability_bonus" field.</summary>
    public const int CatchProbabilityBonusFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_catchProbabilityBonus_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> catchProbabilityBonus_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CatchProbabilityBonus {
      get { return catchProbabilityBonus_; }
    }

    /// <summary>Field number for the "flee_probability_bonus" field.</summary>
    public const int FleeProbabilityBonusFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_fleeProbabilityBonus_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> fleeProbabilityBonus_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> FleeProbabilityBonus {
      get { return fleeProbabilityBonus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EquippedBadgeSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EquippedBadgeSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (EquipBadgeCooldownMs != other.EquipBadgeCooldownMs) return false;
      if(!catchProbabilityBonus_.Equals(other.catchProbabilityBonus_)) return false;
      if(!fleeProbabilityBonus_.Equals(other.fleeProbabilityBonus_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (EquipBadgeCooldownMs != 0L) hash ^= EquipBadgeCooldownMs.GetHashCode();
      hash ^= catchProbabilityBonus_.GetHashCode();
      hash ^= fleeProbabilityBonus_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (EquipBadgeCooldownMs != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(EquipBadgeCooldownMs);
      }
      catchProbabilityBonus_.WriteTo(output, _repeated_catchProbabilityBonus_codec);
      fleeProbabilityBonus_.WriteTo(output, _repeated_fleeProbabilityBonus_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (EquipBadgeCooldownMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EquipBadgeCooldownMs);
      }
      size += catchProbabilityBonus_.CalculateSize(_repeated_catchProbabilityBonus_codec);
      size += fleeProbabilityBonus_.CalculateSize(_repeated_fleeProbabilityBonus_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EquippedBadgeSettings other) {
      if (other == null) {
        return;
      }
      if (other.EquipBadgeCooldownMs != 0L) {
        EquipBadgeCooldownMs = other.EquipBadgeCooldownMs;
      }
      catchProbabilityBonus_.Add(other.catchProbabilityBonus_);
      fleeProbabilityBonus_.Add(other.fleeProbabilityBonus_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            EquipBadgeCooldownMs = input.ReadInt64();
            break;
          }
          case 18:
          case 21: {
            catchProbabilityBonus_.AddEntriesFrom(input, _repeated_catchProbabilityBonus_codec);
            break;
          }
          case 26:
          case 29: {
            fleeProbabilityBonus_.AddEntriesFrom(input, _repeated_fleeProbabilityBonus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class IapSettings : pb::IMessage<IapSettings> {
    private static readonly pb::MessageParser<IapSettings> _parser = new pb::MessageParser<IapSettings>(() => new IapSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IapSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IapSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IapSettings(IapSettings other) : this() {
      dailyBonusCoins_ = other.dailyBonusCoins_;
      dailyDefenderBonusPerPokemon_ = other.dailyDefenderBonusPerPokemon_.Clone();
      dailyDefenderBonusMaxDefenders_ = other.dailyDefenderBonusMaxDefenders_;
      dailyDefenderBonusCurrency_ = other.dailyDefenderBonusCurrency_.Clone();
      minTimeBetweenClaimsMs_ = other.minTimeBetweenClaimsMs_;
      dailyBonusEnabled_ = other.dailyBonusEnabled_;
      dailyDefenderBonusEnabled_ = other.dailyDefenderBonusEnabled_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IapSettings Clone() {
      return new IapSettings(this);
    }

    /// <summary>Field number for the "daily_bonus_coins" field.</summary>
    public const int DailyBonusCoinsFieldNumber = 1;
    private int dailyBonusCoins_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyBonusCoins {
      get { return dailyBonusCoins_; }
      set {
        dailyBonusCoins_ = value;
      }
    }

    /// <summary>Field number for the "daily_defender_bonus_per_pokemon" field.</summary>
    public const int DailyDefenderBonusPerPokemonFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_dailyDefenderBonusPerPokemon_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> dailyDefenderBonusPerPokemon_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> DailyDefenderBonusPerPokemon {
      get { return dailyDefenderBonusPerPokemon_; }
    }

    /// <summary>Field number for the "daily_defender_bonus_max_defenders" field.</summary>
    public const int DailyDefenderBonusMaxDefendersFieldNumber = 3;
    private int dailyDefenderBonusMaxDefenders_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DailyDefenderBonusMaxDefenders {
      get { return dailyDefenderBonusMaxDefenders_; }
      set {
        dailyDefenderBonusMaxDefenders_ = value;
      }
    }

    /// <summary>Field number for the "daily_defender_bonus_currency" field.</summary>
    public const int DailyDefenderBonusCurrencyFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_dailyDefenderBonusCurrency_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> dailyDefenderBonusCurrency_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> DailyDefenderBonusCurrency {
      get { return dailyDefenderBonusCurrency_; }
    }

    /// <summary>Field number for the "min_time_between_claims_ms" field.</summary>
    public const int MinTimeBetweenClaimsMsFieldNumber = 5;
    private long minTimeBetweenClaimsMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long MinTimeBetweenClaimsMs {
      get { return minTimeBetweenClaimsMs_; }
      set {
        minTimeBetweenClaimsMs_ = value;
      }
    }

    /// <summary>Field number for the "daily_bonus_enabled" field.</summary>
    public const int DailyBonusEnabledFieldNumber = 6;
    private bool dailyBonusEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DailyBonusEnabled {
      get { return dailyBonusEnabled_; }
      set {
        dailyBonusEnabled_ = value;
      }
    }

    /// <summary>Field number for the "daily_defender_bonus_enabled" field.</summary>
    public const int DailyDefenderBonusEnabledFieldNumber = 7;
    private bool dailyDefenderBonusEnabled_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool DailyDefenderBonusEnabled {
      get { return dailyDefenderBonusEnabled_; }
      set {
        dailyDefenderBonusEnabled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IapSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IapSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DailyBonusCoins != other.DailyBonusCoins) return false;
      if(!dailyDefenderBonusPerPokemon_.Equals(other.dailyDefenderBonusPerPokemon_)) return false;
      if (DailyDefenderBonusMaxDefenders != other.DailyDefenderBonusMaxDefenders) return false;
      if(!dailyDefenderBonusCurrency_.Equals(other.dailyDefenderBonusCurrency_)) return false;
      if (MinTimeBetweenClaimsMs != other.MinTimeBetweenClaimsMs) return false;
      if (DailyBonusEnabled != other.DailyBonusEnabled) return false;
      if (DailyDefenderBonusEnabled != other.DailyDefenderBonusEnabled) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DailyBonusCoins != 0) hash ^= DailyBonusCoins.GetHashCode();
      hash ^= dailyDefenderBonusPerPokemon_.GetHashCode();
      if (DailyDefenderBonusMaxDefenders != 0) hash ^= DailyDefenderBonusMaxDefenders.GetHashCode();
      hash ^= dailyDefenderBonusCurrency_.GetHashCode();
      if (MinTimeBetweenClaimsMs != 0L) hash ^= MinTimeBetweenClaimsMs.GetHashCode();
      if (DailyBonusEnabled != false) hash ^= DailyBonusEnabled.GetHashCode();
      if (DailyDefenderBonusEnabled != false) hash ^= DailyDefenderBonusEnabled.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DailyBonusCoins != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DailyBonusCoins);
      }
      dailyDefenderBonusPerPokemon_.WriteTo(output, _repeated_dailyDefenderBonusPerPokemon_codec);
      if (DailyDefenderBonusMaxDefenders != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(DailyDefenderBonusMaxDefenders);
      }
      dailyDefenderBonusCurrency_.WriteTo(output, _repeated_dailyDefenderBonusCurrency_codec);
      if (MinTimeBetweenClaimsMs != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MinTimeBetweenClaimsMs);
      }
      if (DailyBonusEnabled != false) {
        output.WriteRawTag(48);
        output.WriteBool(DailyBonusEnabled);
      }
      if (DailyDefenderBonusEnabled != false) {
        output.WriteRawTag(56);
        output.WriteBool(DailyDefenderBonusEnabled);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DailyBonusCoins != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyBonusCoins);
      }
      size += dailyDefenderBonusPerPokemon_.CalculateSize(_repeated_dailyDefenderBonusPerPokemon_codec);
      if (DailyDefenderBonusMaxDefenders != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DailyDefenderBonusMaxDefenders);
      }
      size += dailyDefenderBonusCurrency_.CalculateSize(_repeated_dailyDefenderBonusCurrency_codec);
      if (MinTimeBetweenClaimsMs != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinTimeBetweenClaimsMs);
      }
      if (DailyBonusEnabled != false) {
        size += 1 + 1;
      }
      if (DailyDefenderBonusEnabled != false) {
        size += 1 + 1;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IapSettings other) {
      if (other == null) {
        return;
      }
      if (other.DailyBonusCoins != 0) {
        DailyBonusCoins = other.DailyBonusCoins;
      }
      dailyDefenderBonusPerPokemon_.Add(other.dailyDefenderBonusPerPokemon_);
      if (other.DailyDefenderBonusMaxDefenders != 0) {
        DailyDefenderBonusMaxDefenders = other.DailyDefenderBonusMaxDefenders;
      }
      dailyDefenderBonusCurrency_.Add(other.dailyDefenderBonusCurrency_);
      if (other.MinTimeBetweenClaimsMs != 0L) {
        MinTimeBetweenClaimsMs = other.MinTimeBetweenClaimsMs;
      }
      if (other.DailyBonusEnabled != false) {
        DailyBonusEnabled = other.DailyBonusEnabled;
      }
      if (other.DailyDefenderBonusEnabled != false) {
        DailyDefenderBonusEnabled = other.DailyDefenderBonusEnabled;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DailyBonusCoins = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            dailyDefenderBonusPerPokemon_.AddEntriesFrom(input, _repeated_dailyDefenderBonusPerPokemon_codec);
            break;
          }
          case 24: {
            DailyDefenderBonusMaxDefenders = input.ReadInt32();
            break;
          }
          case 34: {
            dailyDefenderBonusCurrency_.AddEntriesFrom(input, _repeated_dailyDefenderBonusCurrency_codec);
            break;
          }
          case 40: {
            MinTimeBetweenClaimsMs = input.ReadInt64();
            break;
          }
          case 48: {
            DailyBonusEnabled = input.ReadBool();
            break;
          }
          case 56: {
            DailyDefenderBonusEnabled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ItemSettings : pb::IMessage<ItemSettings> {
    private static readonly pb::MessageParser<ItemSettings> _parser = new pb::MessageParser<ItemSettings>(() => new ItemSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ItemSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSettings(ItemSettings other) : this() {
      itemId_ = other.itemId_;
      itemType_ = other.itemType_;
      category_ = other.category_;
      dropFreq_ = other.dropFreq_;
      dropTrainerLevel_ = other.dropTrainerLevel_;
      Pokeball = other.pokeball_ != null ? other.Pokeball.Clone() : null;
      Potion = other.potion_ != null ? other.Potion.Clone() : null;
      Revive = other.revive_ != null ? other.Revive.Clone() : null;
      Battle = other.battle_ != null ? other.Battle.Clone() : null;
      Food = other.food_ != null ? other.Food.Clone() : null;
      InventoryUpgrade = other.inventoryUpgrade_ != null ? other.InventoryUpgrade.Clone() : null;
      XpBoost = other.xpBoost_ != null ? other.XpBoost.Clone() : null;
      Incense = other.incense_ != null ? other.Incense.Clone() : null;
      EggIncubator = other.eggIncubator_ != null ? other.EggIncubator.Clone() : null;
      FortModifier = other.fortModifier_ != null ? other.FortModifier.Clone() : null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ItemSettings Clone() {
      return new ItemSettings(this);
    }

    /// <summary>Field number for the "item_id" field.</summary>
    public const int ItemIdFieldNumber = 1;
    private global::POGOProtos.Inventory.Item.ItemId itemId_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.Item.ItemId ItemId {
      get { return itemId_; }
      set {
        itemId_ = value;
      }
    }

    /// <summary>Field number for the "item_type" field.</summary>
    public const int ItemTypeFieldNumber = 2;
    private global::POGOProtos.Inventory.Item.ItemType itemType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.Item.ItemType ItemType {
      get { return itemType_; }
      set {
        itemType_ = value;
      }
    }

    /// <summary>Field number for the "category" field.</summary>
    public const int CategoryFieldNumber = 3;
    private global::POGOProtos.Enums.ItemCategory category_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.ItemCategory Category {
      get { return category_; }
      set {
        category_ = value;
      }
    }

    /// <summary>Field number for the "drop_freq" field.</summary>
    public const int DropFreqFieldNumber = 4;
    private float dropFreq_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DropFreq {
      get { return dropFreq_; }
      set {
        dropFreq_ = value;
      }
    }

    /// <summary>Field number for the "drop_trainer_level" field.</summary>
    public const int DropTrainerLevelFieldNumber = 5;
    private int dropTrainerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DropTrainerLevel {
      get { return dropTrainerLevel_; }
      set {
        dropTrainerLevel_ = value;
      }
    }

    /// <summary>Field number for the "pokeball" field.</summary>
    public const int PokeballFieldNumber = 6;
    private global::POGOProtos.Settings.Master.Item.PokeballAttributes pokeball_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.PokeballAttributes Pokeball {
      get { return pokeball_; }
      set {
        pokeball_ = value;
      }
    }

    /// <summary>Field number for the "potion" field.</summary>
    public const int PotionFieldNumber = 7;
    private global::POGOProtos.Settings.Master.Item.PotionAttributes potion_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.PotionAttributes Potion {
      get { return potion_; }
      set {
        potion_ = value;
      }
    }

    /// <summary>Field number for the "revive" field.</summary>
    public const int ReviveFieldNumber = 8;
    private global::POGOProtos.Settings.Master.Item.ReviveAttributes revive_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.ReviveAttributes Revive {
      get { return revive_; }
      set {
        revive_ = value;
      }
    }

    /// <summary>Field number for the "battle" field.</summary>
    public const int BattleFieldNumber = 9;
    private global::POGOProtos.Settings.Master.Item.BattleAttributes battle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.BattleAttributes Battle {
      get { return battle_; }
      set {
        battle_ = value;
      }
    }

    /// <summary>Field number for the "food" field.</summary>
    public const int FoodFieldNumber = 10;
    private global::POGOProtos.Settings.Master.Item.FoodAttributes food_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.FoodAttributes Food {
      get { return food_; }
      set {
        food_ = value;
      }
    }

    /// <summary>Field number for the "inventory_upgrade" field.</summary>
    public const int InventoryUpgradeFieldNumber = 11;
    private global::POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes inventoryUpgrade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes InventoryUpgrade {
      get { return inventoryUpgrade_; }
      set {
        inventoryUpgrade_ = value;
      }
    }

    /// <summary>Field number for the "xp_boost" field.</summary>
    public const int XpBoostFieldNumber = 12;
    private global::POGOProtos.Settings.Master.Item.ExperienceBoostAttributes xpBoost_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.ExperienceBoostAttributes XpBoost {
      get { return xpBoost_; }
      set {
        xpBoost_ = value;
      }
    }

    /// <summary>Field number for the "incense" field.</summary>
    public const int IncenseFieldNumber = 13;
    private global::POGOProtos.Settings.Master.Item.IncenseAttributes incense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.IncenseAttributes Incense {
      get { return incense_; }
      set {
        incense_ = value;
      }
    }

    /// <summary>Field number for the "egg_incubator" field.</summary>
    public const int EggIncubatorFieldNumber = 14;
    private global::POGOProtos.Settings.Master.Item.EggIncubatorAttributes eggIncubator_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.EggIncubatorAttributes EggIncubator {
      get { return eggIncubator_; }
      set {
        eggIncubator_ = value;
      }
    }

    /// <summary>Field number for the "fort_modifier" field.</summary>
    public const int FortModifierFieldNumber = 15;
    private global::POGOProtos.Settings.Master.Item.FortModifierAttributes fortModifier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Settings.Master.Item.FortModifierAttributes FortModifier {
      get { return fortModifier_; }
      set {
        fortModifier_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ItemSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ItemSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemId != other.ItemId) return false;
      if (ItemType != other.ItemType) return false;
      if (Category != other.Category) return false;
      if (DropFreq != other.DropFreq) return false;
      if (DropTrainerLevel != other.DropTrainerLevel) return false;
      if (!object.Equals(Pokeball, other.Pokeball)) return false;
      if (!object.Equals(Potion, other.Potion)) return false;
      if (!object.Equals(Revive, other.Revive)) return false;
      if (!object.Equals(Battle, other.Battle)) return false;
      if (!object.Equals(Food, other.Food)) return false;
      if (!object.Equals(InventoryUpgrade, other.InventoryUpgrade)) return false;
      if (!object.Equals(XpBoost, other.XpBoost)) return false;
      if (!object.Equals(Incense, other.Incense)) return false;
      if (!object.Equals(EggIncubator, other.EggIncubator)) return false;
      if (!object.Equals(FortModifier, other.FortModifier)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemId != 0) hash ^= ItemId.GetHashCode();
      if (ItemType != 0) hash ^= ItemType.GetHashCode();
      if (Category != 0) hash ^= Category.GetHashCode();
      if (DropFreq != 0F) hash ^= DropFreq.GetHashCode();
      if (DropTrainerLevel != 0) hash ^= DropTrainerLevel.GetHashCode();
      if (pokeball_ != null) hash ^= Pokeball.GetHashCode();
      if (potion_ != null) hash ^= Potion.GetHashCode();
      if (revive_ != null) hash ^= Revive.GetHashCode();
      if (battle_ != null) hash ^= Battle.GetHashCode();
      if (food_ != null) hash ^= Food.GetHashCode();
      if (inventoryUpgrade_ != null) hash ^= InventoryUpgrade.GetHashCode();
      if (xpBoost_ != null) hash ^= XpBoost.GetHashCode();
      if (incense_ != null) hash ^= Incense.GetHashCode();
      if (eggIncubator_ != null) hash ^= EggIncubator.GetHashCode();
      if (fortModifier_ != null) hash ^= FortModifier.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemId != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemId);
      }
      if (ItemType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) ItemType);
      }
      if (Category != 0) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Category);
      }
      if (DropFreq != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(DropFreq);
      }
      if (DropTrainerLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(DropTrainerLevel);
      }
      if (pokeball_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(Pokeball);
      }
      if (potion_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Potion);
      }
      if (revive_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(Revive);
      }
      if (battle_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Battle);
      }
      if (food_ != null) {
        output.WriteRawTag(82);
        output.WriteMessage(Food);
      }
      if (inventoryUpgrade_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(InventoryUpgrade);
      }
      if (xpBoost_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(XpBoost);
      }
      if (incense_ != null) {
        output.WriteRawTag(106);
        output.WriteMessage(Incense);
      }
      if (eggIncubator_ != null) {
        output.WriteRawTag(114);
        output.WriteMessage(EggIncubator);
      }
      if (fortModifier_ != null) {
        output.WriteRawTag(122);
        output.WriteMessage(FortModifier);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemId);
      }
      if (ItemType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemType);
      }
      if (Category != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Category);
      }
      if (DropFreq != 0F) {
        size += 1 + 4;
      }
      if (DropTrainerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DropTrainerLevel);
      }
      if (pokeball_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Pokeball);
      }
      if (potion_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Potion);
      }
      if (revive_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Revive);
      }
      if (battle_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Battle);
      }
      if (food_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Food);
      }
      if (inventoryUpgrade_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InventoryUpgrade);
      }
      if (xpBoost_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(XpBoost);
      }
      if (incense_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Incense);
      }
      if (eggIncubator_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EggIncubator);
      }
      if (fortModifier_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(FortModifier);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ItemSettings other) {
      if (other == null) {
        return;
      }
      if (other.ItemId != 0) {
        ItemId = other.ItemId;
      }
      if (other.ItemType != 0) {
        ItemType = other.ItemType;
      }
      if (other.Category != 0) {
        Category = other.Category;
      }
      if (other.DropFreq != 0F) {
        DropFreq = other.DropFreq;
      }
      if (other.DropTrainerLevel != 0) {
        DropTrainerLevel = other.DropTrainerLevel;
      }
      if (other.pokeball_ != null) {
        if (pokeball_ == null) {
          pokeball_ = new global::POGOProtos.Settings.Master.Item.PokeballAttributes();
        }
        Pokeball.MergeFrom(other.Pokeball);
      }
      if (other.potion_ != null) {
        if (potion_ == null) {
          potion_ = new global::POGOProtos.Settings.Master.Item.PotionAttributes();
        }
        Potion.MergeFrom(other.Potion);
      }
      if (other.revive_ != null) {
        if (revive_ == null) {
          revive_ = new global::POGOProtos.Settings.Master.Item.ReviveAttributes();
        }
        Revive.MergeFrom(other.Revive);
      }
      if (other.battle_ != null) {
        if (battle_ == null) {
          battle_ = new global::POGOProtos.Settings.Master.Item.BattleAttributes();
        }
        Battle.MergeFrom(other.Battle);
      }
      if (other.food_ != null) {
        if (food_ == null) {
          food_ = new global::POGOProtos.Settings.Master.Item.FoodAttributes();
        }
        Food.MergeFrom(other.Food);
      }
      if (other.inventoryUpgrade_ != null) {
        if (inventoryUpgrade_ == null) {
          inventoryUpgrade_ = new global::POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes();
        }
        InventoryUpgrade.MergeFrom(other.InventoryUpgrade);
      }
      if (other.xpBoost_ != null) {
        if (xpBoost_ == null) {
          xpBoost_ = new global::POGOProtos.Settings.Master.Item.ExperienceBoostAttributes();
        }
        XpBoost.MergeFrom(other.XpBoost);
      }
      if (other.incense_ != null) {
        if (incense_ == null) {
          incense_ = new global::POGOProtos.Settings.Master.Item.IncenseAttributes();
        }
        Incense.MergeFrom(other.Incense);
      }
      if (other.eggIncubator_ != null) {
        if (eggIncubator_ == null) {
          eggIncubator_ = new global::POGOProtos.Settings.Master.Item.EggIncubatorAttributes();
        }
        EggIncubator.MergeFrom(other.EggIncubator);
      }
      if (other.fortModifier_ != null) {
        if (fortModifier_ == null) {
          fortModifier_ = new global::POGOProtos.Settings.Master.Item.FortModifierAttributes();
        }
        FortModifier.MergeFrom(other.FortModifier);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemId_ = (global::POGOProtos.Inventory.Item.ItemId) input.ReadEnum();
            break;
          }
          case 16: {
            itemType_ = (global::POGOProtos.Inventory.Item.ItemType) input.ReadEnum();
            break;
          }
          case 24: {
            category_ = (global::POGOProtos.Enums.ItemCategory) input.ReadEnum();
            break;
          }
          case 37: {
            DropFreq = input.ReadFloat();
            break;
          }
          case 40: {
            DropTrainerLevel = input.ReadInt32();
            break;
          }
          case 50: {
            if (pokeball_ == null) {
              pokeball_ = new global::POGOProtos.Settings.Master.Item.PokeballAttributes();
            }
            input.ReadMessage(pokeball_);
            break;
          }
          case 58: {
            if (potion_ == null) {
              potion_ = new global::POGOProtos.Settings.Master.Item.PotionAttributes();
            }
            input.ReadMessage(potion_);
            break;
          }
          case 66: {
            if (revive_ == null) {
              revive_ = new global::POGOProtos.Settings.Master.Item.ReviveAttributes();
            }
            input.ReadMessage(revive_);
            break;
          }
          case 74: {
            if (battle_ == null) {
              battle_ = new global::POGOProtos.Settings.Master.Item.BattleAttributes();
            }
            input.ReadMessage(battle_);
            break;
          }
          case 82: {
            if (food_ == null) {
              food_ = new global::POGOProtos.Settings.Master.Item.FoodAttributes();
            }
            input.ReadMessage(food_);
            break;
          }
          case 90: {
            if (inventoryUpgrade_ == null) {
              inventoryUpgrade_ = new global::POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes();
            }
            input.ReadMessage(inventoryUpgrade_);
            break;
          }
          case 98: {
            if (xpBoost_ == null) {
              xpBoost_ = new global::POGOProtos.Settings.Master.Item.ExperienceBoostAttributes();
            }
            input.ReadMessage(xpBoost_);
            break;
          }
          case 106: {
            if (incense_ == null) {
              incense_ = new global::POGOProtos.Settings.Master.Item.IncenseAttributes();
            }
            input.ReadMessage(incense_);
            break;
          }
          case 114: {
            if (eggIncubator_ == null) {
              eggIncubator_ = new global::POGOProtos.Settings.Master.Item.EggIncubatorAttributes();
            }
            input.ReadMessage(eggIncubator_);
            break;
          }
          case 122: {
            if (fortModifier_ == null) {
              fortModifier_ = new global::POGOProtos.Settings.Master.Item.FortModifierAttributes();
            }
            input.ReadMessage(fortModifier_);
            break;
          }
        }
      }
    }

  }

  public sealed partial class PlayerLevelSettings : pb::IMessage<PlayerLevelSettings> {
    private static readonly pb::MessageParser<PlayerLevelSettings> _parser = new pb::MessageParser<PlayerLevelSettings>(() => new PlayerLevelSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerLevelSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLevelSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLevelSettings(PlayerLevelSettings other) : this() {
      rankNum_ = other.rankNum_.Clone();
      requiredExperience_ = other.requiredExperience_.Clone();
      cpMultiplier_ = other.cpMultiplier_.Clone();
      maxEggPlayerLevel_ = other.maxEggPlayerLevel_;
      maxEncounterPlayerLevel_ = other.maxEncounterPlayerLevel_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerLevelSettings Clone() {
      return new PlayerLevelSettings(this);
    }

    /// <summary>Field number for the "rank_num" field.</summary>
    public const int RankNumFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_rankNum_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> rankNum_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RankNum {
      get { return rankNum_; }
    }

    /// <summary>Field number for the "required_experience" field.</summary>
    public const int RequiredExperienceFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_requiredExperience_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> requiredExperience_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RequiredExperience {
      get { return requiredExperience_; }
    }

    /// <summary>Field number for the "cp_multiplier" field.</summary>
    public const int CpMultiplierFieldNumber = 3;
    private static readonly pb::FieldCodec<float> _repeated_cpMultiplier_codec
        = pb::FieldCodec.ForFloat(26);
    private readonly pbc::RepeatedField<float> cpMultiplier_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> CpMultiplier {
      get { return cpMultiplier_; }
    }

    /// <summary>Field number for the "max_egg_player_level" field.</summary>
    public const int MaxEggPlayerLevelFieldNumber = 4;
    private int maxEggPlayerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxEggPlayerLevel {
      get { return maxEggPlayerLevel_; }
      set {
        maxEggPlayerLevel_ = value;
      }
    }

    /// <summary>Field number for the "max_encounter_player_level" field.</summary>
    public const int MaxEncounterPlayerLevelFieldNumber = 5;
    private int maxEncounterPlayerLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MaxEncounterPlayerLevel {
      get { return maxEncounterPlayerLevel_; }
      set {
        maxEncounterPlayerLevel_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerLevelSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerLevelSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!rankNum_.Equals(other.rankNum_)) return false;
      if(!requiredExperience_.Equals(other.requiredExperience_)) return false;
      if(!cpMultiplier_.Equals(other.cpMultiplier_)) return false;
      if (MaxEggPlayerLevel != other.MaxEggPlayerLevel) return false;
      if (MaxEncounterPlayerLevel != other.MaxEncounterPlayerLevel) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= rankNum_.GetHashCode();
      hash ^= requiredExperience_.GetHashCode();
      hash ^= cpMultiplier_.GetHashCode();
      if (MaxEggPlayerLevel != 0) hash ^= MaxEggPlayerLevel.GetHashCode();
      if (MaxEncounterPlayerLevel != 0) hash ^= MaxEncounterPlayerLevel.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      rankNum_.WriteTo(output, _repeated_rankNum_codec);
      requiredExperience_.WriteTo(output, _repeated_requiredExperience_codec);
      cpMultiplier_.WriteTo(output, _repeated_cpMultiplier_codec);
      if (MaxEggPlayerLevel != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxEggPlayerLevel);
      }
      if (MaxEncounterPlayerLevel != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxEncounterPlayerLevel);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += rankNum_.CalculateSize(_repeated_rankNum_codec);
      size += requiredExperience_.CalculateSize(_repeated_requiredExperience_codec);
      size += cpMultiplier_.CalculateSize(_repeated_cpMultiplier_codec);
      if (MaxEggPlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEggPlayerLevel);
      }
      if (MaxEncounterPlayerLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxEncounterPlayerLevel);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerLevelSettings other) {
      if (other == null) {
        return;
      }
      rankNum_.Add(other.rankNum_);
      requiredExperience_.Add(other.requiredExperience_);
      cpMultiplier_.Add(other.cpMultiplier_);
      if (other.MaxEggPlayerLevel != 0) {
        MaxEggPlayerLevel = other.MaxEggPlayerLevel;
      }
      if (other.MaxEncounterPlayerLevel != 0) {
        MaxEncounterPlayerLevel = other.MaxEncounterPlayerLevel;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            rankNum_.AddEntriesFrom(input, _repeated_rankNum_codec);
            break;
          }
          case 18:
          case 16: {
            requiredExperience_.AddEntriesFrom(input, _repeated_requiredExperience_codec);
            break;
          }
          case 26:
          case 29: {
            cpMultiplier_.AddEntriesFrom(input, _repeated_cpMultiplier_codec);
            break;
          }
          case 32: {
            MaxEggPlayerLevel = input.ReadInt32();
            break;
          }
          case 40: {
            MaxEncounterPlayerLevel = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class GymLevelSettings : pb::IMessage<GymLevelSettings> {
    private static readonly pb::MessageParser<GymLevelSettings> _parser = new pb::MessageParser<GymLevelSettings>(() => new GymLevelSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GymLevelSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymLevelSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymLevelSettings(GymLevelSettings other) : this() {
      requiredExperience_ = other.requiredExperience_.Clone();
      leaderSlots_ = other.leaderSlots_.Clone();
      trainerSlots_ = other.trainerSlots_.Clone();
      searchRollBonus_ = other.searchRollBonus_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GymLevelSettings Clone() {
      return new GymLevelSettings(this);
    }

    /// <summary>Field number for the "required_experience" field.</summary>
    public const int RequiredExperienceFieldNumber = 1;
    private static readonly pb::FieldCodec<int> _repeated_requiredExperience_codec
        = pb::FieldCodec.ForInt32(10);
    private readonly pbc::RepeatedField<int> requiredExperience_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> RequiredExperience {
      get { return requiredExperience_; }
    }

    /// <summary>Field number for the "leader_slots" field.</summary>
    public const int LeaderSlotsFieldNumber = 2;
    private static readonly pb::FieldCodec<int> _repeated_leaderSlots_codec
        = pb::FieldCodec.ForInt32(18);
    private readonly pbc::RepeatedField<int> leaderSlots_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> LeaderSlots {
      get { return leaderSlots_; }
    }

    /// <summary>Field number for the "trainer_slots" field.</summary>
    public const int TrainerSlotsFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_trainerSlots_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> trainerSlots_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> TrainerSlots {
      get { return trainerSlots_; }
    }

    /// <summary>Field number for the "search_roll_bonus" field.</summary>
    public const int SearchRollBonusFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_searchRollBonus_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> searchRollBonus_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<int> SearchRollBonus {
      get { return searchRollBonus_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GymLevelSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GymLevelSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!requiredExperience_.Equals(other.requiredExperience_)) return false;
      if(!leaderSlots_.Equals(other.leaderSlots_)) return false;
      if(!trainerSlots_.Equals(other.trainerSlots_)) return false;
      if(!searchRollBonus_.Equals(other.searchRollBonus_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= requiredExperience_.GetHashCode();
      hash ^= leaderSlots_.GetHashCode();
      hash ^= trainerSlots_.GetHashCode();
      hash ^= searchRollBonus_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      requiredExperience_.WriteTo(output, _repeated_requiredExperience_codec);
      leaderSlots_.WriteTo(output, _repeated_leaderSlots_codec);
      trainerSlots_.WriteTo(output, _repeated_trainerSlots_codec);
      searchRollBonus_.WriteTo(output, _repeated_searchRollBonus_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += requiredExperience_.CalculateSize(_repeated_requiredExperience_codec);
      size += leaderSlots_.CalculateSize(_repeated_leaderSlots_codec);
      size += trainerSlots_.CalculateSize(_repeated_trainerSlots_codec);
      size += searchRollBonus_.CalculateSize(_repeated_searchRollBonus_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GymLevelSettings other) {
      if (other == null) {
        return;
      }
      requiredExperience_.Add(other.requiredExperience_);
      leaderSlots_.Add(other.leaderSlots_);
      trainerSlots_.Add(other.trainerSlots_);
      searchRollBonus_.Add(other.searchRollBonus_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            requiredExperience_.AddEntriesFrom(input, _repeated_requiredExperience_codec);
            break;
          }
          case 18:
          case 16: {
            leaderSlots_.AddEntriesFrom(input, _repeated_leaderSlots_codec);
            break;
          }
          case 26:
          case 24: {
            trainerSlots_.AddEntriesFrom(input, _repeated_trainerSlots_codec);
            break;
          }
          case 34:
          case 32: {
            searchRollBonus_.AddEntriesFrom(input, _repeated_searchRollBonus_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TypeEffectiveSettings : pb::IMessage<TypeEffectiveSettings> {
    private static readonly pb::MessageParser<TypeEffectiveSettings> _parser = new pb::MessageParser<TypeEffectiveSettings>(() => new TypeEffectiveSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TypeEffectiveSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeEffectiveSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeEffectiveSettings(TypeEffectiveSettings other) : this() {
      attackScalar_ = other.attackScalar_.Clone();
      attackType_ = other.attackType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TypeEffectiveSettings Clone() {
      return new TypeEffectiveSettings(this);
    }

    /// <summary>Field number for the "attack_scalar" field.</summary>
    public const int AttackScalarFieldNumber = 1;
    private static readonly pb::FieldCodec<float> _repeated_attackScalar_codec
        = pb::FieldCodec.ForFloat(10);
    private readonly pbc::RepeatedField<float> attackScalar_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> AttackScalar {
      get { return attackScalar_; }
    }

    /// <summary>Field number for the "attack_type" field.</summary>
    public const int AttackTypeFieldNumber = 2;
    private global::POGOProtos.Enums.PokemonType attackType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonType AttackType {
      get { return attackType_; }
      set {
        attackType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TypeEffectiveSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TypeEffectiveSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!attackScalar_.Equals(other.attackScalar_)) return false;
      if (AttackType != other.AttackType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= attackScalar_.GetHashCode();
      if (AttackType != 0) hash ^= AttackType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      attackScalar_.WriteTo(output, _repeated_attackScalar_codec);
      if (AttackType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) AttackType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += attackScalar_.CalculateSize(_repeated_attackScalar_codec);
      if (AttackType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) AttackType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TypeEffectiveSettings other) {
      if (other == null) {
        return;
      }
      attackScalar_.Add(other.attackScalar_);
      if (other.AttackType != 0) {
        AttackType = other.AttackType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 13: {
            attackScalar_.AddEntriesFrom(input, _repeated_attackScalar_codec);
            break;
          }
          case 16: {
            attackType_ = (global::POGOProtos.Enums.PokemonType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EncounterSettings : pb::IMessage<EncounterSettings> {
    private static readonly pb::MessageParser<EncounterSettings> _parser = new pb::MessageParser<EncounterSettings>(() => new EncounterSettings());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncounterSettings> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.POGOProtosSettingsMasterReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncounterSettings() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncounterSettings(EncounterSettings other) : this() {
      spinBonusThreshold_ = other.spinBonusThreshold_;
      excellentThrowThreshold_ = other.excellentThrowThreshold_;
      greatThrowThreshold_ = other.greatThrowThreshold_;
      niceThrowThreshold_ = other.niceThrowThreshold_;
      milestoneThreshold_ = other.milestoneThreshold_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncounterSettings Clone() {
      return new EncounterSettings(this);
    }

    /// <summary>Field number for the "spin_bonus_threshold" field.</summary>
    public const int SpinBonusThresholdFieldNumber = 1;
    private float spinBonusThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float SpinBonusThreshold {
      get { return spinBonusThreshold_; }
      set {
        spinBonusThreshold_ = value;
      }
    }

    /// <summary>Field number for the "excellent_throw_threshold" field.</summary>
    public const int ExcellentThrowThresholdFieldNumber = 2;
    private float excellentThrowThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ExcellentThrowThreshold {
      get { return excellentThrowThreshold_; }
      set {
        excellentThrowThreshold_ = value;
      }
    }

    /// <summary>Field number for the "great_throw_threshold" field.</summary>
    public const int GreatThrowThresholdFieldNumber = 3;
    private float greatThrowThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GreatThrowThreshold {
      get { return greatThrowThreshold_; }
      set {
        greatThrowThreshold_ = value;
      }
    }

    /// <summary>Field number for the "nice_throw_threshold" field.</summary>
    public const int NiceThrowThresholdFieldNumber = 4;
    private float niceThrowThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float NiceThrowThreshold {
      get { return niceThrowThreshold_; }
      set {
        niceThrowThreshold_ = value;
      }
    }

    /// <summary>Field number for the "milestone_threshold" field.</summary>
    public const int MilestoneThresholdFieldNumber = 5;
    private int milestoneThreshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MilestoneThreshold {
      get { return milestoneThreshold_; }
      set {
        milestoneThreshold_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncounterSettings);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncounterSettings other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpinBonusThreshold != other.SpinBonusThreshold) return false;
      if (ExcellentThrowThreshold != other.ExcellentThrowThreshold) return false;
      if (GreatThrowThreshold != other.GreatThrowThreshold) return false;
      if (NiceThrowThreshold != other.NiceThrowThreshold) return false;
      if (MilestoneThreshold != other.MilestoneThreshold) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpinBonusThreshold != 0F) hash ^= SpinBonusThreshold.GetHashCode();
      if (ExcellentThrowThreshold != 0F) hash ^= ExcellentThrowThreshold.GetHashCode();
      if (GreatThrowThreshold != 0F) hash ^= GreatThrowThreshold.GetHashCode();
      if (NiceThrowThreshold != 0F) hash ^= NiceThrowThreshold.GetHashCode();
      if (MilestoneThreshold != 0) hash ^= MilestoneThreshold.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (SpinBonusThreshold != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(SpinBonusThreshold);
      }
      if (ExcellentThrowThreshold != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(ExcellentThrowThreshold);
      }
      if (GreatThrowThreshold != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(GreatThrowThreshold);
      }
      if (NiceThrowThreshold != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(NiceThrowThreshold);
      }
      if (MilestoneThreshold != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MilestoneThreshold);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpinBonusThreshold != 0F) {
        size += 1 + 4;
      }
      if (ExcellentThrowThreshold != 0F) {
        size += 1 + 4;
      }
      if (GreatThrowThreshold != 0F) {
        size += 1 + 4;
      }
      if (NiceThrowThreshold != 0F) {
        size += 1 + 4;
      }
      if (MilestoneThreshold != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MilestoneThreshold);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncounterSettings other) {
      if (other == null) {
        return;
      }
      if (other.SpinBonusThreshold != 0F) {
        SpinBonusThreshold = other.SpinBonusThreshold;
      }
      if (other.ExcellentThrowThreshold != 0F) {
        ExcellentThrowThreshold = other.ExcellentThrowThreshold;
      }
      if (other.GreatThrowThreshold != 0F) {
        GreatThrowThreshold = other.GreatThrowThreshold;
      }
      if (other.NiceThrowThreshold != 0F) {
        NiceThrowThreshold = other.NiceThrowThreshold;
      }
      if (other.MilestoneThreshold != 0) {
        MilestoneThreshold = other.MilestoneThreshold;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            SpinBonusThreshold = input.ReadFloat();
            break;
          }
          case 21: {
            ExcellentThrowThreshold = input.ReadFloat();
            break;
          }
          case 29: {
            GreatThrowThreshold = input.ReadFloat();
            break;
          }
          case 37: {
            NiceThrowThreshold = input.ReadFloat();
            break;
          }
          case 40: {
            MilestoneThreshold = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
