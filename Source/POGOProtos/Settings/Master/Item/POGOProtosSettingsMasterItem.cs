// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Settings.Master.Item.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Settings.Master.Item {

  /// <summary>Holder for reflection information generated from POGOProtos.Settings.Master.Item.proto</summary>
  public static partial class POGOProtosSettingsMasterItemReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos.Settings.Master.Item.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static POGOProtosSettingsMasterItemReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQT0dPUHJvdG9zLlNldHRpbmdzLk1hc3Rlci5JdGVtLnByb3RvEh9QT0dP",
            "UHJvdG9zLlNldHRpbmdzLk1hc3Rlci5JdGVtGhZQT0dPUHJvdG9zLkVudW1z",
            "LnByb3RvGhpQT0dPUHJvdG9zLkludmVudG9yeS5wcm90byJiChZGb3J0TW9k",
            "aWZpZXJBdHRyaWJ1dGVzEiEKGW1vZGlmaWVyX2xpZmV0aW1lX3NlY29uZHMY",
            "ASABKAUSJQoddHJveV9kaXNrX251bV9wb2tlbW9uX3NwYXduZWQYAiABKAUi",
            "TQoZRXhwZXJpZW5jZUJvb3N0QXR0cmlidXRlcxIVCg14cF9tdWx0aXBsaWVy",
            "GAEgASgCEhkKEWJvb3N0X2R1cmF0aW9uX21zGAIgASgFIngKDkZvb2RBdHRy",
            "aWJ1dGVzEjEKC2l0ZW1fZWZmZWN0GAEgAygOMhwuUE9HT1Byb3Rvcy5FbnVt",
            "cy5JdGVtRWZmZWN0EhsKE2l0ZW1fZWZmZWN0X3BlcmNlbnQYAiADKAISFgoO",
            "Z3Jvd3RoX3BlcmNlbnQYAyABKAIiOwoQUG90aW9uQXR0cmlidXRlcxITCgtz",
            "dGFfcGVyY2VudBgBIAEoAhISCgpzdGFfYW1vdW50GAIgASgFIpUBChJQb2tl",
            "YmFsbEF0dHJpYnV0ZXMSMQoLaXRlbV9lZmZlY3QYASABKA4yHC5QT0dPUHJv",
            "dG9zLkVudW1zLkl0ZW1FZmZlY3QSFQoNY2FwdHVyZV9tdWx0aRgCIAEoAhIc",
            "ChRjYXB0dXJlX211bHRpX2VmZmVjdBgDIAEoAhIXCg9pdGVtX2VmZmVjdF9t",
            "b2QYBCABKAIiegoaSW52ZW50b3J5VXBncmFkZUF0dHJpYnV0ZXMSGgoSYWRk",
            "aXRpb25hbF9zdG9yYWdlGAEgASgFEkAKDHVwZ3JhZGVfdHlwZRgCIAEoDjIq",
            "LlBPR09Qcm90b3MuSW52ZW50b3J5LkludmVudG9yeVVwZ3JhZGVUeXBlIicK",
            "EEJhdHRsZUF0dHJpYnV0ZXMSEwoLc3RhX3BlcmNlbnQYASABKAIigwEKFkVn",
            "Z0luY3ViYXRvckF0dHJpYnV0ZXMSPgoOaW5jdWJhdG9yX3R5cGUYASABKA4y",
            "Ji5QT0dPUHJvdG9zLkludmVudG9yeS5FZ2dJbmN1YmF0b3JUeXBlEgwKBHVz",
            "ZXMYAiABKAUSGwoTZGlzdGFuY2VfbXVsdGlwbGllchgDIAEoAiLSAgoRSW5j",
            "ZW5zZUF0dHJpYnV0ZXMSIAoYaW5jZW5zZV9saWZldGltZV9zZWNvbmRzGAEg",
            "ASgFEjMKDHBva2Vtb25fdHlwZRgCIAMoDjIdLlBPR09Qcm90b3MuRW51bXMu",
            "UG9rZW1vblR5cGUSKAogcG9rZW1vbl9pbmNlbnNlX3R5cGVfcHJvYmFiaWxp",
            "dHkYAyABKAISMAooc3RhbmRpbmdfdGltZV9iZXR3ZWVuX2VuY291bnRlcnNf",
            "c2Vjb25kcxgEIAEoBRItCiVtb3ZpbmdfdGltZV9iZXR3ZWVuX2VuY291bnRl",
            "cl9zZWNvbmRzGAUgASgFEjUKLWRpc3RhbmNlX3JlcXVpcmVkX2Zvcl9zaG9y",
            "dGVyX2ludGVydmFsX21ldGVycxgGIAEoBRIkChxwb2tlbW9uX2F0dHJhY3Rl",
            "ZF9sZW5ndGhfc2VjGAcgASgFIicKEFJldml2ZUF0dHJpYnV0ZXMSEwoLc3Rh",
            "X3BlcmNlbnQYASABKAJQAFABYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.POGOProtosEnumsReflection.Descriptor, global::POGOProtos.Inventory.POGOProtosInventoryReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.FortModifierAttributes), global::POGOProtos.Settings.Master.Item.FortModifierAttributes.Parser, new[]{ "ModifierLifetimeSeconds", "TroyDiskNumPokemonSpawned" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.ExperienceBoostAttributes), global::POGOProtos.Settings.Master.Item.ExperienceBoostAttributes.Parser, new[]{ "XpMultiplier", "BoostDurationMs" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.FoodAttributes), global::POGOProtos.Settings.Master.Item.FoodAttributes.Parser, new[]{ "ItemEffect", "ItemEffectPercent", "GrowthPercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.PotionAttributes), global::POGOProtos.Settings.Master.Item.PotionAttributes.Parser, new[]{ "StaPercent", "StaAmount" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.PokeballAttributes), global::POGOProtos.Settings.Master.Item.PokeballAttributes.Parser, new[]{ "ItemEffect", "CaptureMulti", "CaptureMultiEffect", "ItemEffectMod" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes), global::POGOProtos.Settings.Master.Item.InventoryUpgradeAttributes.Parser, new[]{ "AdditionalStorage", "UpgradeType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.BattleAttributes), global::POGOProtos.Settings.Master.Item.BattleAttributes.Parser, new[]{ "StaPercent" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.EggIncubatorAttributes), global::POGOProtos.Settings.Master.Item.EggIncubatorAttributes.Parser, new[]{ "IncubatorType", "Uses", "DistanceMultiplier" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.IncenseAttributes), global::POGOProtos.Settings.Master.Item.IncenseAttributes.Parser, new[]{ "IncenseLifetimeSeconds", "PokemonType", "PokemonIncenseTypeProbability", "StandingTimeBetweenEncountersSeconds", "MovingTimeBetweenEncounterSeconds", "DistanceRequiredForShorterIntervalMeters", "PokemonAttractedLengthSec" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Item.ReviveAttributes), global::POGOProtos.Settings.Master.Item.ReviveAttributes.Parser, new[]{ "StaPercent" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class FortModifierAttributes : pb::IMessage<FortModifierAttributes> {
    private static readonly pb::MessageParser<FortModifierAttributes> _parser = new pb::MessageParser<FortModifierAttributes>(() => new FortModifierAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FortModifierAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortModifierAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortModifierAttributes(FortModifierAttributes other) : this() {
      modifierLifetimeSeconds_ = other.modifierLifetimeSeconds_;
      troyDiskNumPokemonSpawned_ = other.troyDiskNumPokemonSpawned_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FortModifierAttributes Clone() {
      return new FortModifierAttributes(this);
    }

    /// <summary>Field number for the "modifier_lifetime_seconds" field.</summary>
    public const int ModifierLifetimeSecondsFieldNumber = 1;
    private int modifierLifetimeSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ModifierLifetimeSeconds {
      get { return modifierLifetimeSeconds_; }
      set {
        modifierLifetimeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "troy_disk_num_pokemon_spawned" field.</summary>
    public const int TroyDiskNumPokemonSpawnedFieldNumber = 2;
    private int troyDiskNumPokemonSpawned_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int TroyDiskNumPokemonSpawned {
      get { return troyDiskNumPokemonSpawned_; }
      set {
        troyDiskNumPokemonSpawned_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FortModifierAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FortModifierAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ModifierLifetimeSeconds != other.ModifierLifetimeSeconds) return false;
      if (TroyDiskNumPokemonSpawned != other.TroyDiskNumPokemonSpawned) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ModifierLifetimeSeconds != 0) hash ^= ModifierLifetimeSeconds.GetHashCode();
      if (TroyDiskNumPokemonSpawned != 0) hash ^= TroyDiskNumPokemonSpawned.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ModifierLifetimeSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(ModifierLifetimeSeconds);
      }
      if (TroyDiskNumPokemonSpawned != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TroyDiskNumPokemonSpawned);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ModifierLifetimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModifierLifetimeSeconds);
      }
      if (TroyDiskNumPokemonSpawned != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TroyDiskNumPokemonSpawned);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FortModifierAttributes other) {
      if (other == null) {
        return;
      }
      if (other.ModifierLifetimeSeconds != 0) {
        ModifierLifetimeSeconds = other.ModifierLifetimeSeconds;
      }
      if (other.TroyDiskNumPokemonSpawned != 0) {
        TroyDiskNumPokemonSpawned = other.TroyDiskNumPokemonSpawned;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ModifierLifetimeSeconds = input.ReadInt32();
            break;
          }
          case 16: {
            TroyDiskNumPokemonSpawned = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ExperienceBoostAttributes : pb::IMessage<ExperienceBoostAttributes> {
    private static readonly pb::MessageParser<ExperienceBoostAttributes> _parser = new pb::MessageParser<ExperienceBoostAttributes>(() => new ExperienceBoostAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ExperienceBoostAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceBoostAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceBoostAttributes(ExperienceBoostAttributes other) : this() {
      xpMultiplier_ = other.xpMultiplier_;
      boostDurationMs_ = other.boostDurationMs_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ExperienceBoostAttributes Clone() {
      return new ExperienceBoostAttributes(this);
    }

    /// <summary>Field number for the "xp_multiplier" field.</summary>
    public const int XpMultiplierFieldNumber = 1;
    private float xpMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float XpMultiplier {
      get { return xpMultiplier_; }
      set {
        xpMultiplier_ = value;
      }
    }

    /// <summary>Field number for the "boost_duration_ms" field.</summary>
    public const int BoostDurationMsFieldNumber = 2;
    private int boostDurationMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BoostDurationMs {
      get { return boostDurationMs_; }
      set {
        boostDurationMs_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ExperienceBoostAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ExperienceBoostAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (XpMultiplier != other.XpMultiplier) return false;
      if (BoostDurationMs != other.BoostDurationMs) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (XpMultiplier != 0F) hash ^= XpMultiplier.GetHashCode();
      if (BoostDurationMs != 0) hash ^= BoostDurationMs.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (XpMultiplier != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(XpMultiplier);
      }
      if (BoostDurationMs != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BoostDurationMs);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (XpMultiplier != 0F) {
        size += 1 + 4;
      }
      if (BoostDurationMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BoostDurationMs);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ExperienceBoostAttributes other) {
      if (other == null) {
        return;
      }
      if (other.XpMultiplier != 0F) {
        XpMultiplier = other.XpMultiplier;
      }
      if (other.BoostDurationMs != 0) {
        BoostDurationMs = other.BoostDurationMs;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            XpMultiplier = input.ReadFloat();
            break;
          }
          case 16: {
            BoostDurationMs = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class FoodAttributes : pb::IMessage<FoodAttributes> {
    private static readonly pb::MessageParser<FoodAttributes> _parser = new pb::MessageParser<FoodAttributes>(() => new FoodAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<FoodAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FoodAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FoodAttributes(FoodAttributes other) : this() {
      itemEffect_ = other.itemEffect_.Clone();
      itemEffectPercent_ = other.itemEffectPercent_.Clone();
      growthPercent_ = other.growthPercent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public FoodAttributes Clone() {
      return new FoodAttributes(this);
    }

    /// <summary>Field number for the "item_effect" field.</summary>
    public const int ItemEffectFieldNumber = 1;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.ItemEffect> _repeated_itemEffect_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::POGOProtos.Enums.ItemEffect) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.ItemEffect> itemEffect_ = new pbc::RepeatedField<global::POGOProtos.Enums.ItemEffect>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.ItemEffect> ItemEffect {
      get { return itemEffect_; }
    }

    /// <summary>Field number for the "item_effect_percent" field.</summary>
    public const int ItemEffectPercentFieldNumber = 2;
    private static readonly pb::FieldCodec<float> _repeated_itemEffectPercent_codec
        = pb::FieldCodec.ForFloat(18);
    private readonly pbc::RepeatedField<float> itemEffectPercent_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<float> ItemEffectPercent {
      get { return itemEffectPercent_; }
    }

    /// <summary>Field number for the "growth_percent" field.</summary>
    public const int GrowthPercentFieldNumber = 3;
    private float growthPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float GrowthPercent {
      get { return growthPercent_; }
      set {
        growthPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as FoodAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(FoodAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!itemEffect_.Equals(other.itemEffect_)) return false;
      if(!itemEffectPercent_.Equals(other.itemEffectPercent_)) return false;
      if (GrowthPercent != other.GrowthPercent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= itemEffect_.GetHashCode();
      hash ^= itemEffectPercent_.GetHashCode();
      if (GrowthPercent != 0F) hash ^= GrowthPercent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      itemEffect_.WriteTo(output, _repeated_itemEffect_codec);
      itemEffectPercent_.WriteTo(output, _repeated_itemEffectPercent_codec);
      if (GrowthPercent != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(GrowthPercent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += itemEffect_.CalculateSize(_repeated_itemEffect_codec);
      size += itemEffectPercent_.CalculateSize(_repeated_itemEffectPercent_codec);
      if (GrowthPercent != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(FoodAttributes other) {
      if (other == null) {
        return;
      }
      itemEffect_.Add(other.itemEffect_);
      itemEffectPercent_.Add(other.itemEffectPercent_);
      if (other.GrowthPercent != 0F) {
        GrowthPercent = other.GrowthPercent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            itemEffect_.AddEntriesFrom(input, _repeated_itemEffect_codec);
            break;
          }
          case 18:
          case 21: {
            itemEffectPercent_.AddEntriesFrom(input, _repeated_itemEffectPercent_codec);
            break;
          }
          case 29: {
            GrowthPercent = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PotionAttributes : pb::IMessage<PotionAttributes> {
    private static readonly pb::MessageParser<PotionAttributes> _parser = new pb::MessageParser<PotionAttributes>(() => new PotionAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PotionAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotionAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotionAttributes(PotionAttributes other) : this() {
      staPercent_ = other.staPercent_;
      staAmount_ = other.staAmount_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PotionAttributes Clone() {
      return new PotionAttributes(this);
    }

    /// <summary>Field number for the "sta_percent" field.</summary>
    public const int StaPercentFieldNumber = 1;
    private float staPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaPercent {
      get { return staPercent_; }
      set {
        staPercent_ = value;
      }
    }

    /// <summary>Field number for the "sta_amount" field.</summary>
    public const int StaAmountFieldNumber = 2;
    private int staAmount_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StaAmount {
      get { return staAmount_; }
      set {
        staAmount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PotionAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PotionAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaPercent != other.StaPercent) return false;
      if (StaAmount != other.StaAmount) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StaPercent != 0F) hash ^= StaPercent.GetHashCode();
      if (StaAmount != 0) hash ^= StaAmount.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StaPercent != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StaPercent);
      }
      if (StaAmount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StaAmount);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StaPercent != 0F) {
        size += 1 + 4;
      }
      if (StaAmount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StaAmount);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PotionAttributes other) {
      if (other == null) {
        return;
      }
      if (other.StaPercent != 0F) {
        StaPercent = other.StaPercent;
      }
      if (other.StaAmount != 0) {
        StaAmount = other.StaAmount;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            StaPercent = input.ReadFloat();
            break;
          }
          case 16: {
            StaAmount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class PokeballAttributes : pb::IMessage<PokeballAttributes> {
    private static readonly pb::MessageParser<PokeballAttributes> _parser = new pb::MessageParser<PokeballAttributes>(() => new PokeballAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PokeballAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeballAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeballAttributes(PokeballAttributes other) : this() {
      itemEffect_ = other.itemEffect_;
      captureMulti_ = other.captureMulti_;
      captureMultiEffect_ = other.captureMultiEffect_;
      itemEffectMod_ = other.itemEffectMod_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PokeballAttributes Clone() {
      return new PokeballAttributes(this);
    }

    /// <summary>Field number for the "item_effect" field.</summary>
    public const int ItemEffectFieldNumber = 1;
    private global::POGOProtos.Enums.ItemEffect itemEffect_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.ItemEffect ItemEffect {
      get { return itemEffect_; }
      set {
        itemEffect_ = value;
      }
    }

    /// <summary>Field number for the "capture_multi" field.</summary>
    public const int CaptureMultiFieldNumber = 2;
    private float captureMulti_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CaptureMulti {
      get { return captureMulti_; }
      set {
        captureMulti_ = value;
      }
    }

    /// <summary>Field number for the "capture_multi_effect" field.</summary>
    public const int CaptureMultiEffectFieldNumber = 3;
    private float captureMultiEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CaptureMultiEffect {
      get { return captureMultiEffect_; }
      set {
        captureMultiEffect_ = value;
      }
    }

    /// <summary>Field number for the "item_effect_mod" field.</summary>
    public const int ItemEffectModFieldNumber = 4;
    private float itemEffectMod_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ItemEffectMod {
      get { return itemEffectMod_; }
      set {
        itemEffectMod_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PokeballAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PokeballAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ItemEffect != other.ItemEffect) return false;
      if (CaptureMulti != other.CaptureMulti) return false;
      if (CaptureMultiEffect != other.CaptureMultiEffect) return false;
      if (ItemEffectMod != other.ItemEffectMod) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ItemEffect != 0) hash ^= ItemEffect.GetHashCode();
      if (CaptureMulti != 0F) hash ^= CaptureMulti.GetHashCode();
      if (CaptureMultiEffect != 0F) hash ^= CaptureMultiEffect.GetHashCode();
      if (ItemEffectMod != 0F) hash ^= ItemEffectMod.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ItemEffect != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) ItemEffect);
      }
      if (CaptureMulti != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CaptureMulti);
      }
      if (CaptureMultiEffect != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CaptureMultiEffect);
      }
      if (ItemEffectMod != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(ItemEffectMod);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ItemEffect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ItemEffect);
      }
      if (CaptureMulti != 0F) {
        size += 1 + 4;
      }
      if (CaptureMultiEffect != 0F) {
        size += 1 + 4;
      }
      if (ItemEffectMod != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PokeballAttributes other) {
      if (other == null) {
        return;
      }
      if (other.ItemEffect != 0) {
        ItemEffect = other.ItemEffect;
      }
      if (other.CaptureMulti != 0F) {
        CaptureMulti = other.CaptureMulti;
      }
      if (other.CaptureMultiEffect != 0F) {
        CaptureMultiEffect = other.CaptureMultiEffect;
      }
      if (other.ItemEffectMod != 0F) {
        ItemEffectMod = other.ItemEffectMod;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            itemEffect_ = (global::POGOProtos.Enums.ItemEffect) input.ReadEnum();
            break;
          }
          case 21: {
            CaptureMulti = input.ReadFloat();
            break;
          }
          case 29: {
            CaptureMultiEffect = input.ReadFloat();
            break;
          }
          case 37: {
            ItemEffectMod = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class InventoryUpgradeAttributes : pb::IMessage<InventoryUpgradeAttributes> {
    private static readonly pb::MessageParser<InventoryUpgradeAttributes> _parser = new pb::MessageParser<InventoryUpgradeAttributes>(() => new InventoryUpgradeAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<InventoryUpgradeAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryUpgradeAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryUpgradeAttributes(InventoryUpgradeAttributes other) : this() {
      additionalStorage_ = other.additionalStorage_;
      upgradeType_ = other.upgradeType_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public InventoryUpgradeAttributes Clone() {
      return new InventoryUpgradeAttributes(this);
    }

    /// <summary>Field number for the "additional_storage" field.</summary>
    public const int AdditionalStorageFieldNumber = 1;
    private int additionalStorage_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int AdditionalStorage {
      get { return additionalStorage_; }
      set {
        additionalStorage_ = value;
      }
    }

    /// <summary>Field number for the "upgrade_type" field.</summary>
    public const int UpgradeTypeFieldNumber = 2;
    private global::POGOProtos.Inventory.InventoryUpgradeType upgradeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.InventoryUpgradeType UpgradeType {
      get { return upgradeType_; }
      set {
        upgradeType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as InventoryUpgradeAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(InventoryUpgradeAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (AdditionalStorage != other.AdditionalStorage) return false;
      if (UpgradeType != other.UpgradeType) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (AdditionalStorage != 0) hash ^= AdditionalStorage.GetHashCode();
      if (UpgradeType != 0) hash ^= UpgradeType.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (AdditionalStorage != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(AdditionalStorage);
      }
      if (UpgradeType != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) UpgradeType);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (AdditionalStorage != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdditionalStorage);
      }
      if (UpgradeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) UpgradeType);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(InventoryUpgradeAttributes other) {
      if (other == null) {
        return;
      }
      if (other.AdditionalStorage != 0) {
        AdditionalStorage = other.AdditionalStorage;
      }
      if (other.UpgradeType != 0) {
        UpgradeType = other.UpgradeType;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            AdditionalStorage = input.ReadInt32();
            break;
          }
          case 16: {
            upgradeType_ = (global::POGOProtos.Inventory.InventoryUpgradeType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public sealed partial class BattleAttributes : pb::IMessage<BattleAttributes> {
    private static readonly pb::MessageParser<BattleAttributes> _parser = new pb::MessageParser<BattleAttributes>(() => new BattleAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<BattleAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleAttributes(BattleAttributes other) : this() {
      staPercent_ = other.staPercent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public BattleAttributes Clone() {
      return new BattleAttributes(this);
    }

    /// <summary>Field number for the "sta_percent" field.</summary>
    public const int StaPercentFieldNumber = 1;
    private float staPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaPercent {
      get { return staPercent_; }
      set {
        staPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as BattleAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(BattleAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaPercent != other.StaPercent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StaPercent != 0F) hash ^= StaPercent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StaPercent != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StaPercent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StaPercent != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(BattleAttributes other) {
      if (other == null) {
        return;
      }
      if (other.StaPercent != 0F) {
        StaPercent = other.StaPercent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            StaPercent = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EggIncubatorAttributes : pb::IMessage<EggIncubatorAttributes> {
    private static readonly pb::MessageParser<EggIncubatorAttributes> _parser = new pb::MessageParser<EggIncubatorAttributes>(() => new EggIncubatorAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EggIncubatorAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggIncubatorAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggIncubatorAttributes(EggIncubatorAttributes other) : this() {
      incubatorType_ = other.incubatorType_;
      uses_ = other.uses_;
      distanceMultiplier_ = other.distanceMultiplier_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EggIncubatorAttributes Clone() {
      return new EggIncubatorAttributes(this);
    }

    /// <summary>Field number for the "incubator_type" field.</summary>
    public const int IncubatorTypeFieldNumber = 1;
    private global::POGOProtos.Inventory.EggIncubatorType incubatorType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Inventory.EggIncubatorType IncubatorType {
      get { return incubatorType_; }
      set {
        incubatorType_ = value;
      }
    }

    /// <summary>Field number for the "uses" field.</summary>
    public const int UsesFieldNumber = 2;
    private int uses_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Uses {
      get { return uses_; }
      set {
        uses_ = value;
      }
    }

    /// <summary>Field number for the "distance_multiplier" field.</summary>
    public const int DistanceMultiplierFieldNumber = 3;
    private float distanceMultiplier_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DistanceMultiplier {
      get { return distanceMultiplier_; }
      set {
        distanceMultiplier_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EggIncubatorAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EggIncubatorAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncubatorType != other.IncubatorType) return false;
      if (Uses != other.Uses) return false;
      if (DistanceMultiplier != other.DistanceMultiplier) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncubatorType != 0) hash ^= IncubatorType.GetHashCode();
      if (Uses != 0) hash ^= Uses.GetHashCode();
      if (DistanceMultiplier != 0F) hash ^= DistanceMultiplier.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncubatorType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) IncubatorType);
      }
      if (Uses != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Uses);
      }
      if (DistanceMultiplier != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(DistanceMultiplier);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncubatorType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) IncubatorType);
      }
      if (Uses != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Uses);
      }
      if (DistanceMultiplier != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EggIncubatorAttributes other) {
      if (other == null) {
        return;
      }
      if (other.IncubatorType != 0) {
        IncubatorType = other.IncubatorType;
      }
      if (other.Uses != 0) {
        Uses = other.Uses;
      }
      if (other.DistanceMultiplier != 0F) {
        DistanceMultiplier = other.DistanceMultiplier;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            incubatorType_ = (global::POGOProtos.Inventory.EggIncubatorType) input.ReadEnum();
            break;
          }
          case 16: {
            Uses = input.ReadInt32();
            break;
          }
          case 29: {
            DistanceMultiplier = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class IncenseAttributes : pb::IMessage<IncenseAttributes> {
    private static readonly pb::MessageParser<IncenseAttributes> _parser = new pb::MessageParser<IncenseAttributes>(() => new IncenseAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IncenseAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncenseAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncenseAttributes(IncenseAttributes other) : this() {
      incenseLifetimeSeconds_ = other.incenseLifetimeSeconds_;
      pokemonType_ = other.pokemonType_.Clone();
      pokemonIncenseTypeProbability_ = other.pokemonIncenseTypeProbability_;
      standingTimeBetweenEncountersSeconds_ = other.standingTimeBetweenEncountersSeconds_;
      movingTimeBetweenEncounterSeconds_ = other.movingTimeBetweenEncounterSeconds_;
      distanceRequiredForShorterIntervalMeters_ = other.distanceRequiredForShorterIntervalMeters_;
      pokemonAttractedLengthSec_ = other.pokemonAttractedLengthSec_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IncenseAttributes Clone() {
      return new IncenseAttributes(this);
    }

    /// <summary>Field number for the "incense_lifetime_seconds" field.</summary>
    public const int IncenseLifetimeSecondsFieldNumber = 1;
    private int incenseLifetimeSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int IncenseLifetimeSeconds {
      get { return incenseLifetimeSeconds_; }
      set {
        incenseLifetimeSeconds_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_type" field.</summary>
    public const int PokemonTypeFieldNumber = 2;
    private static readonly pb::FieldCodec<global::POGOProtos.Enums.PokemonType> _repeated_pokemonType_codec
        = pb::FieldCodec.ForEnum(18, x => (int) x, x => (global::POGOProtos.Enums.PokemonType) x);
    private readonly pbc::RepeatedField<global::POGOProtos.Enums.PokemonType> pokemonType_ = new pbc::RepeatedField<global::POGOProtos.Enums.PokemonType>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Enums.PokemonType> PokemonType {
      get { return pokemonType_; }
    }

    /// <summary>Field number for the "pokemon_incense_type_probability" field.</summary>
    public const int PokemonIncenseTypeProbabilityFieldNumber = 3;
    private float pokemonIncenseTypeProbability_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float PokemonIncenseTypeProbability {
      get { return pokemonIncenseTypeProbability_; }
      set {
        pokemonIncenseTypeProbability_ = value;
      }
    }

    /// <summary>Field number for the "standing_time_between_encounters_seconds" field.</summary>
    public const int StandingTimeBetweenEncountersSecondsFieldNumber = 4;
    private int standingTimeBetweenEncountersSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StandingTimeBetweenEncountersSeconds {
      get { return standingTimeBetweenEncountersSeconds_; }
      set {
        standingTimeBetweenEncountersSeconds_ = value;
      }
    }

    /// <summary>Field number for the "moving_time_between_encounter_seconds" field.</summary>
    public const int MovingTimeBetweenEncounterSecondsFieldNumber = 5;
    private int movingTimeBetweenEncounterSeconds_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int MovingTimeBetweenEncounterSeconds {
      get { return movingTimeBetweenEncounterSeconds_; }
      set {
        movingTimeBetweenEncounterSeconds_ = value;
      }
    }

    /// <summary>Field number for the "distance_required_for_shorter_interval_meters" field.</summary>
    public const int DistanceRequiredForShorterIntervalMetersFieldNumber = 6;
    private int distanceRequiredForShorterIntervalMeters_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DistanceRequiredForShorterIntervalMeters {
      get { return distanceRequiredForShorterIntervalMeters_; }
      set {
        distanceRequiredForShorterIntervalMeters_ = value;
      }
    }

    /// <summary>Field number for the "pokemon_attracted_length_sec" field.</summary>
    public const int PokemonAttractedLengthSecFieldNumber = 7;
    private int pokemonAttractedLengthSec_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int PokemonAttractedLengthSec {
      get { return pokemonAttractedLengthSec_; }
      set {
        pokemonAttractedLengthSec_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IncenseAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IncenseAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IncenseLifetimeSeconds != other.IncenseLifetimeSeconds) return false;
      if(!pokemonType_.Equals(other.pokemonType_)) return false;
      if (PokemonIncenseTypeProbability != other.PokemonIncenseTypeProbability) return false;
      if (StandingTimeBetweenEncountersSeconds != other.StandingTimeBetweenEncountersSeconds) return false;
      if (MovingTimeBetweenEncounterSeconds != other.MovingTimeBetweenEncounterSeconds) return false;
      if (DistanceRequiredForShorterIntervalMeters != other.DistanceRequiredForShorterIntervalMeters) return false;
      if (PokemonAttractedLengthSec != other.PokemonAttractedLengthSec) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IncenseLifetimeSeconds != 0) hash ^= IncenseLifetimeSeconds.GetHashCode();
      hash ^= pokemonType_.GetHashCode();
      if (PokemonIncenseTypeProbability != 0F) hash ^= PokemonIncenseTypeProbability.GetHashCode();
      if (StandingTimeBetweenEncountersSeconds != 0) hash ^= StandingTimeBetweenEncountersSeconds.GetHashCode();
      if (MovingTimeBetweenEncounterSeconds != 0) hash ^= MovingTimeBetweenEncounterSeconds.GetHashCode();
      if (DistanceRequiredForShorterIntervalMeters != 0) hash ^= DistanceRequiredForShorterIntervalMeters.GetHashCode();
      if (PokemonAttractedLengthSec != 0) hash ^= PokemonAttractedLengthSec.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IncenseLifetimeSeconds != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(IncenseLifetimeSeconds);
      }
      pokemonType_.WriteTo(output, _repeated_pokemonType_codec);
      if (PokemonIncenseTypeProbability != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(PokemonIncenseTypeProbability);
      }
      if (StandingTimeBetweenEncountersSeconds != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(StandingTimeBetweenEncountersSeconds);
      }
      if (MovingTimeBetweenEncounterSeconds != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MovingTimeBetweenEncounterSeconds);
      }
      if (DistanceRequiredForShorterIntervalMeters != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DistanceRequiredForShorterIntervalMeters);
      }
      if (PokemonAttractedLengthSec != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PokemonAttractedLengthSec);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IncenseLifetimeSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(IncenseLifetimeSeconds);
      }
      size += pokemonType_.CalculateSize(_repeated_pokemonType_codec);
      if (PokemonIncenseTypeProbability != 0F) {
        size += 1 + 4;
      }
      if (StandingTimeBetweenEncountersSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StandingTimeBetweenEncountersSeconds);
      }
      if (MovingTimeBetweenEncounterSeconds != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovingTimeBetweenEncounterSeconds);
      }
      if (DistanceRequiredForShorterIntervalMeters != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistanceRequiredForShorterIntervalMeters);
      }
      if (PokemonAttractedLengthSec != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PokemonAttractedLengthSec);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IncenseAttributes other) {
      if (other == null) {
        return;
      }
      if (other.IncenseLifetimeSeconds != 0) {
        IncenseLifetimeSeconds = other.IncenseLifetimeSeconds;
      }
      pokemonType_.Add(other.pokemonType_);
      if (other.PokemonIncenseTypeProbability != 0F) {
        PokemonIncenseTypeProbability = other.PokemonIncenseTypeProbability;
      }
      if (other.StandingTimeBetweenEncountersSeconds != 0) {
        StandingTimeBetweenEncountersSeconds = other.StandingTimeBetweenEncountersSeconds;
      }
      if (other.MovingTimeBetweenEncounterSeconds != 0) {
        MovingTimeBetweenEncounterSeconds = other.MovingTimeBetweenEncounterSeconds;
      }
      if (other.DistanceRequiredForShorterIntervalMeters != 0) {
        DistanceRequiredForShorterIntervalMeters = other.DistanceRequiredForShorterIntervalMeters;
      }
      if (other.PokemonAttractedLengthSec != 0) {
        PokemonAttractedLengthSec = other.PokemonAttractedLengthSec;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IncenseLifetimeSeconds = input.ReadInt32();
            break;
          }
          case 18:
          case 16: {
            pokemonType_.AddEntriesFrom(input, _repeated_pokemonType_codec);
            break;
          }
          case 29: {
            PokemonIncenseTypeProbability = input.ReadFloat();
            break;
          }
          case 32: {
            StandingTimeBetweenEncountersSeconds = input.ReadInt32();
            break;
          }
          case 40: {
            MovingTimeBetweenEncounterSeconds = input.ReadInt32();
            break;
          }
          case 48: {
            DistanceRequiredForShorterIntervalMeters = input.ReadInt32();
            break;
          }
          case 56: {
            PokemonAttractedLengthSec = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ReviveAttributes : pb::IMessage<ReviveAttributes> {
    private static readonly pb::MessageParser<ReviveAttributes> _parser = new pb::MessageParser<ReviveAttributes>(() => new ReviveAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ReviveAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Item.POGOProtosSettingsMasterItemReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviveAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviveAttributes(ReviveAttributes other) : this() {
      staPercent_ = other.staPercent_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ReviveAttributes Clone() {
      return new ReviveAttributes(this);
    }

    /// <summary>Field number for the "sta_percent" field.</summary>
    public const int StaPercentFieldNumber = 1;
    private float staPercent_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float StaPercent {
      get { return staPercent_; }
      set {
        staPercent_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ReviveAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ReviveAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StaPercent != other.StaPercent) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StaPercent != 0F) hash ^= StaPercent.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (StaPercent != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(StaPercent);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StaPercent != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ReviveAttributes other) {
      if (other == null) {
        return;
      }
      if (other.StaPercent != 0F) {
        StaPercent = other.StaPercent;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            StaPercent = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
