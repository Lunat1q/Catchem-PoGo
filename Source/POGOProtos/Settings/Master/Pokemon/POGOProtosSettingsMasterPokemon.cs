// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Settings.Master.Pokemon.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Settings.Master.Pokemon {

  /// <summary>Holder for reflection information generated from POGOProtos.Settings.Master.Pokemon.proto</summary>
  public static partial class POGOProtosSettingsMasterPokemonReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos.Settings.Master.Pokemon.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static POGOProtosSettingsMasterPokemonReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CihQT0dPUHJvdG9zLlNldHRpbmdzLk1hc3Rlci5Qb2tlbW9uLnByb3RvEiJQ",
            "T0dPUHJvdG9zLlNldHRpbmdzLk1hc3Rlci5Qb2tlbW9uGhZQT0dPUHJvdG9z",
            "LkVudW1zLnByb3RvIpcBChBDYW1lcmFBdHRyaWJ1dGVzEhUKDWRpc2tfcmFk",
            "aXVzX20YASABKAISGQoRY3lsaW5kZXJfcmFkaXVzX20YAiABKAISGQoRY3ls",
            "aW5kZXJfaGVpZ2h0X20YAyABKAISGQoRY3lsaW5kZXJfZ3JvdW5kX20YBCAB",
            "KAISGwoTc2hvdWxkZXJfbW9kZV9zY2FsZRgFIAEoAiJuCg9TdGF0c0F0dHJp",
            "YnV0ZXMSFAoMYmFzZV9zdGFtaW5hGAEgASgFEhMKC2Jhc2VfYXR0YWNrGAIg",
            "ASgFEhQKDGJhc2VfZGVmZW5zZRgDIAEoBRIaChJkb2RnZV9lbmVyZ3lfZGVs",
            "dGEYCCABKAUipgIKE0VuY291bnRlckF0dHJpYnV0ZXMSGQoRYmFzZV9jYXB0",
            "dXJlX3JhdGUYASABKAISFgoOYmFzZV9mbGVlX3JhdGUYAiABKAISGgoSY29s",
            "bGlzaW9uX3JhZGl1c19tGAMgASgCEhoKEmNvbGxpc2lvbl9oZWlnaHRfbRgE",
            "IAEoAhIfChdjb2xsaXNpb25faGVhZF9yYWRpdXNfbRgFIAEoAhI8Cg1tb3Zl",
            "bWVudF90eXBlGAYgASgOMiUuUE9HT1Byb3Rvcy5FbnVtcy5Qb2tlbW9uTW92",
            "ZW1lbnRUeXBlEhgKEG1vdmVtZW50X3RpbWVyX3MYByABKAISEwoLanVtcF90",
            "aW1lX3MYCCABKAISFgoOYXR0YWNrX3RpbWVyX3MYCSABKAJQAGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.POGOProtosEnumsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Pokemon.CameraAttributes), global::POGOProtos.Settings.Master.Pokemon.CameraAttributes.Parser, new[]{ "DiskRadiusM", "CylinderRadiusM", "CylinderHeightM", "CylinderGroundM", "ShoulderModeScale" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Pokemon.StatsAttributes), global::POGOProtos.Settings.Master.Pokemon.StatsAttributes.Parser, new[]{ "BaseStamina", "BaseAttack", "BaseDefense", "DodgeEnergyDelta" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Pokemon.EncounterAttributes), global::POGOProtos.Settings.Master.Pokemon.EncounterAttributes.Parser, new[]{ "BaseCaptureRate", "BaseFleeRate", "CollisionRadiusM", "CollisionHeightM", "CollisionHeadRadiusM", "MovementType", "MovementTimerS", "JumpTimeS", "AttackTimerS" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CameraAttributes : pb::IMessage<CameraAttributes> {
    private static readonly pb::MessageParser<CameraAttributes> _parser = new pb::MessageParser<CameraAttributes>(() => new CameraAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Pokemon.POGOProtosSettingsMasterPokemonReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAttributes(CameraAttributes other) : this() {
      diskRadiusM_ = other.diskRadiusM_;
      cylinderRadiusM_ = other.cylinderRadiusM_;
      cylinderHeightM_ = other.cylinderHeightM_;
      cylinderGroundM_ = other.cylinderGroundM_;
      shoulderModeScale_ = other.shoulderModeScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAttributes Clone() {
      return new CameraAttributes(this);
    }

    /// <summary>Field number for the "disk_radius_m" field.</summary>
    public const int DiskRadiusMFieldNumber = 1;
    private float diskRadiusM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DiskRadiusM {
      get { return diskRadiusM_; }
      set {
        diskRadiusM_ = value;
      }
    }

    /// <summary>Field number for the "cylinder_radius_m" field.</summary>
    public const int CylinderRadiusMFieldNumber = 2;
    private float cylinderRadiusM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CylinderRadiusM {
      get { return cylinderRadiusM_; }
      set {
        cylinderRadiusM_ = value;
      }
    }

    /// <summary>Field number for the "cylinder_height_m" field.</summary>
    public const int CylinderHeightMFieldNumber = 3;
    private float cylinderHeightM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CylinderHeightM {
      get { return cylinderHeightM_; }
      set {
        cylinderHeightM_ = value;
      }
    }

    /// <summary>Field number for the "cylinder_ground_m" field.</summary>
    public const int CylinderGroundMFieldNumber = 4;
    private float cylinderGroundM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CylinderGroundM {
      get { return cylinderGroundM_; }
      set {
        cylinderGroundM_ = value;
      }
    }

    /// <summary>Field number for the "shoulder_mode_scale" field.</summary>
    public const int ShoulderModeScaleFieldNumber = 5;
    private float shoulderModeScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShoulderModeScale {
      get { return shoulderModeScale_; }
      set {
        shoulderModeScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskRadiusM != other.DiskRadiusM) return false;
      if (CylinderRadiusM != other.CylinderRadiusM) return false;
      if (CylinderHeightM != other.CylinderHeightM) return false;
      if (CylinderGroundM != other.CylinderGroundM) return false;
      if (ShoulderModeScale != other.ShoulderModeScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskRadiusM != 0F) hash ^= DiskRadiusM.GetHashCode();
      if (CylinderRadiusM != 0F) hash ^= CylinderRadiusM.GetHashCode();
      if (CylinderHeightM != 0F) hash ^= CylinderHeightM.GetHashCode();
      if (CylinderGroundM != 0F) hash ^= CylinderGroundM.GetHashCode();
      if (ShoulderModeScale != 0F) hash ^= ShoulderModeScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskRadiusM != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DiskRadiusM);
      }
      if (CylinderRadiusM != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CylinderRadiusM);
      }
      if (CylinderHeightM != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CylinderHeightM);
      }
      if (CylinderGroundM != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CylinderGroundM);
      }
      if (ShoulderModeScale != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ShoulderModeScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskRadiusM != 0F) {
        size += 1 + 4;
      }
      if (CylinderRadiusM != 0F) {
        size += 1 + 4;
      }
      if (CylinderHeightM != 0F) {
        size += 1 + 4;
      }
      if (CylinderGroundM != 0F) {
        size += 1 + 4;
      }
      if (ShoulderModeScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraAttributes other) {
      if (other == null) {
        return;
      }
      if (other.DiskRadiusM != 0F) {
        DiskRadiusM = other.DiskRadiusM;
      }
      if (other.CylinderRadiusM != 0F) {
        CylinderRadiusM = other.CylinderRadiusM;
      }
      if (other.CylinderHeightM != 0F) {
        CylinderHeightM = other.CylinderHeightM;
      }
      if (other.CylinderGroundM != 0F) {
        CylinderGroundM = other.CylinderGroundM;
      }
      if (other.ShoulderModeScale != 0F) {
        ShoulderModeScale = other.ShoulderModeScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            DiskRadiusM = input.ReadFloat();
            break;
          }
          case 21: {
            CylinderRadiusM = input.ReadFloat();
            break;
          }
          case 29: {
            CylinderHeightM = input.ReadFloat();
            break;
          }
          case 37: {
            CylinderGroundM = input.ReadFloat();
            break;
          }
          case 45: {
            ShoulderModeScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public sealed partial class StatsAttributes : pb::IMessage<StatsAttributes> {
    private static readonly pb::MessageParser<StatsAttributes> _parser = new pb::MessageParser<StatsAttributes>(() => new StatsAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<StatsAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Pokemon.POGOProtosSettingsMasterPokemonReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsAttributes(StatsAttributes other) : this() {
      baseStamina_ = other.baseStamina_;
      baseAttack_ = other.baseAttack_;
      baseDefense_ = other.baseDefense_;
      dodgeEnergyDelta_ = other.dodgeEnergyDelta_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public StatsAttributes Clone() {
      return new StatsAttributes(this);
    }

    /// <summary>Field number for the "base_stamina" field.</summary>
    public const int BaseStaminaFieldNumber = 1;
    private int baseStamina_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseStamina {
      get { return baseStamina_; }
      set {
        baseStamina_ = value;
      }
    }

    /// <summary>Field number for the "base_attack" field.</summary>
    public const int BaseAttackFieldNumber = 2;
    private int baseAttack_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseAttack {
      get { return baseAttack_; }
      set {
        baseAttack_ = value;
      }
    }

    /// <summary>Field number for the "base_defense" field.</summary>
    public const int BaseDefenseFieldNumber = 3;
    private int baseDefense_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int BaseDefense {
      get { return baseDefense_; }
      set {
        baseDefense_ = value;
      }
    }

    /// <summary>Field number for the "dodge_energy_delta" field.</summary>
    public const int DodgeEnergyDeltaFieldNumber = 8;
    private int dodgeEnergyDelta_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DodgeEnergyDelta {
      get { return dodgeEnergyDelta_; }
      set {
        dodgeEnergyDelta_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as StatsAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(StatsAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseStamina != other.BaseStamina) return false;
      if (BaseAttack != other.BaseAttack) return false;
      if (BaseDefense != other.BaseDefense) return false;
      if (DodgeEnergyDelta != other.DodgeEnergyDelta) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseStamina != 0) hash ^= BaseStamina.GetHashCode();
      if (BaseAttack != 0) hash ^= BaseAttack.GetHashCode();
      if (BaseDefense != 0) hash ^= BaseDefense.GetHashCode();
      if (DodgeEnergyDelta != 0) hash ^= DodgeEnergyDelta.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseStamina != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(BaseStamina);
      }
      if (BaseAttack != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(BaseAttack);
      }
      if (BaseDefense != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(BaseDefense);
      }
      if (DodgeEnergyDelta != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DodgeEnergyDelta);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseStamina != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseStamina);
      }
      if (BaseAttack != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseAttack);
      }
      if (BaseDefense != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BaseDefense);
      }
      if (DodgeEnergyDelta != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DodgeEnergyDelta);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(StatsAttributes other) {
      if (other == null) {
        return;
      }
      if (other.BaseStamina != 0) {
        BaseStamina = other.BaseStamina;
      }
      if (other.BaseAttack != 0) {
        BaseAttack = other.BaseAttack;
      }
      if (other.BaseDefense != 0) {
        BaseDefense = other.BaseDefense;
      }
      if (other.DodgeEnergyDelta != 0) {
        DodgeEnergyDelta = other.DodgeEnergyDelta;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            BaseStamina = input.ReadInt32();
            break;
          }
          case 16: {
            BaseAttack = input.ReadInt32();
            break;
          }
          case 24: {
            BaseDefense = input.ReadInt32();
            break;
          }
          case 64: {
            DodgeEnergyDelta = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class EncounterAttributes : pb::IMessage<EncounterAttributes> {
    private static readonly pb::MessageParser<EncounterAttributes> _parser = new pb::MessageParser<EncounterAttributes>(() => new EncounterAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EncounterAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Pokemon.POGOProtosSettingsMasterPokemonReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncounterAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncounterAttributes(EncounterAttributes other) : this() {
      baseCaptureRate_ = other.baseCaptureRate_;
      baseFleeRate_ = other.baseFleeRate_;
      collisionRadiusM_ = other.collisionRadiusM_;
      collisionHeightM_ = other.collisionHeightM_;
      collisionHeadRadiusM_ = other.collisionHeadRadiusM_;
      movementType_ = other.movementType_;
      movementTimerS_ = other.movementTimerS_;
      jumpTimeS_ = other.jumpTimeS_;
      attackTimerS_ = other.attackTimerS_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EncounterAttributes Clone() {
      return new EncounterAttributes(this);
    }

    /// <summary>Field number for the "base_capture_rate" field.</summary>
    public const int BaseCaptureRateFieldNumber = 1;
    private float baseCaptureRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseCaptureRate {
      get { return baseCaptureRate_; }
      set {
        baseCaptureRate_ = value;
      }
    }

    /// <summary>Field number for the "base_flee_rate" field.</summary>
    public const int BaseFleeRateFieldNumber = 2;
    private float baseFleeRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float BaseFleeRate {
      get { return baseFleeRate_; }
      set {
        baseFleeRate_ = value;
      }
    }

    /// <summary>Field number for the "collision_radius_m" field.</summary>
    public const int CollisionRadiusMFieldNumber = 3;
    private float collisionRadiusM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollisionRadiusM {
      get { return collisionRadiusM_; }
      set {
        collisionRadiusM_ = value;
      }
    }

    /// <summary>Field number for the "collision_height_m" field.</summary>
    public const int CollisionHeightMFieldNumber = 4;
    private float collisionHeightM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollisionHeightM {
      get { return collisionHeightM_; }
      set {
        collisionHeightM_ = value;
      }
    }

    /// <summary>Field number for the "collision_head_radius_m" field.</summary>
    public const int CollisionHeadRadiusMFieldNumber = 5;
    private float collisionHeadRadiusM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CollisionHeadRadiusM {
      get { return collisionHeadRadiusM_; }
      set {
        collisionHeadRadiusM_ = value;
      }
    }

    /// <summary>Field number for the "movement_type" field.</summary>
    public const int MovementTypeFieldNumber = 6;
    private global::POGOProtos.Enums.PokemonMovementType movementType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.PokemonMovementType MovementType {
      get { return movementType_; }
      set {
        movementType_ = value;
      }
    }

    /// <summary>Field number for the "movement_timer_s" field.</summary>
    public const int MovementTimerSFieldNumber = 7;
    private float movementTimerS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float MovementTimerS {
      get { return movementTimerS_; }
      set {
        movementTimerS_ = value;
      }
    }

    /// <summary>Field number for the "jump_time_s" field.</summary>
    public const int JumpTimeSFieldNumber = 8;
    private float jumpTimeS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float JumpTimeS {
      get { return jumpTimeS_; }
      set {
        jumpTimeS_ = value;
      }
    }

    /// <summary>Field number for the "attack_timer_s" field.</summary>
    public const int AttackTimerSFieldNumber = 9;
    private float attackTimerS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float AttackTimerS {
      get { return attackTimerS_; }
      set {
        attackTimerS_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EncounterAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EncounterAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BaseCaptureRate != other.BaseCaptureRate) return false;
      if (BaseFleeRate != other.BaseFleeRate) return false;
      if (CollisionRadiusM != other.CollisionRadiusM) return false;
      if (CollisionHeightM != other.CollisionHeightM) return false;
      if (CollisionHeadRadiusM != other.CollisionHeadRadiusM) return false;
      if (MovementType != other.MovementType) return false;
      if (MovementTimerS != other.MovementTimerS) return false;
      if (JumpTimeS != other.JumpTimeS) return false;
      if (AttackTimerS != other.AttackTimerS) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BaseCaptureRate != 0F) hash ^= BaseCaptureRate.GetHashCode();
      if (BaseFleeRate != 0F) hash ^= BaseFleeRate.GetHashCode();
      if (CollisionRadiusM != 0F) hash ^= CollisionRadiusM.GetHashCode();
      if (CollisionHeightM != 0F) hash ^= CollisionHeightM.GetHashCode();
      if (CollisionHeadRadiusM != 0F) hash ^= CollisionHeadRadiusM.GetHashCode();
      if (MovementType != 0) hash ^= MovementType.GetHashCode();
      if (MovementTimerS != 0F) hash ^= MovementTimerS.GetHashCode();
      if (JumpTimeS != 0F) hash ^= JumpTimeS.GetHashCode();
      if (AttackTimerS != 0F) hash ^= AttackTimerS.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BaseCaptureRate != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(BaseCaptureRate);
      }
      if (BaseFleeRate != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(BaseFleeRate);
      }
      if (CollisionRadiusM != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CollisionRadiusM);
      }
      if (CollisionHeightM != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CollisionHeightM);
      }
      if (CollisionHeadRadiusM != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(CollisionHeadRadiusM);
      }
      if (MovementType != 0) {
        output.WriteRawTag(48);
        output.WriteEnum((int) MovementType);
      }
      if (MovementTimerS != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(MovementTimerS);
      }
      if (JumpTimeS != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(JumpTimeS);
      }
      if (AttackTimerS != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(AttackTimerS);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BaseCaptureRate != 0F) {
        size += 1 + 4;
      }
      if (BaseFleeRate != 0F) {
        size += 1 + 4;
      }
      if (CollisionRadiusM != 0F) {
        size += 1 + 4;
      }
      if (CollisionHeightM != 0F) {
        size += 1 + 4;
      }
      if (CollisionHeadRadiusM != 0F) {
        size += 1 + 4;
      }
      if (MovementType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MovementType);
      }
      if (MovementTimerS != 0F) {
        size += 1 + 4;
      }
      if (JumpTimeS != 0F) {
        size += 1 + 4;
      }
      if (AttackTimerS != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EncounterAttributes other) {
      if (other == null) {
        return;
      }
      if (other.BaseCaptureRate != 0F) {
        BaseCaptureRate = other.BaseCaptureRate;
      }
      if (other.BaseFleeRate != 0F) {
        BaseFleeRate = other.BaseFleeRate;
      }
      if (other.CollisionRadiusM != 0F) {
        CollisionRadiusM = other.CollisionRadiusM;
      }
      if (other.CollisionHeightM != 0F) {
        CollisionHeightM = other.CollisionHeightM;
      }
      if (other.CollisionHeadRadiusM != 0F) {
        CollisionHeadRadiusM = other.CollisionHeadRadiusM;
      }
      if (other.MovementType != 0) {
        MovementType = other.MovementType;
      }
      if (other.MovementTimerS != 0F) {
        MovementTimerS = other.MovementTimerS;
      }
      if (other.JumpTimeS != 0F) {
        JumpTimeS = other.JumpTimeS;
      }
      if (other.AttackTimerS != 0F) {
        AttackTimerS = other.AttackTimerS;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            BaseCaptureRate = input.ReadFloat();
            break;
          }
          case 21: {
            BaseFleeRate = input.ReadFloat();
            break;
          }
          case 29: {
            CollisionRadiusM = input.ReadFloat();
            break;
          }
          case 37: {
            CollisionHeightM = input.ReadFloat();
            break;
          }
          case 45: {
            CollisionHeadRadiusM = input.ReadFloat();
            break;
          }
          case 48: {
            movementType_ = (global::POGOProtos.Enums.PokemonMovementType) input.ReadEnum();
            break;
          }
          case 61: {
            MovementTimerS = input.ReadFloat();
            break;
          }
          case 69: {
            JumpTimeS = input.ReadFloat();
            break;
          }
          case 77: {
            AttackTimerS = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
