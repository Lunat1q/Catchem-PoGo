// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos.Networking.Signature.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Networking.Signature {

  /// <summary>Holder for reflection information generated from POGOProtos.Networking.Signature.proto</summary>
  public static partial class POGOProtosNetworkingSignatureReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos.Networking.Signature.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static POGOProtosNetworkingSignatureReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiVQT0dPUHJvdG9zLk5ldHdvcmtpbmcuU2lnbmF0dXJlLnByb3RvEh9QT0dP",
            "UHJvdG9zLk5ldHdvcmtpbmcuU2lnbmF0dXJlIvYKCglTaWduYXR1cmUSTAoM",
            "bG9jYXRpb25fZml4GAQgAygLMjYuUE9HT1Byb3Rvcy5OZXR3b3JraW5nLlNp",
            "Z25hdHVyZS5TaWduYXR1cmUuTG9jYXRpb25GaXgSSgoLc2Vuc29yX2luZm8Y",
            "ByABKAsyNS5QT0dPUHJvdG9zLk5ldHdvcmtpbmcuU2lnbmF0dXJlLlNpZ25h",
            "dHVyZS5TZW5zb3JJbmZvEkoKC2RldmljZV9pbmZvGAggASgLMjUuUE9HT1By",
            "b3Rvcy5OZXR3b3JraW5nLlNpZ25hdHVyZS5TaWduYXR1cmUuRGV2aWNlSW5m",
            "bxJBCgR1bms5GAkgASgLMjMuUE9HT1Byb3Rvcy5OZXR3b3JraW5nLlNpZ25h",
            "dHVyZS5TaWduYXR1cmUuVW5rbm93bjkSEQoJdGltZXN0YW1wGBcgASgEEhQK",
            "DHJlcXVlc3RfaGFzaBgYIAMoDRqxAQoLTG9jYXRpb25GaXgSEAoIcHJvdmlk",
            "ZXIYASABKAkSHQoVdGltZXN0YW1wX3NpbmNlX3N0YXJ0GAIgASgEEhAKCGxh",
            "dGl0dWRlGA0gASgCEhEKCWxvbmdpdHVkZRgOIAEoAhINCgV1bmsyMBgUIAEo",
            "BBIQCghhbHRpdHVkZRgVIAEoAhINCgV1bmsyMhgWIAEoBBINCgV1bmsyNhga",
            "IAEoBBINCgV1bmsyOBgcIAEoBBp6CghVbmtub3duNRIMCgR1bmsxGAEgASgE",
            "EgwKBHVuazIYAiABKAwSDAoEdW5rMxgDIAMoBxIMCgR1bms0GAQgAygHEgwK",
            "BHVuazUYBSADKAcSDAoEdW5rNhgGIAEoDBIMCgR1bms3GAcgASgMEgwKBHVu",
            "azgYCCABKAwa0gIKClNlbnNvckluZm8SGgoSdGltZXN0YW1wX3NuYXBzaG90",
            "GAEgASgEEgwKBHVuazMYAyABKAQSDAoEdW5rNBgEIAEoBBIMCgR1bms1GAUg",
            "ASgEEhgKEGd5cm9zY29wZV9hbmdsZTYYBiABKAESGAoQZ3lyb3Njb3BlX2Fu",
            "Z2xlNxgHIAEoARIYChBneXJvc2NvcGVfYW5nbGU4GAggASgBEg0KBXVuazEw",
            "GAogASgEEg0KBXVuazExGAsgASgEEg0KBXVuazEyGAwgASgEEg0KBXVuazEz",
            "GA0gASgEEg0KBXVuazE0GA4gASgEEhcKD2FjY2VsZXJvbWV0ZXJfeBgQIAEo",
            "ARIXCg9hY2NlbGVyb21ldGVyX3kYESABKAESFwoPYWNjZWxlcm9tZXRlcl96",
            "GBIgASgBEhoKEmFjY2VsZXJvbWV0ZXJfYXhlcxgTIAEoBBrbAgoKRGV2aWNl",
            "SW5mbxIRCglkZXZpY2VfaWQYASABKAkSGgoSYW5kcm9pZF9ib2FyZF9uYW1l",
            "GAIgASgJEhoKEmFuZHJvaWRfYm9vdGxvYWRlchgDIAEoCRIUCgxkZXZpY2Vf",
            "YnJhbmQYBCABKAkSFAoMZGV2aWNlX21vZGVsGAUgASgJEh8KF2RldmljZV9t",
            "b2RlbF9pZGVudGlmaWVyGAYgASgJEhoKEmRldmljZV9jb21tc19tb2RlbBgH",
            "IAEoCRIdChVoYXJkd2FyZV9tYW51ZmFjdHVyZXIYCCABKAkSFgoOaGFyZHdh",
            "cmVfbW9kZWwYCSABKAkSFgoOZmlybXdhcmVfYnJhbmQYCiABKAkSFQoNZmly",
            "bXdhcmVfdGFncxgMIAEoCRIVCg1maXJtd2FyZV90eXBlGA0gASgJEhwKFGZp",
            "cm13YXJlX2ZpbmdlcnByaW50GA4gASgJGjQKCFVua25vd245EgwKBHVuazMY",
            "AyABKAQSDAoEdW5rNRgFIAEoBBIMCgR1bms2GAYgASgEYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature), global::POGOProtos.Networking.Signature.Signature.Parser, new[]{ "LocationFix", "SensorInfo", "DeviceInfo", "Unk9", "Timestamp", "RequestHash" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.LocationFix), global::POGOProtos.Networking.Signature.Signature.Types.LocationFix.Parser, new[]{ "Provider", "TimestampSinceStart", "Latitude", "Longitude", "Unk20", "Altitude", "Unk22", "Unk26", "Unk28" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.Unknown5), global::POGOProtos.Networking.Signature.Signature.Types.Unknown5.Parser, new[]{ "Unk1", "Unk2", "Unk3", "Unk4", "Unk5", "Unk6", "Unk7", "Unk8" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo), global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo.Parser, new[]{ "TimestampSnapshot", "Unk3", "Unk4", "Unk5", "GyroscopeAngle6", "GyroscopeAngle7", "GyroscopeAngle8", "Unk10", "Unk11", "Unk12", "Unk13", "Unk14", "AccelerometerX", "AccelerometerY", "AccelerometerZ", "AccelerometerAxes" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.DeviceInfo), global::POGOProtos.Networking.Signature.Signature.Types.DeviceInfo.Parser, new[]{ "DeviceId", "AndroidBoardName", "AndroidBootloader", "DeviceBrand", "DeviceModel", "DeviceModelIdentifier", "DeviceCommsModel", "HardwareManufacturer", "HardwareModel", "FirmwareBrand", "FirmwareTags", "FirmwareType", "FirmwareFingerprint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Signature.Signature.Types.Unknown9), global::POGOProtos.Networking.Signature.Signature.Types.Unknown9.Parser, new[]{ "Unk3", "Unk5", "Unk6" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class Signature : pb::IMessage<Signature> {
    private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Signature> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Signature.POGOProtosNetworkingSignatureReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature(Signature other) : this() {
      locationFix_ = other.locationFix_.Clone();
      SensorInfo = other.sensorInfo_ != null ? other.SensorInfo.Clone() : null;
      DeviceInfo = other.deviceInfo_ != null ? other.DeviceInfo.Clone() : null;
      Unk9 = other.unk9_ != null ? other.Unk9.Clone() : null;
      timestamp_ = other.timestamp_;
      requestHash_ = other.requestHash_.Clone();
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Signature Clone() {
      return new Signature(this);
    }

    /// <summary>Field number for the "location_fix" field.</summary>
    public const int LocationFixFieldNumber = 4;
    private static readonly pb::FieldCodec<global::POGOProtos.Networking.Signature.Signature.Types.LocationFix> _repeated_locationFix_codec
        = pb::FieldCodec.ForMessage(34, global::POGOProtos.Networking.Signature.Signature.Types.LocationFix.Parser);
    private readonly pbc::RepeatedField<global::POGOProtos.Networking.Signature.Signature.Types.LocationFix> locationFix_ = new pbc::RepeatedField<global::POGOProtos.Networking.Signature.Signature.Types.LocationFix>();
    /// <summary>
    /// uint64 timestamp_since_start = 2;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::POGOProtos.Networking.Signature.Signature.Types.LocationFix> LocationFix {
      get { return locationFix_; }
    }

    /// <summary>Field number for the "sensor_info" field.</summary>
    public const int SensorInfoFieldNumber = 7;
    private global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo sensorInfo_;
    /// <summary>
    /// Unknown5 unk5 = 5;
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo SensorInfo {
      get { return sensorInfo_; }
      set {
        sensorInfo_ = value;
      }
    }

    /// <summary>Field number for the "device_info" field.</summary>
    public const int DeviceInfoFieldNumber = 8;
    private global::POGOProtos.Networking.Signature.Signature.Types.DeviceInfo deviceInfo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Signature.Signature.Types.DeviceInfo DeviceInfo {
      get { return deviceInfo_; }
      set {
        deviceInfo_ = value;
      }
    }

    /// <summary>Field number for the "unk9" field.</summary>
    public const int Unk9FieldNumber = 9;
    private global::POGOProtos.Networking.Signature.Signature.Types.Unknown9 unk9_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Networking.Signature.Signature.Types.Unknown9 Unk9 {
      get { return unk9_; }
      set {
        unk9_ = value;
      }
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 23;
    private ulong timestamp_;
    /// <summary>
    /// uint64 unk10 = 10; //actually looks like a negative double
    /// uint64 unk20 = 20;
    /// bytes unk22 = 22; // same in all dumps
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "request_hash" field.</summary>
    public const int RequestHashFieldNumber = 24;
    private static readonly pb::FieldCodec<uint> _repeated_requestHash_codec
        = pb::FieldCodec.ForUInt32(194);
    private readonly pbc::RepeatedField<uint> requestHash_ = new pbc::RepeatedField<uint>();
    /// <summary>
    ///  hashes of each request message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<uint> RequestHash {
      get { return requestHash_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Signature);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Signature other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!locationFix_.Equals(other.locationFix_)) return false;
      if (!object.Equals(SensorInfo, other.SensorInfo)) return false;
      if (!object.Equals(DeviceInfo, other.DeviceInfo)) return false;
      if (!object.Equals(Unk9, other.Unk9)) return false;
      if (Timestamp != other.Timestamp) return false;
      if(!requestHash_.Equals(other.requestHash_)) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= locationFix_.GetHashCode();
      if (sensorInfo_ != null) hash ^= SensorInfo.GetHashCode();
      if (deviceInfo_ != null) hash ^= DeviceInfo.GetHashCode();
      if (unk9_ != null) hash ^= Unk9.GetHashCode();
      if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
      hash ^= requestHash_.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      locationFix_.WriteTo(output, _repeated_locationFix_codec);
      if (sensorInfo_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(SensorInfo);
      }
      if (deviceInfo_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(DeviceInfo);
      }
      if (unk9_ != null) {
        output.WriteRawTag(74);
        output.WriteMessage(Unk9);
      }
      if (Timestamp != 0UL) {
        output.WriteRawTag(184, 1);
        output.WriteUInt64(Timestamp);
      }
      requestHash_.WriteTo(output, _repeated_requestHash_codec);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += locationFix_.CalculateSize(_repeated_locationFix_codec);
      if (sensorInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SensorInfo);
      }
      if (deviceInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfo);
      }
      if (unk9_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Unk9);
      }
      if (Timestamp != 0UL) {
        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
      }
      size += requestHash_.CalculateSize(_repeated_requestHash_codec);
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Signature other) {
      if (other == null) {
        return;
      }
      locationFix_.Add(other.locationFix_);
      if (other.sensorInfo_ != null) {
        if (sensorInfo_ == null) {
          sensorInfo_ = new global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo();
        }
        SensorInfo.MergeFrom(other.SensorInfo);
      }
      if (other.deviceInfo_ != null) {
        if (deviceInfo_ == null) {
          deviceInfo_ = new global::POGOProtos.Networking.Signature.Signature.Types.DeviceInfo();
        }
        DeviceInfo.MergeFrom(other.DeviceInfo);
      }
      if (other.unk9_ != null) {
        if (unk9_ == null) {
          unk9_ = new global::POGOProtos.Networking.Signature.Signature.Types.Unknown9();
        }
        Unk9.MergeFrom(other.Unk9);
      }
      if (other.Timestamp != 0UL) {
        Timestamp = other.Timestamp;
      }
      requestHash_.Add(other.requestHash_);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 34: {
            locationFix_.AddEntriesFrom(input, _repeated_locationFix_codec);
            break;
          }
          case 58: {
            if (sensorInfo_ == null) {
              sensorInfo_ = new global::POGOProtos.Networking.Signature.Signature.Types.SensorInfo();
            }
            input.ReadMessage(sensorInfo_);
            break;
          }
          case 66: {
            if (deviceInfo_ == null) {
              deviceInfo_ = new global::POGOProtos.Networking.Signature.Signature.Types.DeviceInfo();
            }
            input.ReadMessage(deviceInfo_);
            break;
          }
          case 74: {
            if (unk9_ == null) {
              unk9_ = new global::POGOProtos.Networking.Signature.Signature.Types.Unknown9();
            }
            input.ReadMessage(unk9_);
            break;
          }
          case 184: {
            Timestamp = input.ReadUInt64();
            break;
          }
          case 194:
          case 192: {
            requestHash_.AddEntriesFrom(input, _repeated_requestHash_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the Signature message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public sealed partial class LocationFix : pb::IMessage<LocationFix> {
        private static readonly pb::MessageParser<LocationFix> _parser = new pb::MessageParser<LocationFix>(() => new LocationFix());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<LocationFix> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationFix() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationFix(LocationFix other) : this() {
          provider_ = other.provider_;
          timestampSinceStart_ = other.timestampSinceStart_;
          latitude_ = other.latitude_;
          longitude_ = other.longitude_;
          unk20_ = other.unk20_;
          altitude_ = other.altitude_;
          unk22_ = other.unk22_;
          unk26_ = other.unk26_;
          unk28_ = other.unk28_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public LocationFix Clone() {
          return new LocationFix(this);
        }

        /// <summary>Field number for the "provider" field.</summary>
        public const int ProviderFieldNumber = 1;
        private string provider_ = "";
        /// <summary>
        ///  On iOS there are some LocationFixes with unk26=1 and everything else empty
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string Provider {
          get { return provider_; }
          set {
            provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "timestamp_since_start" field.</summary>
        public const int TimestampSinceStartFieldNumber = 2;
        private ulong timestampSinceStart_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TimestampSinceStart {
          get { return timestampSinceStart_; }
          set {
            timestampSinceStart_ = value;
          }
        }

        /// <summary>Field number for the "latitude" field.</summary>
        public const int LatitudeFieldNumber = 13;
        private float latitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Latitude {
          get { return latitude_; }
          set {
            latitude_ = value;
          }
        }

        /// <summary>Field number for the "longitude" field.</summary>
        public const int LongitudeFieldNumber = 14;
        private float longitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Longitude {
          get { return longitude_; }
          set {
            longitude_ = value;
          }
        }

        /// <summary>Field number for the "unk20" field.</summary>
        public const int Unk20FieldNumber = 20;
        private ulong unk20_;
        /// <summary>
        ///  sample 0xbf800000 (iOS only, possibly horizontal accuracy)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk20 {
          get { return unk20_; }
          set {
            unk20_ = value;
          }
        }

        /// <summary>Field number for the "altitude" field.</summary>
        public const int AltitudeFieldNumber = 21;
        private float altitude_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public float Altitude {
          get { return altitude_; }
          set {
            altitude_ = value;
          }
        }

        /// <summary>Field number for the "unk22" field.</summary>
        public const int Unk22FieldNumber = 22;
        private ulong unk22_;
        /// <summary>
        ///  sample 0x40800000 (iOS only, possibly vertical accuracy)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk22 {
          get { return unk22_; }
          set {
            unk22_ = value;
          }
        }

        /// <summary>Field number for the "unk26" field.</summary>
        public const int Unk26FieldNumber = 26;
        private ulong unk26_;
        /// <summary>
        ///  Always 3 (possibly GPS status or number of satellites)
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk26 {
          get { return unk26_; }
          set {
            unk26_ = value;
          }
        }

        /// <summary>Field number for the "unk28" field.</summary>
        public const int Unk28FieldNumber = 28;
        private ulong unk28_;
        /// <summary>
        ///  Always 1
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk28 {
          get { return unk28_; }
          set {
            unk28_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as LocationFix);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(LocationFix other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Provider != other.Provider) return false;
          if (TimestampSinceStart != other.TimestampSinceStart) return false;
          if (Latitude != other.Latitude) return false;
          if (Longitude != other.Longitude) return false;
          if (Unk20 != other.Unk20) return false;
          if (Altitude != other.Altitude) return false;
          if (Unk22 != other.Unk22) return false;
          if (Unk26 != other.Unk26) return false;
          if (Unk28 != other.Unk28) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Provider.Length != 0) hash ^= Provider.GetHashCode();
          if (TimestampSinceStart != 0UL) hash ^= TimestampSinceStart.GetHashCode();
          if (Latitude != 0F) hash ^= Latitude.GetHashCode();
          if (Longitude != 0F) hash ^= Longitude.GetHashCode();
          if (Unk20 != 0UL) hash ^= Unk20.GetHashCode();
          if (Altitude != 0F) hash ^= Altitude.GetHashCode();
          if (Unk22 != 0UL) hash ^= Unk22.GetHashCode();
          if (Unk26 != 0UL) hash ^= Unk26.GetHashCode();
          if (Unk28 != 0UL) hash ^= Unk28.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Provider.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Provider);
          }
          if (TimestampSinceStart != 0UL) {
            output.WriteRawTag(16);
            output.WriteUInt64(TimestampSinceStart);
          }
          if (Latitude != 0F) {
            output.WriteRawTag(109);
            output.WriteFloat(Latitude);
          }
          if (Longitude != 0F) {
            output.WriteRawTag(117);
            output.WriteFloat(Longitude);
          }
          if (Unk20 != 0UL) {
            output.WriteRawTag(160, 1);
            output.WriteUInt64(Unk20);
          }
          if (Altitude != 0F) {
            output.WriteRawTag(173, 1);
            output.WriteFloat(Altitude);
          }
          if (Unk22 != 0UL) {
            output.WriteRawTag(176, 1);
            output.WriteUInt64(Unk22);
          }
          if (Unk26 != 0UL) {
            output.WriteRawTag(208, 1);
            output.WriteUInt64(Unk26);
          }
          if (Unk28 != 0UL) {
            output.WriteRawTag(224, 1);
            output.WriteUInt64(Unk28);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Provider.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
          }
          if (TimestampSinceStart != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampSinceStart);
          }
          if (Latitude != 0F) {
            size += 1 + 4;
          }
          if (Longitude != 0F) {
            size += 1 + 4;
          }
          if (Unk20 != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unk20);
          }
          if (Altitude != 0F) {
            size += 2 + 4;
          }
          if (Unk22 != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unk22);
          }
          if (Unk26 != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unk26);
          }
          if (Unk28 != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unk28);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(LocationFix other) {
          if (other == null) {
            return;
          }
          if (other.Provider.Length != 0) {
            Provider = other.Provider;
          }
          if (other.TimestampSinceStart != 0UL) {
            TimestampSinceStart = other.TimestampSinceStart;
          }
          if (other.Latitude != 0F) {
            Latitude = other.Latitude;
          }
          if (other.Longitude != 0F) {
            Longitude = other.Longitude;
          }
          if (other.Unk20 != 0UL) {
            Unk20 = other.Unk20;
          }
          if (other.Altitude != 0F) {
            Altitude = other.Altitude;
          }
          if (other.Unk22 != 0UL) {
            Unk22 = other.Unk22;
          }
          if (other.Unk26 != 0UL) {
            Unk26 = other.Unk26;
          }
          if (other.Unk28 != 0UL) {
            Unk28 = other.Unk28;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Provider = input.ReadString();
                break;
              }
              case 16: {
                TimestampSinceStart = input.ReadUInt64();
                break;
              }
              case 109: {
                Latitude = input.ReadFloat();
                break;
              }
              case 117: {
                Longitude = input.ReadFloat();
                break;
              }
              case 160: {
                Unk20 = input.ReadUInt64();
                break;
              }
              case 173: {
                Altitude = input.ReadFloat();
                break;
              }
              case 176: {
                Unk22 = input.ReadUInt64();
                break;
              }
              case 208: {
                Unk26 = input.ReadUInt64();
                break;
              }
              case 224: {
                Unk28 = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class Unknown5 : pb::IMessage<Unknown5> {
        private static readonly pb::MessageParser<Unknown5> _parser = new pb::MessageParser<Unknown5>(() => new Unknown5());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Unknown5> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unknown5() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unknown5(Unknown5 other) : this() {
          unk1_ = other.unk1_;
          unk2_ = other.unk2_;
          unk3_ = other.unk3_.Clone();
          unk4_ = other.unk4_.Clone();
          unk5_ = other.unk5_.Clone();
          unk6_ = other.unk6_;
          unk7_ = other.unk7_;
          unk8_ = other.unk8_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unknown5 Clone() {
          return new Unknown5(this);
        }

        /// <summary>Field number for the "unk1" field.</summary>
        public const int Unk1FieldNumber = 1;
        private ulong unk1_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk1 {
          get { return unk1_; }
          set {
            unk1_ = value;
          }
        }

        /// <summary>Field number for the "unk2" field.</summary>
        public const int Unk2FieldNumber = 2;
        private pb::ByteString unk2_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk2 {
          get { return unk2_; }
          set {
            unk2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk3" field.</summary>
        public const int Unk3FieldNumber = 3;
        private static readonly pb::FieldCodec<uint> _repeated_unk3_codec
            = pb::FieldCodec.ForFixed32(26);
        private readonly pbc::RepeatedField<uint> unk3_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Unk3 {
          get { return unk3_; }
        }

        /// <summary>Field number for the "unk4" field.</summary>
        public const int Unk4FieldNumber = 4;
        private static readonly pb::FieldCodec<uint> _repeated_unk4_codec
            = pb::FieldCodec.ForFixed32(34);
        private readonly pbc::RepeatedField<uint> unk4_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Unk4 {
          get { return unk4_; }
        }

        /// <summary>Field number for the "unk5" field.</summary>
        public const int Unk5FieldNumber = 5;
        private static readonly pb::FieldCodec<uint> _repeated_unk5_codec
            = pb::FieldCodec.ForFixed32(42);
        private readonly pbc::RepeatedField<uint> unk5_ = new pbc::RepeatedField<uint>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pbc::RepeatedField<uint> Unk5 {
          get { return unk5_; }
        }

        /// <summary>Field number for the "unk6" field.</summary>
        public const int Unk6FieldNumber = 6;
        private pb::ByteString unk6_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk6 {
          get { return unk6_; }
          set {
            unk6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk7" field.</summary>
        public const int Unk7FieldNumber = 7;
        private pb::ByteString unk7_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk7 {
          get { return unk7_; }
          set {
            unk7_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "unk8" field.</summary>
        public const int Unk8FieldNumber = 8;
        private pb::ByteString unk8_ = pb::ByteString.Empty;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public pb::ByteString Unk8 {
          get { return unk8_; }
          set {
            unk8_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Unknown5);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Unknown5 other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Unk1 != other.Unk1) return false;
          if (Unk2 != other.Unk2) return false;
          if(!unk3_.Equals(other.unk3_)) return false;
          if(!unk4_.Equals(other.unk4_)) return false;
          if(!unk5_.Equals(other.unk5_)) return false;
          if (Unk6 != other.Unk6) return false;
          if (Unk7 != other.Unk7) return false;
          if (Unk8 != other.Unk8) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Unk1 != 0UL) hash ^= Unk1.GetHashCode();
          if (Unk2.Length != 0) hash ^= Unk2.GetHashCode();
          hash ^= unk3_.GetHashCode();
          hash ^= unk4_.GetHashCode();
          hash ^= unk5_.GetHashCode();
          if (Unk6.Length != 0) hash ^= Unk6.GetHashCode();
          if (Unk7.Length != 0) hash ^= Unk7.GetHashCode();
          if (Unk8.Length != 0) hash ^= Unk8.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Unk1 != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(Unk1);
          }
          if (Unk2.Length != 0) {
            output.WriteRawTag(18);
            output.WriteBytes(Unk2);
          }
          unk3_.WriteTo(output, _repeated_unk3_codec);
          unk4_.WriteTo(output, _repeated_unk4_codec);
          unk5_.WriteTo(output, _repeated_unk5_codec);
          if (Unk6.Length != 0) {
            output.WriteRawTag(50);
            output.WriteBytes(Unk6);
          }
          if (Unk7.Length != 0) {
            output.WriteRawTag(58);
            output.WriteBytes(Unk7);
          }
          if (Unk8.Length != 0) {
            output.WriteRawTag(66);
            output.WriteBytes(Unk8);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Unk1 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk1);
          }
          if (Unk2.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk2);
          }
          size += unk3_.CalculateSize(_repeated_unk3_codec);
          size += unk4_.CalculateSize(_repeated_unk4_codec);
          size += unk5_.CalculateSize(_repeated_unk5_codec);
          if (Unk6.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk6);
          }
          if (Unk7.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk7);
          }
          if (Unk8.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeBytesSize(Unk8);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Unknown5 other) {
          if (other == null) {
            return;
          }
          if (other.Unk1 != 0UL) {
            Unk1 = other.Unk1;
          }
          if (other.Unk2.Length != 0) {
            Unk2 = other.Unk2;
          }
          unk3_.Add(other.unk3_);
          unk4_.Add(other.unk4_);
          unk5_.Add(other.unk5_);
          if (other.Unk6.Length != 0) {
            Unk6 = other.Unk6;
          }
          if (other.Unk7.Length != 0) {
            Unk7 = other.Unk7;
          }
          if (other.Unk8.Length != 0) {
            Unk8 = other.Unk8;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                Unk1 = input.ReadUInt64();
                break;
              }
              case 18: {
                Unk2 = input.ReadBytes();
                break;
              }
              case 26:
              case 29: {
                unk3_.AddEntriesFrom(input, _repeated_unk3_codec);
                break;
              }
              case 34:
              case 37: {
                unk4_.AddEntriesFrom(input, _repeated_unk4_codec);
                break;
              }
              case 42:
              case 45: {
                unk5_.AddEntriesFrom(input, _repeated_unk5_codec);
                break;
              }
              case 50: {
                Unk6 = input.ReadBytes();
                break;
              }
              case 58: {
                Unk7 = input.ReadBytes();
                break;
              }
              case 66: {
                Unk8 = input.ReadBytes();
                break;
              }
            }
          }
        }

      }

      public sealed partial class SensorInfo : pb::IMessage<SensorInfo> {
        private static readonly pb::MessageParser<SensorInfo> _parser = new pb::MessageParser<SensorInfo>(() => new SensorInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SensorInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SensorInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SensorInfo(SensorInfo other) : this() {
          timestampSnapshot_ = other.timestampSnapshot_;
          unk3_ = other.unk3_;
          unk4_ = other.unk4_;
          unk5_ = other.unk5_;
          gyroscopeAngle6_ = other.gyroscopeAngle6_;
          gyroscopeAngle7_ = other.gyroscopeAngle7_;
          gyroscopeAngle8_ = other.gyroscopeAngle8_;
          unk10_ = other.unk10_;
          unk11_ = other.unk11_;
          unk12_ = other.unk12_;
          unk13_ = other.unk13_;
          unk14_ = other.unk14_;
          accelerometerX_ = other.accelerometerX_;
          accelerometerY_ = other.accelerometerY_;
          accelerometerZ_ = other.accelerometerZ_;
          accelerometerAxes_ = other.accelerometerAxes_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SensorInfo Clone() {
          return new SensorInfo(this);
        }

        /// <summary>Field number for the "timestamp_snapshot" field.</summary>
        public const int TimestampSnapshotFieldNumber = 1;
        private ulong timestampSnapshot_;
        /// <summary>
        ///  in ms
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong TimestampSnapshot {
          get { return timestampSnapshot_; }
          set {
            timestampSnapshot_ = value;
          }
        }

        /// <summary>Field number for the "unk3" field.</summary>
        public const int Unk3FieldNumber = 3;
        private ulong unk3_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk3 {
          get { return unk3_; }
          set {
            unk3_ = value;
          }
        }

        /// <summary>Field number for the "unk4" field.</summary>
        public const int Unk4FieldNumber = 4;
        private ulong unk4_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk4 {
          get { return unk4_; }
          set {
            unk4_ = value;
          }
        }

        /// <summary>Field number for the "unk5" field.</summary>
        public const int Unk5FieldNumber = 5;
        private ulong unk5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk5 {
          get { return unk5_; }
          set {
            unk5_ = value;
          }
        }

        /// <summary>Field number for the "gyroscope_angle6" field.</summary>
        public const int GyroscopeAngle6FieldNumber = 6;
        private double gyroscopeAngle6_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double GyroscopeAngle6 {
          get { return gyroscopeAngle6_; }
          set {
            gyroscopeAngle6_ = value;
          }
        }

        /// <summary>Field number for the "gyroscope_angle7" field.</summary>
        public const int GyroscopeAngle7FieldNumber = 7;
        private double gyroscopeAngle7_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double GyroscopeAngle7 {
          get { return gyroscopeAngle7_; }
          set {
            gyroscopeAngle7_ = value;
          }
        }

        /// <summary>Field number for the "gyroscope_angle8" field.</summary>
        public const int GyroscopeAngle8FieldNumber = 8;
        private double gyroscopeAngle8_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double GyroscopeAngle8 {
          get { return gyroscopeAngle8_; }
          set {
            gyroscopeAngle8_ = value;
          }
        }

        /// <summary>Field number for the "unk10" field.</summary>
        public const int Unk10FieldNumber = 10;
        private ulong unk10_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk10 {
          get { return unk10_; }
          set {
            unk10_ = value;
          }
        }

        /// <summary>Field number for the "unk11" field.</summary>
        public const int Unk11FieldNumber = 11;
        private ulong unk11_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk11 {
          get { return unk11_; }
          set {
            unk11_ = value;
          }
        }

        /// <summary>Field number for the "unk12" field.</summary>
        public const int Unk12FieldNumber = 12;
        private ulong unk12_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk12 {
          get { return unk12_; }
          set {
            unk12_ = value;
          }
        }

        /// <summary>Field number for the "unk13" field.</summary>
        public const int Unk13FieldNumber = 13;
        private ulong unk13_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk13 {
          get { return unk13_; }
          set {
            unk13_ = value;
          }
        }

        /// <summary>Field number for the "unk14" field.</summary>
        public const int Unk14FieldNumber = 14;
        private ulong unk14_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk14 {
          get { return unk14_; }
          set {
            unk14_ = value;
          }
        }

        /// <summary>Field number for the "accelerometer_x" field.</summary>
        public const int AccelerometerXFieldNumber = 16;
        private double accelerometerX_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AccelerometerX {
          get { return accelerometerX_; }
          set {
            accelerometerX_ = value;
          }
        }

        /// <summary>Field number for the "accelerometer_y" field.</summary>
        public const int AccelerometerYFieldNumber = 17;
        private double accelerometerY_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AccelerometerY {
          get { return accelerometerY_; }
          set {
            accelerometerY_ = value;
          }
        }

        /// <summary>Field number for the "accelerometer_z" field.</summary>
        public const int AccelerometerZFieldNumber = 18;
        private double accelerometerZ_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public double AccelerometerZ {
          get { return accelerometerZ_; }
          set {
            accelerometerZ_ = value;
          }
        }

        /// <summary>Field number for the "accelerometer_axes" field.</summary>
        public const int AccelerometerAxesFieldNumber = 19;
        private ulong accelerometerAxes_;
        /// <summary>
        ///  Always 3
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong AccelerometerAxes {
          get { return accelerometerAxes_; }
          set {
            accelerometerAxes_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SensorInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SensorInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (TimestampSnapshot != other.TimestampSnapshot) return false;
          if (Unk3 != other.Unk3) return false;
          if (Unk4 != other.Unk4) return false;
          if (Unk5 != other.Unk5) return false;
          if (GyroscopeAngle6 != other.GyroscopeAngle6) return false;
          if (GyroscopeAngle7 != other.GyroscopeAngle7) return false;
          if (GyroscopeAngle8 != other.GyroscopeAngle8) return false;
          if (Unk10 != other.Unk10) return false;
          if (Unk11 != other.Unk11) return false;
          if (Unk12 != other.Unk12) return false;
          if (Unk13 != other.Unk13) return false;
          if (Unk14 != other.Unk14) return false;
          if (AccelerometerX != other.AccelerometerX) return false;
          if (AccelerometerY != other.AccelerometerY) return false;
          if (AccelerometerZ != other.AccelerometerZ) return false;
          if (AccelerometerAxes != other.AccelerometerAxes) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (TimestampSnapshot != 0UL) hash ^= TimestampSnapshot.GetHashCode();
          if (Unk3 != 0UL) hash ^= Unk3.GetHashCode();
          if (Unk4 != 0UL) hash ^= Unk4.GetHashCode();
          if (Unk5 != 0UL) hash ^= Unk5.GetHashCode();
          if (GyroscopeAngle6 != 0D) hash ^= GyroscopeAngle6.GetHashCode();
          if (GyroscopeAngle7 != 0D) hash ^= GyroscopeAngle7.GetHashCode();
          if (GyroscopeAngle8 != 0D) hash ^= GyroscopeAngle8.GetHashCode();
          if (Unk10 != 0UL) hash ^= Unk10.GetHashCode();
          if (Unk11 != 0UL) hash ^= Unk11.GetHashCode();
          if (Unk12 != 0UL) hash ^= Unk12.GetHashCode();
          if (Unk13 != 0UL) hash ^= Unk13.GetHashCode();
          if (Unk14 != 0UL) hash ^= Unk14.GetHashCode();
          if (AccelerometerX != 0D) hash ^= AccelerometerX.GetHashCode();
          if (AccelerometerY != 0D) hash ^= AccelerometerY.GetHashCode();
          if (AccelerometerZ != 0D) hash ^= AccelerometerZ.GetHashCode();
          if (AccelerometerAxes != 0UL) hash ^= AccelerometerAxes.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (TimestampSnapshot != 0UL) {
            output.WriteRawTag(8);
            output.WriteUInt64(TimestampSnapshot);
          }
          if (Unk3 != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Unk3);
          }
          if (Unk4 != 0UL) {
            output.WriteRawTag(32);
            output.WriteUInt64(Unk4);
          }
          if (Unk5 != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Unk5);
          }
          if (GyroscopeAngle6 != 0D) {
            output.WriteRawTag(49);
            output.WriteDouble(GyroscopeAngle6);
          }
          if (GyroscopeAngle7 != 0D) {
            output.WriteRawTag(57);
            output.WriteDouble(GyroscopeAngle7);
          }
          if (GyroscopeAngle8 != 0D) {
            output.WriteRawTag(65);
            output.WriteDouble(GyroscopeAngle8);
          }
          if (Unk10 != 0UL) {
            output.WriteRawTag(80);
            output.WriteUInt64(Unk10);
          }
          if (Unk11 != 0UL) {
            output.WriteRawTag(88);
            output.WriteUInt64(Unk11);
          }
          if (Unk12 != 0UL) {
            output.WriteRawTag(96);
            output.WriteUInt64(Unk12);
          }
          if (Unk13 != 0UL) {
            output.WriteRawTag(104);
            output.WriteUInt64(Unk13);
          }
          if (Unk14 != 0UL) {
            output.WriteRawTag(112);
            output.WriteUInt64(Unk14);
          }
          if (AccelerometerX != 0D) {
            output.WriteRawTag(129, 1);
            output.WriteDouble(AccelerometerX);
          }
          if (AccelerometerY != 0D) {
            output.WriteRawTag(137, 1);
            output.WriteDouble(AccelerometerY);
          }
          if (AccelerometerZ != 0D) {
            output.WriteRawTag(145, 1);
            output.WriteDouble(AccelerometerZ);
          }
          if (AccelerometerAxes != 0UL) {
            output.WriteRawTag(152, 1);
            output.WriteUInt64(AccelerometerAxes);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (TimestampSnapshot != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampSnapshot);
          }
          if (Unk3 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk3);
          }
          if (Unk4 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk4);
          }
          if (Unk5 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk5);
          }
          if (GyroscopeAngle6 != 0D) {
            size += 1 + 8;
          }
          if (GyroscopeAngle7 != 0D) {
            size += 1 + 8;
          }
          if (GyroscopeAngle8 != 0D) {
            size += 1 + 8;
          }
          if (Unk10 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk10);
          }
          if (Unk11 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk11);
          }
          if (Unk12 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk12);
          }
          if (Unk13 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk13);
          }
          if (Unk14 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk14);
          }
          if (AccelerometerX != 0D) {
            size += 2 + 8;
          }
          if (AccelerometerY != 0D) {
            size += 2 + 8;
          }
          if (AccelerometerZ != 0D) {
            size += 2 + 8;
          }
          if (AccelerometerAxes != 0UL) {
            size += 2 + pb::CodedOutputStream.ComputeUInt64Size(AccelerometerAxes);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SensorInfo other) {
          if (other == null) {
            return;
          }
          if (other.TimestampSnapshot != 0UL) {
            TimestampSnapshot = other.TimestampSnapshot;
          }
          if (other.Unk3 != 0UL) {
            Unk3 = other.Unk3;
          }
          if (other.Unk4 != 0UL) {
            Unk4 = other.Unk4;
          }
          if (other.Unk5 != 0UL) {
            Unk5 = other.Unk5;
          }
          if (other.GyroscopeAngle6 != 0D) {
            GyroscopeAngle6 = other.GyroscopeAngle6;
          }
          if (other.GyroscopeAngle7 != 0D) {
            GyroscopeAngle7 = other.GyroscopeAngle7;
          }
          if (other.GyroscopeAngle8 != 0D) {
            GyroscopeAngle8 = other.GyroscopeAngle8;
          }
          if (other.Unk10 != 0UL) {
            Unk10 = other.Unk10;
          }
          if (other.Unk11 != 0UL) {
            Unk11 = other.Unk11;
          }
          if (other.Unk12 != 0UL) {
            Unk12 = other.Unk12;
          }
          if (other.Unk13 != 0UL) {
            Unk13 = other.Unk13;
          }
          if (other.Unk14 != 0UL) {
            Unk14 = other.Unk14;
          }
          if (other.AccelerometerX != 0D) {
            AccelerometerX = other.AccelerometerX;
          }
          if (other.AccelerometerY != 0D) {
            AccelerometerY = other.AccelerometerY;
          }
          if (other.AccelerometerZ != 0D) {
            AccelerometerZ = other.AccelerometerZ;
          }
          if (other.AccelerometerAxes != 0UL) {
            AccelerometerAxes = other.AccelerometerAxes;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 8: {
                TimestampSnapshot = input.ReadUInt64();
                break;
              }
              case 24: {
                Unk3 = input.ReadUInt64();
                break;
              }
              case 32: {
                Unk4 = input.ReadUInt64();
                break;
              }
              case 40: {
                Unk5 = input.ReadUInt64();
                break;
              }
              case 49: {
                GyroscopeAngle6 = input.ReadDouble();
                break;
              }
              case 57: {
                GyroscopeAngle7 = input.ReadDouble();
                break;
              }
              case 65: {
                GyroscopeAngle8 = input.ReadDouble();
                break;
              }
              case 80: {
                Unk10 = input.ReadUInt64();
                break;
              }
              case 88: {
                Unk11 = input.ReadUInt64();
                break;
              }
              case 96: {
                Unk12 = input.ReadUInt64();
                break;
              }
              case 104: {
                Unk13 = input.ReadUInt64();
                break;
              }
              case 112: {
                Unk14 = input.ReadUInt64();
                break;
              }
              case 129: {
                AccelerometerX = input.ReadDouble();
                break;
              }
              case 137: {
                AccelerometerY = input.ReadDouble();
                break;
              }
              case 145: {
                AccelerometerZ = input.ReadDouble();
                break;
              }
              case 152: {
                AccelerometerAxes = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

      public sealed partial class DeviceInfo : pb::IMessage<DeviceInfo> {
        private static readonly pb::MessageParser<DeviceInfo> _parser = new pb::MessageParser<DeviceInfo>(() => new DeviceInfo());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<DeviceInfo> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[3]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceInfo() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceInfo(DeviceInfo other) : this() {
          deviceId_ = other.deviceId_;
          androidBoardName_ = other.androidBoardName_;
          androidBootloader_ = other.androidBootloader_;
          deviceBrand_ = other.deviceBrand_;
          deviceModel_ = other.deviceModel_;
          deviceModelIdentifier_ = other.deviceModelIdentifier_;
          deviceCommsModel_ = other.deviceCommsModel_;
          hardwareManufacturer_ = other.hardwareManufacturer_;
          hardwareModel_ = other.hardwareModel_;
          firmwareBrand_ = other.firmwareBrand_;
          firmwareTags_ = other.firmwareTags_;
          firmwareType_ = other.firmwareType_;
          firmwareFingerprint_ = other.firmwareFingerprint_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public DeviceInfo Clone() {
          return new DeviceInfo(this);
        }

        /// <summary>Field number for the "device_id" field.</summary>
        public const int DeviceIdFieldNumber = 1;
        private string deviceId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceId {
          get { return deviceId_; }
          set {
            deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "android_board_name" field.</summary>
        public const int AndroidBoardNameFieldNumber = 2;
        private string androidBoardName_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AndroidBoardName {
          get { return androidBoardName_; }
          set {
            androidBoardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "android_bootloader" field.</summary>
        public const int AndroidBootloaderFieldNumber = 3;
        private string androidBootloader_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string AndroidBootloader {
          get { return androidBootloader_; }
          set {
            androidBootloader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "device_brand" field.</summary>
        public const int DeviceBrandFieldNumber = 4;
        private string deviceBrand_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceBrand {
          get { return deviceBrand_; }
          set {
            deviceBrand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "device_model" field.</summary>
        public const int DeviceModelFieldNumber = 5;
        private string deviceModel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceModel {
          get { return deviceModel_; }
          set {
            deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "device_model_identifier" field.</summary>
        public const int DeviceModelIdentifierFieldNumber = 6;
        private string deviceModelIdentifier_ = "";
        /// <summary>
        ///  Android only
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceModelIdentifier {
          get { return deviceModelIdentifier_; }
          set {
            deviceModelIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "device_comms_model" field.</summary>
        public const int DeviceCommsModelFieldNumber = 7;
        private string deviceCommsModel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string DeviceCommsModel {
          get { return deviceCommsModel_; }
          set {
            deviceCommsModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "hardware_manufacturer" field.</summary>
        public const int HardwareManufacturerFieldNumber = 8;
        private string hardwareManufacturer_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HardwareManufacturer {
          get { return hardwareManufacturer_; }
          set {
            hardwareManufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "hardware_model" field.</summary>
        public const int HardwareModelFieldNumber = 9;
        private string hardwareModel_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string HardwareModel {
          get { return hardwareModel_; }
          set {
            hardwareModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "firmware_brand" field.</summary>
        public const int FirmwareBrandFieldNumber = 10;
        private string firmwareBrand_ = "";
        /// <summary>
        ///  On iOS: "iPhone OS"
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirmwareBrand {
          get { return firmwareBrand_; }
          set {
            firmwareBrand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "firmware_tags" field.</summary>
        public const int FirmwareTagsFieldNumber = 12;
        private string firmwareTags_ = "";
        /// <summary>
        ///  Android only
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirmwareTags {
          get { return firmwareTags_; }
          set {
            firmwareTags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "firmware_type" field.</summary>
        public const int FirmwareTypeFieldNumber = 13;
        private string firmwareType_ = "";
        /// <summary>
        ///  On iOS instead: iOS version
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirmwareType {
          get { return firmwareType_; }
          set {
            firmwareType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "firmware_fingerprint" field.</summary>
        public const int FirmwareFingerprintFieldNumber = 14;
        private string firmwareFingerprint_ = "";
        /// <summary>
        ///  Android only
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string FirmwareFingerprint {
          get { return firmwareFingerprint_; }
          set {
            firmwareFingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as DeviceInfo);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(DeviceInfo other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (DeviceId != other.DeviceId) return false;
          if (AndroidBoardName != other.AndroidBoardName) return false;
          if (AndroidBootloader != other.AndroidBootloader) return false;
          if (DeviceBrand != other.DeviceBrand) return false;
          if (DeviceModel != other.DeviceModel) return false;
          if (DeviceModelIdentifier != other.DeviceModelIdentifier) return false;
          if (DeviceCommsModel != other.DeviceCommsModel) return false;
          if (HardwareManufacturer != other.HardwareManufacturer) return false;
          if (HardwareModel != other.HardwareModel) return false;
          if (FirmwareBrand != other.FirmwareBrand) return false;
          if (FirmwareTags != other.FirmwareTags) return false;
          if (FirmwareType != other.FirmwareType) return false;
          if (FirmwareFingerprint != other.FirmwareFingerprint) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
          if (AndroidBoardName.Length != 0) hash ^= AndroidBoardName.GetHashCode();
          if (AndroidBootloader.Length != 0) hash ^= AndroidBootloader.GetHashCode();
          if (DeviceBrand.Length != 0) hash ^= DeviceBrand.GetHashCode();
          if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
          if (DeviceModelIdentifier.Length != 0) hash ^= DeviceModelIdentifier.GetHashCode();
          if (DeviceCommsModel.Length != 0) hash ^= DeviceCommsModel.GetHashCode();
          if (HardwareManufacturer.Length != 0) hash ^= HardwareManufacturer.GetHashCode();
          if (HardwareModel.Length != 0) hash ^= HardwareModel.GetHashCode();
          if (FirmwareBrand.Length != 0) hash ^= FirmwareBrand.GetHashCode();
          if (FirmwareTags.Length != 0) hash ^= FirmwareTags.GetHashCode();
          if (FirmwareType.Length != 0) hash ^= FirmwareType.GetHashCode();
          if (FirmwareFingerprint.Length != 0) hash ^= FirmwareFingerprint.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (DeviceId.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(DeviceId);
          }
          if (AndroidBoardName.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(AndroidBoardName);
          }
          if (AndroidBootloader.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(AndroidBootloader);
          }
          if (DeviceBrand.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(DeviceBrand);
          }
          if (DeviceModel.Length != 0) {
            output.WriteRawTag(42);
            output.WriteString(DeviceModel);
          }
          if (DeviceModelIdentifier.Length != 0) {
            output.WriteRawTag(50);
            output.WriteString(DeviceModelIdentifier);
          }
          if (DeviceCommsModel.Length != 0) {
            output.WriteRawTag(58);
            output.WriteString(DeviceCommsModel);
          }
          if (HardwareManufacturer.Length != 0) {
            output.WriteRawTag(66);
            output.WriteString(HardwareManufacturer);
          }
          if (HardwareModel.Length != 0) {
            output.WriteRawTag(74);
            output.WriteString(HardwareModel);
          }
          if (FirmwareBrand.Length != 0) {
            output.WriteRawTag(82);
            output.WriteString(FirmwareBrand);
          }
          if (FirmwareTags.Length != 0) {
            output.WriteRawTag(98);
            output.WriteString(FirmwareTags);
          }
          if (FirmwareType.Length != 0) {
            output.WriteRawTag(106);
            output.WriteString(FirmwareType);
          }
          if (FirmwareFingerprint.Length != 0) {
            output.WriteRawTag(114);
            output.WriteString(FirmwareFingerprint);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (DeviceId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
          }
          if (AndroidBoardName.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AndroidBoardName);
          }
          if (AndroidBootloader.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(AndroidBootloader);
          }
          if (DeviceBrand.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceBrand);
          }
          if (DeviceModel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
          }
          if (DeviceModelIdentifier.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModelIdentifier);
          }
          if (DeviceCommsModel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceCommsModel);
          }
          if (HardwareManufacturer.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareManufacturer);
          }
          if (HardwareModel.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareModel);
          }
          if (FirmwareBrand.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareBrand);
          }
          if (FirmwareTags.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareTags);
          }
          if (FirmwareType.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareType);
          }
          if (FirmwareFingerprint.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareFingerprint);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(DeviceInfo other) {
          if (other == null) {
            return;
          }
          if (other.DeviceId.Length != 0) {
            DeviceId = other.DeviceId;
          }
          if (other.AndroidBoardName.Length != 0) {
            AndroidBoardName = other.AndroidBoardName;
          }
          if (other.AndroidBootloader.Length != 0) {
            AndroidBootloader = other.AndroidBootloader;
          }
          if (other.DeviceBrand.Length != 0) {
            DeviceBrand = other.DeviceBrand;
          }
          if (other.DeviceModel.Length != 0) {
            DeviceModel = other.DeviceModel;
          }
          if (other.DeviceModelIdentifier.Length != 0) {
            DeviceModelIdentifier = other.DeviceModelIdentifier;
          }
          if (other.DeviceCommsModel.Length != 0) {
            DeviceCommsModel = other.DeviceCommsModel;
          }
          if (other.HardwareManufacturer.Length != 0) {
            HardwareManufacturer = other.HardwareManufacturer;
          }
          if (other.HardwareModel.Length != 0) {
            HardwareModel = other.HardwareModel;
          }
          if (other.FirmwareBrand.Length != 0) {
            FirmwareBrand = other.FirmwareBrand;
          }
          if (other.FirmwareTags.Length != 0) {
            FirmwareTags = other.FirmwareTags;
          }
          if (other.FirmwareType.Length != 0) {
            FirmwareType = other.FirmwareType;
          }
          if (other.FirmwareFingerprint.Length != 0) {
            FirmwareFingerprint = other.FirmwareFingerprint;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                DeviceId = input.ReadString();
                break;
              }
              case 18: {
                AndroidBoardName = input.ReadString();
                break;
              }
              case 26: {
                AndroidBootloader = input.ReadString();
                break;
              }
              case 34: {
                DeviceBrand = input.ReadString();
                break;
              }
              case 42: {
                DeviceModel = input.ReadString();
                break;
              }
              case 50: {
                DeviceModelIdentifier = input.ReadString();
                break;
              }
              case 58: {
                DeviceCommsModel = input.ReadString();
                break;
              }
              case 66: {
                HardwareManufacturer = input.ReadString();
                break;
              }
              case 74: {
                HardwareModel = input.ReadString();
                break;
              }
              case 82: {
                FirmwareBrand = input.ReadString();
                break;
              }
              case 98: {
                FirmwareTags = input.ReadString();
                break;
              }
              case 106: {
                FirmwareType = input.ReadString();
                break;
              }
              case 114: {
                FirmwareFingerprint = input.ReadString();
                break;
              }
            }
          }
        }

      }

      /// <summary>
      ///  Only appears rarely
      /// </summary>
      public sealed partial class Unknown9 : pb::IMessage<Unknown9> {
        private static readonly pb::MessageParser<Unknown9> _parser = new pb::MessageParser<Unknown9>(() => new Unknown9());
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<Unknown9> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::POGOProtos.Networking.Signature.Signature.Descriptor.NestedTypes[4]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unknown9() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unknown9(Unknown9 other) : this() {
          unk3_ = other.unk3_;
          unk5_ = other.unk5_;
          unk6_ = other.unk6_;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public Unknown9 Clone() {
          return new Unknown9(this);
        }

        /// <summary>Field number for the "unk3" field.</summary>
        public const int Unk3FieldNumber = 3;
        private ulong unk3_;
        /// <summary>
        ///  all of these had 1 as their value
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk3 {
          get { return unk3_; }
          set {
            unk3_ = value;
          }
        }

        /// <summary>Field number for the "unk5" field.</summary>
        public const int Unk5FieldNumber = 5;
        private ulong unk5_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk5 {
          get { return unk5_; }
          set {
            unk5_ = value;
          }
        }

        /// <summary>Field number for the "unk6" field.</summary>
        public const int Unk6FieldNumber = 6;
        private ulong unk6_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public ulong Unk6 {
          get { return unk6_; }
          set {
            unk6_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as Unknown9);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(Unknown9 other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Unk3 != other.Unk3) return false;
          if (Unk5 != other.Unk5) return false;
          if (Unk6 != other.Unk6) return false;
          return true;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Unk3 != 0UL) hash ^= Unk3.GetHashCode();
          if (Unk5 != 0UL) hash ^= Unk5.GetHashCode();
          if (Unk6 != 0UL) hash ^= Unk6.GetHashCode();
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
          if (Unk3 != 0UL) {
            output.WriteRawTag(24);
            output.WriteUInt64(Unk3);
          }
          if (Unk5 != 0UL) {
            output.WriteRawTag(40);
            output.WriteUInt64(Unk5);
          }
          if (Unk6 != 0UL) {
            output.WriteRawTag(48);
            output.WriteUInt64(Unk6);
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Unk3 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk3);
          }
          if (Unk5 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk5);
          }
          if (Unk6 != 0UL) {
            size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Unk6);
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(Unknown9 other) {
          if (other == null) {
            return;
          }
          if (other.Unk3 != 0UL) {
            Unk3 = other.Unk3;
          }
          if (other.Unk5 != 0UL) {
            Unk5 = other.Unk5;
          }
          if (other.Unk6 != 0UL) {
            Unk6 = other.Unk6;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 24: {
                Unk3 = input.ReadUInt64();
                break;
              }
              case 40: {
                Unk5 = input.ReadUInt64();
                break;
              }
              case 48: {
                Unk6 = input.ReadUInt64();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
