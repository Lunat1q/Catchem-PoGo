// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Envelopes/Signature.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Networking.Envelopes
{

    /// <summary>Holder for reflection information generated from POGOProtos/Networking/Envelopes/Signature.proto</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class SignatureReflection
    {

        #region Descriptor
        /// <summary>File descriptor for POGOProtos/Networking/Envelopes/Signature.proto</summary>
        public static pbr::FileDescriptor Descriptor
        {
            get { return descriptor; }
        }
        private static pbr::FileDescriptor descriptor;

        static SignatureReflection()
        {
            byte[] descriptorData = global::System.Convert.FromBase64String(
                string.Concat(
                  "Ci9QT0dPUHJvdG9zL05ldHdvcmtpbmcvRW52ZWxvcGVzL1NpZ25hdHVyZS5w",
                  "cm90bxIfUE9HT1Byb3Rvcy5OZXR3b3JraW5nLkVudmVsb3BlcyKXEgoJU2ln",
                  "bmF0dXJlEj8KBmZpZWxkMRgBIAMoCzIvLlBPR09Qcm90b3MuTmV0d29ya2lu",
                  "Zy5FbnZlbG9wZXMuVW5rbm93bk1lc3NhZ2USHQoVdGltZXN0YW1wX3NpbmNl",
                  "X3N0YXJ0GAIgASgEEg4KBmZpZWxkMxgDIAEoCRJMCgxsb2NhdGlvbl9maXgY",
                  "BCADKAsyNi5QT0dPUHJvdG9zLk5ldHdvcmtpbmcuRW52ZWxvcGVzLlNpZ25h",
                  "dHVyZS5Mb2NhdGlvbkZpeBJLCghncHNfaW5mbxgFIAMoCzI5LlBPR09Qcm90",
                  "b3MuTmV0d29ya2luZy5FbnZlbG9wZXMuU2lnbmF0dXJlLkFuZHJvaWRHcHNJ",
                  "bmZvEj8KBmZpZWxkNhgGIAMoCzIvLlBPR09Qcm90b3MuTmV0d29ya2luZy5F",
                  "bnZlbG9wZXMuVW5rbm93bk1lc3NhZ2USSgoLc2Vuc29yX2luZm8YByADKAsy",
                  "NS5QT0dPUHJvdG9zLk5ldHdvcmtpbmcuRW52ZWxvcGVzLlNpZ25hdHVyZS5T",
                  "ZW5zb3JJbmZvEkoKC2RldmljZV9pbmZvGAggASgLMjUuUE9HT1Byb3Rvcy5O",
                  "ZXR3b3JraW5nLkVudmVsb3Blcy5TaWduYXR1cmUuRGV2aWNlSW5mbxJSCg9h",
                  "Y3Rpdml0eV9zdGF0dXMYCSABKAsyOS5QT0dPUHJvdG9zLk5ldHdvcmtpbmcu",
                  "RW52ZWxvcGVzLlNpZ25hdHVyZS5BY3Rpdml0eVN0YXR1cxIWCg5sb2NhdGlv",
                  "bl9oYXNoMRgKIAEoBRIPCgdmaWVsZDExGAsgASgIEg8KB2ZpZWxkMTIYDCAB",
                  "KAgSDwoHZmllbGQxMxgNIAEoBRIPCgdmaWVsZDE0GA4gASgFEg8KB2ZpZWxk",
                  "MTUYDyABKAkSDwoHZmllbGQxNhgQIAEoBRIPCgdmaWVsZDE3GBEgASgJEg8K",
                  "B2ZpZWxkMTgYEiABKAkSDwoHZmllbGQxORgTIAEoCBIWCg5sb2NhdGlvbl9o",
                  "YXNoMhgUIAEoBRIPCgdmaWVsZDIxGBUgASgIEhQKDHNlc3Npb25faGFzaBgW",
                  "IAEoDBIRCgl0aW1lc3RhbXAYFyABKAQSFAoMcmVxdWVzdF9oYXNoGBggAygE",
                  "EhEKCXVua25vd24yNRgZIAEoAxqIAgoLTG9jYXRpb25GaXgSEAoIcHJvdmlk",
                  "ZXIYASABKAkSGgoSdGltZXN0YW1wX3NuYXBzaG90GAIgASgEEhAKCGFsdGl0",
                  "dWRlGAQgASgCEhAKCGxhdGl0dWRlGA0gASgCEhEKCWxvbmdpdHVkZRgOIAEo",
                  "AhINCgVzcGVlZBgSIAEoAhIOCgZjb3Vyc2UYFCABKAISGwoTaG9yaXpvbnRh",
                  "bF9hY2N1cmFjeRgVIAEoAhIZChF2ZXJ0aWNhbF9hY2N1cmFjeRgWIAEoAhIX",
                  "Cg9wcm92aWRlcl9zdGF0dXMYGiABKAQSDQoFZmxvb3IYGyABKA0SFQoNbG9j",
                  "YXRpb25fdHlwZRgcIAEoBBqvAQoOQW5kcm9pZEdwc0luZm8SEwoLdGltZV90",
                  "b19maXgYASABKAQSFgoOc2F0ZWxsaXRlc19wcm4YAiADKAUSDwoHYXppbXV0",
                  "aBgDIAMoAhIRCgllbGV2YXRpb24YBCADKAISCwoDc25yGAUgAygCEhMKC2hh",
                  "c19hbG1hbmFjGAYgAygIEhUKDWhhc19lcGhlbWVyaXMYByADKAgSEwoLdXNl",
                  "ZF9pbl9maXgYCCADKAgazQMKClNlbnNvckluZm8SGgoSdGltZXN0YW1wX3Nu",
                  "YXBzaG90GAEgASgEEh0KFWxpbmVhcl9hY2NlbGVyYXRpb25feBgDIAEoARId",
                  "ChVsaW5lYXJfYWNjZWxlcmF0aW9uX3kYBCABKAESHQoVbGluZWFyX2FjY2Vs",
                  "ZXJhdGlvbl96GAUgASgBEhgKEG1hZ25ldGljX2ZpZWxkX3gYBiABKAESGAoQ",
                  "bWFnbmV0aWNfZmllbGRfeRgHIAEoARIYChBtYWduZXRpY19maWVsZF96GAgg",
                  "ASgBEh8KF21hZ25ldGljX2ZpZWxkX2FjY3VyYWN5GAkgASgFEhYKDmF0dGl0",
                  "dWRlX3BpdGNoGAogASgBEhQKDGF0dGl0dWRlX3lhdxgLIAEoARIVCg1hdHRp",
                  "dHVkZV9yb2xsGAwgASgBEhcKD3JvdGF0aW9uX3JhdGVfeBgNIAEoARIXCg9y",
                  "b3RhdGlvbl9yYXRlX3kYDiABKAESFwoPcm90YXRpb25fcmF0ZV96GA8gASgB",
                  "EhEKCWdyYXZpdHlfeBgQIAEoARIRCglncmF2aXR5X3kYESABKAESEQoJZ3Jh",
                  "dml0eV96GBIgASgBEg4KBnN0YXR1cxgTIAEoBRraAgoKRGV2aWNlSW5mbxIR",
                  "CglkZXZpY2VfaWQYASABKAkSGgoSYW5kcm9pZF9ib2FyZF9uYW1lGAIgASgJ",
                  "EhoKEmFuZHJvaWRfYm9vdGxvYWRlchgDIAEoCRIUCgxkZXZpY2VfYnJhbmQY",
                  "BCABKAkSFAoMZGV2aWNlX21vZGVsGAUgASgJEh8KF2RldmljZV9tb2RlbF9p",
                  "ZGVudGlmaWVyGAYgASgJEhkKEWRldmljZV9tb2RlbF9ib290GAcgASgJEh0K",
                  "FWhhcmR3YXJlX21hbnVmYWN0dXJlchgIIAEoCRIWCg5oYXJkd2FyZV9tb2Rl",
                  "bBgJIAEoCRIWCg5maXJtd2FyZV9icmFuZBgKIAEoCRIVCg1maXJtd2FyZV90",
                  "YWdzGAwgASgJEhUKDWZpcm13YXJlX3R5cGUYDSABKAkSHAoUZmlybXdhcmVf",
                  "ZmluZ2VycHJpbnQYDiABKAkauwEKDkFjdGl2aXR5U3RhdHVzEhUKDXN0YXJ0",
                  "X3RpbWVfbXMYASABKAQSFgoOdW5rbm93bl9zdGF0dXMYAiABKAgSDwoHd2Fs",
                  "a2luZxgDIAEoCBIPCgdydW5uaW5nGAQgASgIEhIKCnN0YXRpb25hcnkYBSAB",
                  "KAgSEgoKYXV0b21vdGl2ZRgGIAEoCBIPCgd0aWx0aW5nGAcgASgIEg8KB2N5",
                  "Y2xpbmcYCCABKAgSDgoGc3RhdHVzGAkgASgMIhAKDlVua25vd25NZXNzYWdl",
                  "YgZwcm90bzM="));
            descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
                new pbr::FileDescriptor[] { },
                new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(Signature), Signature.Parser, new[]{ "Field1", "TimestampSinceStart", "Field3", "LocationFix", "GpsInfo", "Field6", "SensorInfo", "DeviceInfo", "ActivityStatus", "LocationHash1", "Field11", "Field12", "Field13", "Field14", "Field15", "Field16", "Field17", "Field18", "Field19", "LocationHash2", "Field21", "SessionHash", "Timestamp", "RequestHash", "Unknown25" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(Signature.Types.LocationFix), Signature.Types.LocationFix.Parser, new[]{ "Provider", "TimestampSnapshot", "Altitude", "Latitude", "Longitude", "Speed", "Course", "HorizontalAccuracy", "VerticalAccuracy", "ProviderStatus", "Floor", "LocationType" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(Signature.Types.AndroidGpsInfo), Signature.Types.AndroidGpsInfo.Parser, new[]{ "TimeToFix", "SatellitesPrn", "Azimuth", "Elevation", "Snr", "HasAlmanac", "HasEphemeris", "UsedInFix" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(Signature.Types.SensorInfo), Signature.Types.SensorInfo.Parser, new[]{ "TimestampSnapshot", "LinearAccelerationX", "LinearAccelerationY", "LinearAccelerationZ", "MagneticFieldX", "MagneticFieldY", "MagneticFieldZ", "MagneticFieldAccuracy", "AttitudePitch", "AttitudeYaw", "AttitudeRoll", "RotationRateX", "RotationRateY", "RotationRateZ", "GravityX", "GravityY", "GravityZ", "Status" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(Signature.Types.DeviceInfo), Signature.Types.DeviceInfo.Parser, new[]{ "DeviceId", "AndroidBoardName", "AndroidBootloader", "DeviceBrand", "DeviceModel", "DeviceModelIdentifier", "DeviceModelBoot", "HardwareManufacturer", "HardwareModel", "FirmwareBrand", "FirmwareTags", "FirmwareType", "FirmwareFingerprint" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(Signature.Types.ActivityStatus), Signature.Types.ActivityStatus.Parser, new[]{ "StartTimeMs", "UnknownStatus", "Walking", "Running", "Stationary", "Automotive", "Tilting", "Cycling", "Status" }, null, null, null)}),
            new pbr::GeneratedClrTypeInfo(typeof(UnknownMessage), global::POGOProtos.Networking.Envelopes.UnknownMessage.Parser, null, null, null, null)
                }));
        }
        #endregion

    }
    #region Messages
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Signature : pb::IMessage<Signature>
    {
        private static readonly pb::MessageParser<Signature> _parser = new pb::MessageParser<Signature>(() => new Signature());
        public static pb::MessageParser<Signature> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor
        {
            get { return SignatureReflection.Descriptor.MessageTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        public Signature()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        public Signature(Signature other) : this()
        {
            field1_ = other.field1_.Clone();
            timestampSinceStart_ = other.timestampSinceStart_;
            field3_ = other.field3_;
            locationFix_ = other.locationFix_.Clone();
            gpsInfo_ = other.gpsInfo_.Clone();
            field6_ = other.field6_.Clone();
            sensorInfo_ = other.sensorInfo_.Clone();
            DeviceInfo = other.deviceInfo_ != null ? other.DeviceInfo.Clone() : null;
            ActivityStatus = other.activityStatus_ != null ? other.ActivityStatus.Clone() : null;
            locationHash1_ = other.locationHash1_;
            field11_ = other.field11_;
            field12_ = other.field12_;
            field13_ = other.field13_;
            field14_ = other.field14_;
            field15_ = other.field15_;
            field16_ = other.field16_;
            field17_ = other.field17_;
            field18_ = other.field18_;
            field19_ = other.field19_;
            locationHash2_ = other.locationHash2_;
            field21_ = other.field21_;
            sessionHash_ = other.sessionHash_;
            timestamp_ = other.timestamp_;
            requestHash_ = other.requestHash_.Clone();
            unknown25_ = other.unknown25_;
        }

        public Signature Clone()
        {
            return new Signature(this);
        }

        /// <summary>Field number for the "field1" field.</summary>
        public const int Field1FieldNumber = 1;
        private static readonly pb::FieldCodec<UnknownMessage> _repeated_field1_codec
            = pb::FieldCodec.ForMessage(10, global::POGOProtos.Networking.Envelopes.UnknownMessage.Parser);
        private readonly pbc::RepeatedField<UnknownMessage> field1_ = new pbc::RepeatedField<UnknownMessage>();
        public pbc::RepeatedField<UnknownMessage> Field1
        {
            get { return field1_; }
        }

        /// <summary>Field number for the "timestamp_since_start" field.</summary>
        public const int TimestampSinceStartFieldNumber = 2;
        private ulong timestampSinceStart_;
        /// <summary>
        ///  in ms
        /// </summary>
        public ulong TimestampSinceStart
        {
            get { return timestampSinceStart_; }
            set
            {
                timestampSinceStart_ = value;
            }
        }

        /// <summary>Field number for the "field3" field.</summary>
        public const int Field3FieldNumber = 3;
        private string field3_ = "";
        public string Field3
        {
            get { return field3_; }
            set
            {
                field3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "location_fix" field.</summary>
        public const int LocationFixFieldNumber = 4;
        private static readonly pb::FieldCodec<global::POGOProtos.Networking.Envelopes.Signature.Types.LocationFix> _repeated_locationFix_codec
            = pb::FieldCodec.ForMessage(34, global::POGOProtos.Networking.Envelopes.Signature.Types.LocationFix.Parser);
        private readonly pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.LocationFix> locationFix_ = new pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.LocationFix>();
        public pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.LocationFix> LocationFix
        {
            get { return locationFix_; }
        }

        /// <summary>Field number for the "gps_info" field.</summary>
        public const int GpsInfoFieldNumber = 5;
        private static readonly pb::FieldCodec<global::POGOProtos.Networking.Envelopes.Signature.Types.AndroidGpsInfo> _repeated_gpsInfo_codec
            = pb::FieldCodec.ForMessage(42, global::POGOProtos.Networking.Envelopes.Signature.Types.AndroidGpsInfo.Parser);
        private readonly pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.AndroidGpsInfo> gpsInfo_ = new pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.AndroidGpsInfo>();
        public pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.AndroidGpsInfo> GpsInfo
        {
            get { return gpsInfo_; }
        }

        /// <summary>Field number for the "field6" field.</summary>
        public const int Field6FieldNumber = 6;
        private static readonly pb::FieldCodec<UnknownMessage> _repeated_field6_codec
            = pb::FieldCodec.ForMessage(50, global::POGOProtos.Networking.Envelopes.UnknownMessage.Parser);
        private readonly pbc::RepeatedField<UnknownMessage> field6_ = new pbc::RepeatedField<UnknownMessage>();
        public pbc::RepeatedField<UnknownMessage> Field6
        {
            get { return field6_; }
        }

        /// <summary>Field number for the "sensor_info" field.</summary>
        public const int SensorInfoFieldNumber = 7;
        private static readonly pb::FieldCodec<global::POGOProtos.Networking.Envelopes.Signature.Types.SensorInfo> _repeated_sensorInfo_codec
            = pb::FieldCodec.ForMessage(58, global::POGOProtos.Networking.Envelopes.Signature.Types.SensorInfo.Parser);
        private readonly pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.SensorInfo> sensorInfo_ = new pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.SensorInfo>();
        public pbc::RepeatedField<global::POGOProtos.Networking.Envelopes.Signature.Types.SensorInfo> SensorInfo
        {
            get { return sensorInfo_; }
        }

        /// <summary>Field number for the "device_info" field.</summary>
        public const int DeviceInfoFieldNumber = 8;
        private global::POGOProtos.Networking.Envelopes.Signature.Types.DeviceInfo deviceInfo_;
        public global::POGOProtos.Networking.Envelopes.Signature.Types.DeviceInfo DeviceInfo
        {
            get { return deviceInfo_; }
            set
            {
                deviceInfo_ = value;
            }
        }

        /// <summary>Field number for the "activity_status" field.</summary>
        public const int ActivityStatusFieldNumber = 9;
        private global::POGOProtos.Networking.Envelopes.Signature.Types.ActivityStatus activityStatus_;
        public global::POGOProtos.Networking.Envelopes.Signature.Types.ActivityStatus ActivityStatus
        {
            get { return activityStatus_; }
            set
            {
                activityStatus_ = value;
            }
        }

        /// <summary>Field number for the "location_hash1" field.</summary>
        public const int LocationHash1FieldNumber = 10;
        private uint locationHash1_;
        public uint LocationHash1
        {
            get { return locationHash1_; }
            set
            {
                locationHash1_ = value;
            }
        }

        /// <summary>Field number for the "field11" field.</summary>
        public const int Field11FieldNumber = 11;
        private bool field11_;
        public bool Field11
        {
            get { return field11_; }
            set
            {
                field11_ = value;
            }
        }

        /// <summary>Field number for the "field12" field.</summary>
        public const int Field12FieldNumber = 12;
        private bool field12_;
        public bool Field12
        {
            get { return field12_; }
            set
            {
                field12_ = value;
            }
        }

        /// <summary>Field number for the "field13" field.</summary>
        public const int Field13FieldNumber = 13;
        private int field13_;
        public int Field13
        {
            get { return field13_; }
            set
            {
                field13_ = value;
            }
        }

        /// <summary>Field number for the "field14" field.</summary>
        public const int Field14FieldNumber = 14;
        private int field14_;
        public int Field14
        {
            get { return field14_; }
            set
            {
                field14_ = value;
            }
        }

        /// <summary>Field number for the "field15" field.</summary>
        public const int Field15FieldNumber = 15;
        private string field15_ = "";
        public string Field15
        {
            get { return field15_; }
            set
            {
                field15_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "field16" field.</summary>
        public const int Field16FieldNumber = 16;
        private int field16_;
        public int Field16
        {
            get { return field16_; }
            set
            {
                field16_ = value;
            }
        }

        /// <summary>Field number for the "field17" field.</summary>
        public const int Field17FieldNumber = 17;
        private string field17_ = "";
        public string Field17
        {
            get { return field17_; }
            set
            {
                field17_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "field18" field.</summary>
        public const int Field18FieldNumber = 18;
        private string field18_ = "";
        public string Field18
        {
            get { return field18_; }
            set
            {
                field18_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "field19" field.</summary>
        public const int Field19FieldNumber = 19;
        private bool field19_;
        public bool Field19
        {
            get { return field19_; }
            set
            {
                field19_ = value;
            }
        }

        /// <summary>Field number for the "location_hash2" field.</summary>
        public const int LocationHash2FieldNumber = 20;
        private uint locationHash2_;
        public uint LocationHash2
        {
            get { return locationHash2_; }
            set
            {
                locationHash2_ = value;
            }
        }

        /// <summary>Field number for the "field21" field.</summary>
        public const int Field21FieldNumber = 21;
        private bool field21_;
        public bool Field21
        {
            get { return field21_; }
            set
            {
                field21_ = value;
            }
        }

        /// <summary>Field number for the "session_hash" field.</summary>
        public const int SessionHashFieldNumber = 22;
        private pb::ByteString sessionHash_ = pb::ByteString.Empty;
        /// <summary>
        ///  32 random bytes, unique per session.
        /// </summary>
        public pb::ByteString SessionHash
        {
            get { return sessionHash_; }
            set
            {
                sessionHash_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
        }

        /// <summary>Field number for the "timestamp" field.</summary>
        public const int TimestampFieldNumber = 23;
        private ulong timestamp_;
        /// <summary>
        ///  epoch timestamp in ms
        /// </summary>
        public ulong Timestamp
        {
            get { return timestamp_; }
            set
            {
                timestamp_ = value;
            }
        }

        /// <summary>Field number for the "request_hash" field.</summary>
        public const int RequestHashFieldNumber = 24;
        private static readonly pb::FieldCodec<ulong> _repeated_requestHash_codec
            = pb::FieldCodec.ForUInt64(194);
        private readonly pbc::RepeatedField<ulong> requestHash_ = new pbc::RepeatedField<ulong>();
        /// <summary>
        ///  hashes of each request message in a hashArray signed based on the auth_token or auth_info - xxhash64
        /// </summary>
        public pbc::RepeatedField<ulong> RequestHash
        {
            get { return requestHash_; }
        }

        /// <summary>Field number for the "unknown25" field.</summary>
        public const int Unknown25FieldNumber = 25;
        private ulong unknown25_;
        public ulong Unknown25
        {
            get { return unknown25_; }
            set
            {
                unknown25_ = value;
            }
        }

        public override bool Equals(object other)
        {
            return Equals(other as Signature);
        }

        public bool Equals(Signature other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            if (!field1_.Equals(other.field1_)) return false;
            if (TimestampSinceStart != other.TimestampSinceStart) return false;
            if (Field3 != other.Field3) return false;
            if (!locationFix_.Equals(other.locationFix_)) return false;
            if (!gpsInfo_.Equals(other.gpsInfo_)) return false;
            if (!field6_.Equals(other.field6_)) return false;
            if (!sensorInfo_.Equals(other.sensorInfo_)) return false;
            if (!object.Equals(DeviceInfo, other.DeviceInfo)) return false;
            if (!object.Equals(ActivityStatus, other.ActivityStatus)) return false;
            if (LocationHash1 != other.LocationHash1) return false;
            if (Field11 != other.Field11) return false;
            if (Field12 != other.Field12) return false;
            if (Field13 != other.Field13) return false;
            if (Field14 != other.Field14) return false;
            if (Field15 != other.Field15) return false;
            if (Field16 != other.Field16) return false;
            if (Field17 != other.Field17) return false;
            if (Field18 != other.Field18) return false;
            if (Field19 != other.Field19) return false;
            if (LocationHash2 != other.LocationHash2) return false;
            if (Field21 != other.Field21) return false;
            if (SessionHash != other.SessionHash) return false;
            if (Timestamp != other.Timestamp) return false;
            if (!requestHash_.Equals(other.requestHash_)) return false;
            if (Unknown25 != other.Unknown25) return false;
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            hash ^= field1_.GetHashCode();
            if (TimestampSinceStart != 0UL) hash ^= TimestampSinceStart.GetHashCode();
            if (Field3.Length != 0) hash ^= Field3.GetHashCode();
            hash ^= locationFix_.GetHashCode();
            hash ^= gpsInfo_.GetHashCode();
            hash ^= field6_.GetHashCode();
            hash ^= sensorInfo_.GetHashCode();
            if (deviceInfo_ != null) hash ^= DeviceInfo.GetHashCode();
            if (activityStatus_ != null) hash ^= ActivityStatus.GetHashCode();
            if (LocationHash1 != 0) hash ^= LocationHash1.GetHashCode();
            if (Field11 != false) hash ^= Field11.GetHashCode();
            if (Field12 != false) hash ^= Field12.GetHashCode();
            if (Field13 != 0) hash ^= Field13.GetHashCode();
            if (Field14 != 0) hash ^= Field14.GetHashCode();
            if (Field15.Length != 0) hash ^= Field15.GetHashCode();
            if (Field16 != 0) hash ^= Field16.GetHashCode();
            if (Field17.Length != 0) hash ^= Field17.GetHashCode();
            if (Field18.Length != 0) hash ^= Field18.GetHashCode();
            if (Field19 != false) hash ^= Field19.GetHashCode();
            if (LocationHash2 != 0) hash ^= LocationHash2.GetHashCode();
            if (Field21 != false) hash ^= Field21.GetHashCode();
            if (SessionHash.Length != 0) hash ^= SessionHash.GetHashCode();
            if (Timestamp != 0UL) hash ^= Timestamp.GetHashCode();
            hash ^= requestHash_.GetHashCode();
            if (Unknown25 != 0L) hash ^= Unknown25.GetHashCode();
            return hash;
        }

        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output)
        {
            field1_.WriteTo(output, _repeated_field1_codec);
            if (TimestampSinceStart != 0UL)
            {
                output.WriteRawTag(16);
                output.WriteUInt64(TimestampSinceStart);
            }
            if (Field3.Length != 0)
            {
                output.WriteRawTag(26);
                output.WriteString(Field3);
            }
            locationFix_.WriteTo(output, _repeated_locationFix_codec);
            gpsInfo_.WriteTo(output, _repeated_gpsInfo_codec);
            field6_.WriteTo(output, _repeated_field6_codec);
            sensorInfo_.WriteTo(output, _repeated_sensorInfo_codec);
            if (deviceInfo_ != null)
            {
                output.WriteRawTag(66);
                output.WriteMessage(DeviceInfo);
            }
            if (activityStatus_ != null)
            {
                output.WriteRawTag(74);
                output.WriteMessage(ActivityStatus);
            }
            if (LocationHash1 != 0)
            {
                output.WriteRawTag(80);
                output.WriteUInt32(LocationHash1);
            }
            if (Field11 != false)
            {
                output.WriteRawTag(88);
                output.WriteBool(Field11);
            }
            if (Field12 != false)
            {
                output.WriteRawTag(96);
                output.WriteBool(Field12);
            }
            if (Field13 != 0)
            {
                output.WriteRawTag(104);
                output.WriteInt32(Field13);
            }
            if (Field14 != 0)
            {
                output.WriteRawTag(112);
                output.WriteInt32(Field14);
            }
            if (Field15.Length != 0)
            {
                output.WriteRawTag(122);
                output.WriteString(Field15);
            }
            if (Field16 != 0)
            {
                output.WriteRawTag(128, 1);
                output.WriteInt32(Field16);
            }
            if (Field17.Length != 0)
            {
                output.WriteRawTag(138, 1);
                output.WriteString(Field17);
            }
            if (Field18.Length != 0)
            {
                output.WriteRawTag(146, 1);
                output.WriteString(Field18);
            }
            if (Field19 != false)
            {
                output.WriteRawTag(152, 1);
                output.WriteBool(Field19);
            }
            if (LocationHash2 != 0)
            {
                output.WriteRawTag(160, 1);
                output.WriteUInt32(LocationHash2);
            }
            if (Field21 != false)
            {
                output.WriteRawTag(168, 1);
                output.WriteBool(Field21);
            }
            if (SessionHash.Length != 0)
            {
                output.WriteRawTag(178, 1);
                output.WriteBytes(SessionHash);
            }
            if (Timestamp != 0UL)
            {
                output.WriteRawTag(184, 1);
                output.WriteUInt64(Timestamp);
            }
            requestHash_.WriteTo(output, _repeated_requestHash_codec);
            if (Unknown25 != 0L)
            {
                output.WriteRawTag(200, 1);
                output.WriteUInt64(Unknown25);
            }
        }

        public int CalculateSize()
        {
            int size = 0;
            size += field1_.CalculateSize(_repeated_field1_codec);
            if (TimestampSinceStart != 0UL)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampSinceStart);
            }
            if (Field3.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Field3);
            }
            size += locationFix_.CalculateSize(_repeated_locationFix_codec);
            size += gpsInfo_.CalculateSize(_repeated_gpsInfo_codec);
            size += field6_.CalculateSize(_repeated_field6_codec);
            size += sensorInfo_.CalculateSize(_repeated_sensorInfo_codec);
            if (deviceInfo_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceInfo);
            }
            if (activityStatus_ != null)
            {
                size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActivityStatus);
            }
            if (LocationHash1 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LocationHash1);
            }
            if (Field11 != false)
            {
                size += 1 + 1;
            }
            if (Field12 != false)
            {
                size += 1 + 1;
            }
            if (Field13 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Field13);
            }
            if (Field14 != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeInt32Size(Field14);
            }
            if (Field15.Length != 0)
            {
                size += 1 + pb::CodedOutputStream.ComputeStringSize(Field15);
            }
            if (Field16 != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeInt32Size(Field16);
            }
            if (Field17.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Field17);
            }
            if (Field18.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeStringSize(Field18);
            }
            if (Field19 != false)
            {
                size += 2 + 1;
            }
            if (LocationHash2 != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt32Size(LocationHash2);
            }
            if (Field21 != false)
            {
                size += 2 + 1;
            }
            if (SessionHash.Length != 0)
            {
                size += 2 + pb::CodedOutputStream.ComputeBytesSize(SessionHash);
            }
            if (Timestamp != 0UL)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Timestamp);
            }
            size += requestHash_.CalculateSize(_repeated_requestHash_codec);
            if (Unknown25 != 0L)
            {
                size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Unknown25);
            }
            return size;
        }

        public void MergeFrom(Signature other)
        {
            if (other == null)
            {
                return;
            }
            field1_.Add(other.field1_);
            if (other.TimestampSinceStart != 0UL)
            {
                TimestampSinceStart = other.TimestampSinceStart;
            }
            if (other.Field3.Length != 0)
            {
                Field3 = other.Field3;
            }
            locationFix_.Add(other.locationFix_);
            gpsInfo_.Add(other.gpsInfo_);
            field6_.Add(other.field6_);
            sensorInfo_.Add(other.sensorInfo_);
            if (other.deviceInfo_ != null)
            {
                if (deviceInfo_ == null)
                {
                    deviceInfo_ = new global::POGOProtos.Networking.Envelopes.Signature.Types.DeviceInfo();
                }
                DeviceInfo.MergeFrom(other.DeviceInfo);
            }
            if (other.activityStatus_ != null)
            {
                if (activityStatus_ == null)
                {
                    activityStatus_ = new global::POGOProtos.Networking.Envelopes.Signature.Types.ActivityStatus();
                }
                ActivityStatus.MergeFrom(other.ActivityStatus);
            }
            if (other.LocationHash1 != 0)
            {
                LocationHash1 = other.LocationHash1;
            }
            if (other.Field11 != false)
            {
                Field11 = other.Field11;
            }
            if (other.Field12 != false)
            {
                Field12 = other.Field12;
            }
            if (other.Field13 != 0)
            {
                Field13 = other.Field13;
            }
            if (other.Field14 != 0)
            {
                Field14 = other.Field14;
            }
            if (other.Field15.Length != 0)
            {
                Field15 = other.Field15;
            }
            if (other.Field16 != 0)
            {
                Field16 = other.Field16;
            }
            if (other.Field17.Length != 0)
            {
                Field17 = other.Field17;
            }
            if (other.Field18.Length != 0)
            {
                Field18 = other.Field18;
            }
            if (other.Field19 != false)
            {
                Field19 = other.Field19;
            }
            if (other.LocationHash2 != 0)
            {
                LocationHash2 = other.LocationHash2;
            }
            if (other.Field21 != false)
            {
                Field21 = other.Field21;
            }
            if (other.SessionHash.Length != 0)
            {
                SessionHash = other.SessionHash;
            }
            if (other.Timestamp != 0UL)
            {
                Timestamp = other.Timestamp;
            }
            requestHash_.Add(other.requestHash_);
            if (other.Unknown25 != 0L)
            {
                Unknown25 = other.Unknown25;
            }
        }

        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                    case 10:
                        {
                            field1_.AddEntriesFrom(input, _repeated_field1_codec);
                            break;
                        }
                    case 16:
                        {
                            TimestampSinceStart = input.ReadUInt64();
                            break;
                        }
                    case 26:
                        {
                            Field3 = input.ReadString();
                            break;
                        }
                    case 34:
                        {
                            locationFix_.AddEntriesFrom(input, _repeated_locationFix_codec);
                            break;
                        }
                    case 42:
                        {
                            gpsInfo_.AddEntriesFrom(input, _repeated_gpsInfo_codec);
                            break;
                        }
                    case 50:
                        {
                            field6_.AddEntriesFrom(input, _repeated_field6_codec);
                            break;
                        }
                    case 58:
                        {
                            sensorInfo_.AddEntriesFrom(input, _repeated_sensorInfo_codec);
                            break;
                        }
                    case 66:
                        {
                            if (deviceInfo_ == null)
                            {
                                deviceInfo_ = new global::POGOProtos.Networking.Envelopes.Signature.Types.DeviceInfo();
                            }
                            input.ReadMessage(deviceInfo_);
                            break;
                        }
                    case 74:
                        {
                            if (activityStatus_ == null)
                            {
                                activityStatus_ = new global::POGOProtos.Networking.Envelopes.Signature.Types.ActivityStatus();
                            }
                            input.ReadMessage(activityStatus_);
                            break;
                        }
                    case 80:
                        {
                            LocationHash1 = input.ReadUInt32();
                            break;
                        }
                    case 88:
                        {
                            Field11 = input.ReadBool();
                            break;
                        }
                    case 96:
                        {
                            Field12 = input.ReadBool();
                            break;
                        }
                    case 104:
                        {
                            Field13 = input.ReadInt32();
                            break;
                        }
                    case 112:
                        {
                            Field14 = input.ReadInt32();
                            break;
                        }
                    case 122:
                        {
                            Field15 = input.ReadString();
                            break;
                        }
                    case 128:
                        {
                            Field16 = input.ReadInt32();
                            break;
                        }
                    case 138:
                        {
                            Field17 = input.ReadString();
                            break;
                        }
                    case 146:
                        {
                            Field18 = input.ReadString();
                            break;
                        }
                    case 152:
                        {
                            Field19 = input.ReadBool();
                            break;
                        }
                    case 160:
                        {
                            LocationHash2 = input.ReadUInt32();
                            break;
                        }
                    case 168:
                        {
                            Field21 = input.ReadBool();
                            break;
                        }
                    case 178:
                        {
                            SessionHash = input.ReadBytes();
                            break;
                        }
                    case 184:
                        {
                            Timestamp = input.ReadUInt64();
                            break;
                        }
                    case 194:
                    case 192:
                        {
                            requestHash_.AddEntriesFrom(input, _repeated_requestHash_codec);
                            break;
                        }
                    case 200:
                        {
                            Unknown25 = input.ReadUInt64();
                            break;
                        }
                }
            }
        }

        #region Nested types
        /// <summary>Container for nested types declared in the Signature message type.</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static partial class Types
        {
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class LocationFix : pb::IMessage<LocationFix>
            {
                private static readonly pb::MessageParser<LocationFix> _parser = new pb::MessageParser<LocationFix>(() => new LocationFix());
                public static pb::MessageParser<LocationFix> Parser { get { return _parser; } }

                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Signature.Descriptor.NestedTypes[0]; }
                }

                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                public LocationFix()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                public LocationFix(LocationFix other) : this()
                {
                    provider_ = other.provider_;
                    timestampSnapshot_ = other.timestampSnapshot_;
                    altitude_ = other.altitude_;
                    latitude_ = other.latitude_;
                    longitude_ = other.longitude_;
                    speed_ = other.speed_;
                    course_ = other.course_;
                    horizontalAccuracy_ = other.horizontalAccuracy_;
                    verticalAccuracy_ = other.verticalAccuracy_;
                    providerStatus_ = other.providerStatus_;
                    floor_ = other.floor_;
                    locationType_ = other.locationType_;
                }

                public LocationFix Clone()
                {
                    return new LocationFix(this);
                }

                /// <summary>Field number for the "provider" field.</summary>
                public const int ProviderFieldNumber = 1;
                private string provider_ = "";
                /// <summary>
                ///  "network", "gps", "fused", possibly others
                /// </summary>
                public string Provider
                {
                    get { return provider_; }
                    set
                    {
                        provider_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "timestamp_snapshot" field.</summary>
                public const int TimestampSnapshotFieldNumber = 2;
                private ulong timestampSnapshot_;
                /// <summary>
                ///  in ms since start
                /// </summary>
                public ulong TimestampSnapshot
                {
                    get { return timestampSnapshot_; }
                    set
                    {
                        timestampSnapshot_ = value;
                    }
                }

                /// <summary>Field number for the "altitude" field.</summary>
                public const int AltitudeFieldNumber = 4;
                private float altitude_;
                /// <summary>
                ///  Confirmed on android/ios
                /// </summary>
                public float Altitude
                {
                    get { return altitude_; }
                    set
                    {
                        altitude_ = value;
                    }
                }

                /// <summary>Field number for the "latitude" field.</summary>
                public const int LatitudeFieldNumber = 13;
                private float latitude_;
                public float Latitude
                {
                    get { return latitude_; }
                    set
                    {
                        latitude_ = value;
                    }
                }

                /// <summary>Field number for the "longitude" field.</summary>
                public const int LongitudeFieldNumber = 14;
                private float longitude_;
                public float Longitude
                {
                    get { return longitude_; }
                    set
                    {
                        longitude_ = value;
                    }
                }

                /// <summary>Field number for the "speed" field.</summary>
                public const int SpeedFieldNumber = 18;
                private float speed_;
                /// <summary>
                ///  iOS only (-1 for no reading available, speed in m/s)
                /// </summary>
                public float Speed
                {
                    get { return speed_; }
                    set
                    {
                        speed_ = value;
                    }
                }

                /// <summary>Field number for the "course" field.</summary>
                public const int CourseFieldNumber = 20;
                private float course_;
                /// <summary>
                ///  iOS only (range seems to be -1 for not reading, and 0 to 360 for reading) confirmed by @marcel
                /// </summary>
                public float Course
                {
                    get { return course_; }
                    set
                    {
                        course_ = value;
                    }
                }

                /// <summary>Field number for the "horizontal_accuracy" field.</summary>
                public const int HorizontalAccuracyFieldNumber = 21;
                private float horizontalAccuracy_;
                /// <summary>
                ///  in meters, both on Android and iOS
                /// </summary>
                public float HorizontalAccuracy
                {
                    get { return horizontalAccuracy_; }
                    set
                    {
                        horizontalAccuracy_ = value;
                    }
                }

                /// <summary>Field number for the "vertical_accuracy" field.</summary>
                public const int VerticalAccuracyFieldNumber = 22;
                private float verticalAccuracy_;
                /// <summary>
                ///  iOS only
                /// </summary>
                public float VerticalAccuracy
                {
                    get { return verticalAccuracy_; }
                    set
                    {
                        verticalAccuracy_ = value;
                    }
                }

                /// <summary>Field number for the "provider_status" field.</summary>
                public const int ProviderStatusFieldNumber = 26;
                private ulong providerStatus_;
                /// <summary>
                ///  Usually 3 (possibly GPS status: 1 = no fix, 2 = acquiring/inaccurate, 3 = fix acquired)
                /// </summary>
                public ulong ProviderStatus
                {
                    get { return providerStatus_; }
                    set
                    {
                        providerStatus_ = value;
                    }
                }

                /// <summary>Field number for the "floor" field.</summary>
                public const int FloorFieldNumber = 27;
                private uint floor_;
                /// <summary>
                ///  On iOS there are some LocationFixes with unk26=1 and everything else empty
                /// </summary>
                public uint Floor
                {
                    get { return floor_; }
                    set
                    {
                        floor_ = value;
                    }
                }

                /// <summary>Field number for the "location_type" field.</summary>
                public const int LocationTypeFieldNumber = 28;
                private ulong locationType_;
                /// <summary>
                ///  Always 1 (if there is data at all)
                /// </summary>
                public ulong LocationType
                {
                    get { return locationType_; }
                    set
                    {
                        locationType_ = value;
                    }
                }

                public override bool Equals(object other)
                {
                    return Equals(other as LocationFix);
                }

                public bool Equals(LocationFix other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (Provider != other.Provider) return false;
                    if (TimestampSnapshot != other.TimestampSnapshot) return false;
                    if (Altitude != other.Altitude) return false;
                    if (Latitude != other.Latitude) return false;
                    if (Longitude != other.Longitude) return false;
                    if (Speed != other.Speed) return false;
                    if (Course != other.Course) return false;
                    if (HorizontalAccuracy != other.HorizontalAccuracy) return false;
                    if (VerticalAccuracy != other.VerticalAccuracy) return false;
                    if (ProviderStatus != other.ProviderStatus) return false;
                    if (Floor != other.Floor) return false;
                    if (LocationType != other.LocationType) return false;
                    return true;
                }

                public override int GetHashCode()
                {
                    int hash = 1;
                    if (Provider.Length != 0) hash ^= Provider.GetHashCode();
                    if (TimestampSnapshot != 0UL) hash ^= TimestampSnapshot.GetHashCode();
                    if (Altitude != 0F) hash ^= Altitude.GetHashCode();
                    if (Latitude != 0F) hash ^= Latitude.GetHashCode();
                    if (Longitude != 0F) hash ^= Longitude.GetHashCode();
                    if (Speed != 0F) hash ^= Speed.GetHashCode();
                    if (Course != 0F) hash ^= Course.GetHashCode();
                    if (HorizontalAccuracy != 0F) hash ^= HorizontalAccuracy.GetHashCode();
                    if (VerticalAccuracy != 0F) hash ^= VerticalAccuracy.GetHashCode();
                    if (ProviderStatus != 0UL) hash ^= ProviderStatus.GetHashCode();
                    if (Floor != 0) hash ^= Floor.GetHashCode();
                    if (LocationType != 0UL) hash ^= LocationType.GetHashCode();
                    return hash;
                }

                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (Provider.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(Provider);
                    }
                    if (TimestampSnapshot != 0UL)
                    {
                        output.WriteRawTag(16);
                        output.WriteUInt64(TimestampSnapshot);
                    }
                    if (Altitude != 0F)
                    {
                        output.WriteRawTag(37);
                        output.WriteFloat(Altitude);
                    }
                    if (Latitude != 0F)
                    {
                        output.WriteRawTag(109);
                        output.WriteFloat(Latitude);
                    }
                    if (Longitude != 0F)
                    {
                        output.WriteRawTag(117);
                        output.WriteFloat(Longitude);
                    }
                    if (Speed != 0F)
                    {
                        output.WriteRawTag(149, 1);
                        output.WriteFloat(Speed);
                    }
                    if (Course != 0F)
                    {
                        output.WriteRawTag(165, 1);
                        output.WriteFloat(Course);
                    }
                    if (HorizontalAccuracy != 0F)
                    {
                        output.WriteRawTag(173, 1);
                        output.WriteFloat(HorizontalAccuracy);
                    }
                    if (VerticalAccuracy != 0F)
                    {
                        output.WriteRawTag(181, 1);
                        output.WriteFloat(VerticalAccuracy);
                    }
                    if (ProviderStatus != 0UL)
                    {
                        output.WriteRawTag(208, 1);
                        output.WriteUInt64(ProviderStatus);
                    }
                    if (Floor != 0)
                    {
                        output.WriteRawTag(216, 1);
                        output.WriteUInt32(Floor);
                    }
                    if (LocationType != 0UL)
                    {
                        output.WriteRawTag(224, 1);
                        output.WriteUInt64(LocationType);
                    }
                }

                public int CalculateSize()
                {
                    int size = 0;
                    if (Provider.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(Provider);
                    }
                    if (TimestampSnapshot != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampSnapshot);
                    }
                    if (Altitude != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Latitude != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Longitude != 0F)
                    {
                        size += 1 + 4;
                    }
                    if (Speed != 0F)
                    {
                        size += 2 + 4;
                    }
                    if (Course != 0F)
                    {
                        size += 2 + 4;
                    }
                    if (HorizontalAccuracy != 0F)
                    {
                        size += 2 + 4;
                    }
                    if (VerticalAccuracy != 0F)
                    {
                        size += 2 + 4;
                    }
                    if (ProviderStatus != 0UL)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(ProviderStatus);
                    }
                    if (Floor != 0)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Floor);
                    }
                    if (LocationType != 0UL)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LocationType);
                    }
                    return size;
                }

                public void MergeFrom(LocationFix other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.Provider.Length != 0)
                    {
                        Provider = other.Provider;
                    }
                    if (other.TimestampSnapshot != 0UL)
                    {
                        TimestampSnapshot = other.TimestampSnapshot;
                    }
                    if (other.Altitude != 0F)
                    {
                        Altitude = other.Altitude;
                    }
                    if (other.Latitude != 0F)
                    {
                        Latitude = other.Latitude;
                    }
                    if (other.Longitude != 0F)
                    {
                        Longitude = other.Longitude;
                    }
                    if (other.Speed != 0F)
                    {
                        Speed = other.Speed;
                    }
                    if (other.Course != 0F)
                    {
                        Course = other.Course;
                    }
                    if (other.HorizontalAccuracy != 0F)
                    {
                        HorizontalAccuracy = other.HorizontalAccuracy;
                    }
                    if (other.VerticalAccuracy != 0F)
                    {
                        VerticalAccuracy = other.VerticalAccuracy;
                    }
                    if (other.ProviderStatus != 0UL)
                    {
                        ProviderStatus = other.ProviderStatus;
                    }
                    if (other.Floor != 0)
                    {
                        Floor = other.Floor;
                    }
                    if (other.LocationType != 0UL)
                    {
                        LocationType = other.LocationType;
                    }
                }

                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    Provider = input.ReadString();
                                    break;
                                }
                            case 16:
                                {
                                    TimestampSnapshot = input.ReadUInt64();
                                    break;
                                }
                            case 37:
                                {
                                    Altitude = input.ReadFloat();
                                    break;
                                }
                            case 109:
                                {
                                    Latitude = input.ReadFloat();
                                    break;
                                }
                            case 117:
                                {
                                    Longitude = input.ReadFloat();
                                    break;
                                }
                            case 149:
                                {
                                    Speed = input.ReadFloat();
                                    break;
                                }
                            case 165:
                                {
                                    Course = input.ReadFloat();
                                    break;
                                }
                            case 173:
                                {
                                    HorizontalAccuracy = input.ReadFloat();
                                    break;
                                }
                            case 181:
                                {
                                    VerticalAccuracy = input.ReadFloat();
                                    break;
                                }
                            case 208:
                                {
                                    ProviderStatus = input.ReadUInt64();
                                    break;
                                }
                            case 216:
                                {
                                    Floor = input.ReadUInt32();
                                    break;
                                }
                            case 224:
                                {
                                    LocationType = input.ReadUInt64();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  don't really care about this since we're not using it
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class AndroidGpsInfo : pb::IMessage<AndroidGpsInfo>
            {
                private static readonly pb::MessageParser<AndroidGpsInfo> _parser = new pb::MessageParser<AndroidGpsInfo>(() => new AndroidGpsInfo());
                public static pb::MessageParser<AndroidGpsInfo> Parser { get { return _parser; } }

                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Signature.Descriptor.NestedTypes[1]; }
                }

                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                public AndroidGpsInfo()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                public AndroidGpsInfo(AndroidGpsInfo other) : this()
                {
                    timeToFix_ = other.timeToFix_;
                    satellitesPrn_ = other.satellitesPrn_.Clone();
                    azimuth_ = other.azimuth_.Clone();
                    elevation_ = other.elevation_.Clone();
                    snr_ = other.snr_.Clone();
                    hasAlmanac_ = other.hasAlmanac_.Clone();
                    hasEphemeris_ = other.hasEphemeris_.Clone();
                    usedInFix_ = other.usedInFix_.Clone();
                }

                public AndroidGpsInfo Clone()
                {
                    return new AndroidGpsInfo(this);
                }

                /// <summary>Field number for the "time_to_fix" field.</summary>
                public const int TimeToFixFieldNumber = 1;
                private ulong timeToFix_;
                public ulong TimeToFix
                {
                    get { return timeToFix_; }
                    set
                    {
                        timeToFix_ = value;
                    }
                }

                /// <summary>Field number for the "satellites_prn" field.</summary>
                public const int SatellitesPrnFieldNumber = 2;
                private static readonly pb::FieldCodec<int> _repeated_satellitesPrn_codec
                    = pb::FieldCodec.ForInt32(18);
                private readonly pbc::RepeatedField<int> satellitesPrn_ = new pbc::RepeatedField<int>();
                public pbc::RepeatedField<int> SatellitesPrn
                {
                    get { return satellitesPrn_; }
                }

                /// <summary>Field number for the "azimuth" field.</summary>
                public const int AzimuthFieldNumber = 3;
                private static readonly pb::FieldCodec<float> _repeated_azimuth_codec
                    = pb::FieldCodec.ForFloat(26);
                private readonly pbc::RepeatedField<float> azimuth_ = new pbc::RepeatedField<float>();
                public pbc::RepeatedField<float> Azimuth
                {
                    get { return azimuth_; }
                }

                /// <summary>Field number for the "elevation" field.</summary>
                public const int ElevationFieldNumber = 4;
                private static readonly pb::FieldCodec<float> _repeated_elevation_codec
                    = pb::FieldCodec.ForFloat(34);
                private readonly pbc::RepeatedField<float> elevation_ = new pbc::RepeatedField<float>();
                public pbc::RepeatedField<float> Elevation
                {
                    get { return elevation_; }
                }

                /// <summary>Field number for the "snr" field.</summary>
                public const int SnrFieldNumber = 5;
                private static readonly pb::FieldCodec<float> _repeated_snr_codec
                    = pb::FieldCodec.ForFloat(42);
                private readonly pbc::RepeatedField<float> snr_ = new pbc::RepeatedField<float>();
                public pbc::RepeatedField<float> Snr
                {
                    get { return snr_; }
                }

                /// <summary>Field number for the "has_almanac" field.</summary>
                public const int HasAlmanacFieldNumber = 6;
                private static readonly pb::FieldCodec<bool> _repeated_hasAlmanac_codec
                    = pb::FieldCodec.ForBool(50);
                private readonly pbc::RepeatedField<bool> hasAlmanac_ = new pbc::RepeatedField<bool>();
                public pbc::RepeatedField<bool> HasAlmanac
                {
                    get { return hasAlmanac_; }
                }

                /// <summary>Field number for the "has_ephemeris" field.</summary>
                public const int HasEphemerisFieldNumber = 7;
                private static readonly pb::FieldCodec<bool> _repeated_hasEphemeris_codec
                    = pb::FieldCodec.ForBool(58);
                private readonly pbc::RepeatedField<bool> hasEphemeris_ = new pbc::RepeatedField<bool>();
                public pbc::RepeatedField<bool> HasEphemeris
                {
                    get { return hasEphemeris_; }
                }

                /// <summary>Field number for the "used_in_fix" field.</summary>
                public const int UsedInFixFieldNumber = 8;
                private static readonly pb::FieldCodec<bool> _repeated_usedInFix_codec
                    = pb::FieldCodec.ForBool(66);
                private readonly pbc::RepeatedField<bool> usedInFix_ = new pbc::RepeatedField<bool>();
                public pbc::RepeatedField<bool> UsedInFix
                {
                    get { return usedInFix_; }
                }

                public override bool Equals(object other)
                {
                    return Equals(other as AndroidGpsInfo);
                }

                public bool Equals(AndroidGpsInfo other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (TimeToFix != other.TimeToFix) return false;
                    if (!satellitesPrn_.Equals(other.satellitesPrn_)) return false;
                    if (!azimuth_.Equals(other.azimuth_)) return false;
                    if (!elevation_.Equals(other.elevation_)) return false;
                    if (!snr_.Equals(other.snr_)) return false;
                    if (!hasAlmanac_.Equals(other.hasAlmanac_)) return false;
                    if (!hasEphemeris_.Equals(other.hasEphemeris_)) return false;
                    if (!usedInFix_.Equals(other.usedInFix_)) return false;
                    return true;
                }

                public override int GetHashCode()
                {
                    int hash = 1;
                    if (TimeToFix != 0UL) hash ^= TimeToFix.GetHashCode();
                    hash ^= satellitesPrn_.GetHashCode();
                    hash ^= azimuth_.GetHashCode();
                    hash ^= elevation_.GetHashCode();
                    hash ^= snr_.GetHashCode();
                    hash ^= hasAlmanac_.GetHashCode();
                    hash ^= hasEphemeris_.GetHashCode();
                    hash ^= usedInFix_.GetHashCode();
                    return hash;
                }

                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (TimeToFix != 0UL)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt64(TimeToFix);
                    }
                    satellitesPrn_.WriteTo(output, _repeated_satellitesPrn_codec);
                    azimuth_.WriteTo(output, _repeated_azimuth_codec);
                    elevation_.WriteTo(output, _repeated_elevation_codec);
                    snr_.WriteTo(output, _repeated_snr_codec);
                    hasAlmanac_.WriteTo(output, _repeated_hasAlmanac_codec);
                    hasEphemeris_.WriteTo(output, _repeated_hasEphemeris_codec);
                    usedInFix_.WriteTo(output, _repeated_usedInFix_codec);
                }

                public int CalculateSize()
                {
                    int size = 0;
                    if (TimeToFix != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimeToFix);
                    }
                    size += satellitesPrn_.CalculateSize(_repeated_satellitesPrn_codec);
                    size += azimuth_.CalculateSize(_repeated_azimuth_codec);
                    size += elevation_.CalculateSize(_repeated_elevation_codec);
                    size += snr_.CalculateSize(_repeated_snr_codec);
                    size += hasAlmanac_.CalculateSize(_repeated_hasAlmanac_codec);
                    size += hasEphemeris_.CalculateSize(_repeated_hasEphemeris_codec);
                    size += usedInFix_.CalculateSize(_repeated_usedInFix_codec);
                    return size;
                }

                public void MergeFrom(AndroidGpsInfo other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.TimeToFix != 0UL)
                    {
                        TimeToFix = other.TimeToFix;
                    }
                    satellitesPrn_.Add(other.satellitesPrn_);
                    azimuth_.Add(other.azimuth_);
                    elevation_.Add(other.elevation_);
                    snr_.Add(other.snr_);
                    hasAlmanac_.Add(other.hasAlmanac_);
                    hasEphemeris_.Add(other.hasEphemeris_);
                    usedInFix_.Add(other.usedInFix_);
                }

                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    TimeToFix = input.ReadUInt64();
                                    break;
                                }
                            case 18:
                            case 16:
                                {
                                    satellitesPrn_.AddEntriesFrom(input, _repeated_satellitesPrn_codec);
                                    break;
                                }
                            case 26:
                            case 29:
                                {
                                    azimuth_.AddEntriesFrom(input, _repeated_azimuth_codec);
                                    break;
                                }
                            case 34:
                            case 37:
                                {
                                    elevation_.AddEntriesFrom(input, _repeated_elevation_codec);
                                    break;
                                }
                            case 42:
                            case 45:
                                {
                                    snr_.AddEntriesFrom(input, _repeated_snr_codec);
                                    break;
                                }
                            case 50:
                            case 48:
                                {
                                    hasAlmanac_.AddEntriesFrom(input, _repeated_hasAlmanac_codec);
                                    break;
                                }
                            case 58:
                            case 56:
                                {
                                    hasEphemeris_.AddEntriesFrom(input, _repeated_hasEphemeris_codec);
                                    break;
                                }
                            case 66:
                            case 64:
                                {
                                    usedInFix_.AddEntriesFrom(input, _repeated_usedInFix_codec);
                                    break;
                                }
                        }
                    }
                }

            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class SensorInfo : pb::IMessage<SensorInfo>
            {
                private static readonly pb::MessageParser<SensorInfo> _parser = new pb::MessageParser<SensorInfo>(() => new SensorInfo());
                public static pb::MessageParser<SensorInfo> Parser { get { return _parser; } }

                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Signature.Descriptor.NestedTypes[2]; }
                }

                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                public SensorInfo()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                public SensorInfo(SensorInfo other) : this()
                {
                    timestampSnapshot_ = other.timestampSnapshot_;
                    linearAccelerationX_ = other.linearAccelerationX_;
                    linearAccelerationY_ = other.linearAccelerationY_;
                    linearAccelerationZ_ = other.linearAccelerationZ_;
                    magneticFieldX_ = other.magneticFieldX_;
                    magneticFieldY_ = other.magneticFieldY_;
                    magneticFieldZ_ = other.magneticFieldZ_;
                    magneticFieldAccuracy_ = other.magneticFieldAccuracy_;
                    attitudePitch_ = other.attitudePitch_;
                    attitudeYaw_ = other.attitudeYaw_;
                    attitudeRoll_ = other.attitudeRoll_;
                    rotationRateX_ = other.rotationRateX_;
                    rotationRateY_ = other.rotationRateY_;
                    rotationRateZ_ = other.rotationRateZ_;
                    gravityX_ = other.gravityX_;
                    gravityY_ = other.gravityY_;
                    gravityZ_ = other.gravityZ_;
                    status_ = other.status_;
                }

                public SensorInfo Clone()
                {
                    return new SensorInfo(this);
                }

                /// <summary>Field number for the "timestamp_snapshot" field.</summary>
                public const int TimestampSnapshotFieldNumber = 1;
                private ulong timestampSnapshot_;
                /// <summary>
                ///  in ms since start
                /// </summary>
                public ulong TimestampSnapshot
                {
                    get { return timestampSnapshot_; }
                    set
                    {
                        timestampSnapshot_ = value;
                    }
                }

                /// <summary>Field number for the "linear_acceleration_x" field.</summary>
                public const int LinearAccelerationXFieldNumber = 3;
                private double linearAccelerationX_;
                public double LinearAccelerationX
                {
                    get { return linearAccelerationX_; }
                    set
                    {
                        linearAccelerationX_ = value;
                    }
                }

                /// <summary>Field number for the "linear_acceleration_y" field.</summary>
                public const int LinearAccelerationYFieldNumber = 4;
                private double linearAccelerationY_;
                public double LinearAccelerationY
                {
                    get { return linearAccelerationY_; }
                    set
                    {
                        linearAccelerationY_ = value;
                    }
                }

                /// <summary>Field number for the "linear_acceleration_z" field.</summary>
                public const int LinearAccelerationZFieldNumber = 5;
                private double linearAccelerationZ_;
                public double LinearAccelerationZ
                {
                    get { return linearAccelerationZ_; }
                    set
                    {
                        linearAccelerationZ_ = value;
                    }
                }

                /// <summary>Field number for the "magnetic_field_x" field.</summary>
                public const int MagneticFieldXFieldNumber = 6;
                private double magneticFieldX_;
                public double MagneticFieldX
                {
                    get { return magneticFieldX_; }
                    set
                    {
                        magneticFieldX_ = value;
                    }
                }

                /// <summary>Field number for the "magnetic_field_y" field.</summary>
                public const int MagneticFieldYFieldNumber = 7;
                private double magneticFieldY_;
                public double MagneticFieldY
                {
                    get { return magneticFieldY_; }
                    set
                    {
                        magneticFieldY_ = value;
                    }
                }

                /// <summary>Field number for the "magnetic_field_z" field.</summary>
                public const int MagneticFieldZFieldNumber = 8;
                private double magneticFieldZ_;
                public double MagneticFieldZ
                {
                    get { return magneticFieldZ_; }
                    set
                    {
                        magneticFieldZ_ = value;
                    }
                }

                /// <summary>Field number for the "magnetic_field_accuracy" field.</summary>
                public const int MagneticFieldAccuracyFieldNumber = 9;
                private int magneticFieldAccuracy_;
                public int MagneticFieldAccuracy
                {
                    get { return magneticFieldAccuracy_; }
                    set
                    {
                        magneticFieldAccuracy_ = value;
                    }
                }

                /// <summary>Field number for the "attitude_pitch" field.</summary>
                public const int AttitudePitchFieldNumber = 10;
                private double attitudePitch_;
                public double AttitudePitch
                {
                    get { return attitudePitch_; }
                    set
                    {
                        attitudePitch_ = value;
                    }
                }

                /// <summary>Field number for the "attitude_yaw" field.</summary>
                public const int AttitudeYawFieldNumber = 11;
                private double attitudeYaw_;
                public double AttitudeYaw
                {
                    get { return attitudeYaw_; }
                    set
                    {
                        attitudeYaw_ = value;
                    }
                }

                /// <summary>Field number for the "attitude_roll" field.</summary>
                public const int AttitudeRollFieldNumber = 12;
                private double attitudeRoll_;
                public double AttitudeRoll
                {
                    get { return attitudeRoll_; }
                    set
                    {
                        attitudeRoll_ = value;
                    }
                }

                /// <summary>Field number for the "rotation_rate_x" field.</summary>
                public const int RotationRateXFieldNumber = 13;
                private double rotationRateX_;
                public double RotationRateX
                {
                    get { return rotationRateX_; }
                    set
                    {
                        rotationRateX_ = value;
                    }
                }

                /// <summary>Field number for the "rotation_rate_y" field.</summary>
                public const int RotationRateYFieldNumber = 14;
                private double rotationRateY_;
                public double RotationRateY
                {
                    get { return rotationRateY_; }
                    set
                    {
                        rotationRateY_ = value;
                    }
                }

                /// <summary>Field number for the "rotation_rate_z" field.</summary>
                public const int RotationRateZFieldNumber = 15;
                private double rotationRateZ_;
                public double RotationRateZ
                {
                    get { return rotationRateZ_; }
                    set
                    {
                        rotationRateZ_ = value;
                    }
                }

                /// <summary>Field number for the "gravity_x" field.</summary>
                public const int GravityXFieldNumber = 16;
                private double gravityX_;
                public double GravityX
                {
                    get { return gravityX_; }
                    set
                    {
                        gravityX_ = value;
                    }
                }

                /// <summary>Field number for the "gravity_y" field.</summary>
                public const int GravityYFieldNumber = 17;
                private double gravityY_;
                public double GravityY
                {
                    get { return gravityY_; }
                    set
                    {
                        gravityY_ = value;
                    }
                }

                /// <summary>Field number for the "gravity_z" field.</summary>
                public const int GravityZFieldNumber = 18;
                private double gravityZ_;
                public double GravityZ
                {
                    get { return gravityZ_; }
                    set
                    {
                        gravityZ_ = value;
                    }
                }

                /// <summary>Field number for the "status" field.</summary>
                public const int StatusFieldNumber = 19;
                private int status_;
                public int Status
                {
                    get { return status_; }
                    set
                    {
                        status_ = value;
                    }
                }

                public override bool Equals(object other)
                {
                    return Equals(other as SensorInfo);
                }

                public bool Equals(SensorInfo other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (TimestampSnapshot != other.TimestampSnapshot) return false;
                    if (LinearAccelerationX != other.LinearAccelerationX) return false;
                    if (LinearAccelerationY != other.LinearAccelerationY) return false;
                    if (LinearAccelerationZ != other.LinearAccelerationZ) return false;
                    if (MagneticFieldX != other.MagneticFieldX) return false;
                    if (MagneticFieldY != other.MagneticFieldY) return false;
                    if (MagneticFieldZ != other.MagneticFieldZ) return false;
                    if (MagneticFieldAccuracy != other.MagneticFieldAccuracy) return false;
                    if (AttitudePitch != other.AttitudePitch) return false;
                    if (AttitudeYaw != other.AttitudeYaw) return false;
                    if (AttitudeRoll != other.AttitudeRoll) return false;
                    if (RotationRateX != other.RotationRateX) return false;
                    if (RotationRateY != other.RotationRateY) return false;
                    if (RotationRateZ != other.RotationRateZ) return false;
                    if (GravityX != other.GravityX) return false;
                    if (GravityY != other.GravityY) return false;
                    if (GravityZ != other.GravityZ) return false;
                    if (Status != other.Status) return false;
                    return true;
                }

                public override int GetHashCode()
                {
                    int hash = 1;
                    if (TimestampSnapshot != 0UL) hash ^= TimestampSnapshot.GetHashCode();
                    if (LinearAccelerationX != 0D) hash ^= LinearAccelerationX.GetHashCode();
                    if (LinearAccelerationY != 0D) hash ^= LinearAccelerationY.GetHashCode();
                    if (LinearAccelerationZ != 0D) hash ^= LinearAccelerationZ.GetHashCode();
                    if (MagneticFieldX != 0D) hash ^= MagneticFieldX.GetHashCode();
                    if (MagneticFieldY != 0D) hash ^= MagneticFieldY.GetHashCode();
                    if (MagneticFieldZ != 0D) hash ^= MagneticFieldZ.GetHashCode();
                    if (MagneticFieldAccuracy != 0) hash ^= MagneticFieldAccuracy.GetHashCode();
                    if (AttitudePitch != 0D) hash ^= AttitudePitch.GetHashCode();
                    if (AttitudeYaw != 0D) hash ^= AttitudeYaw.GetHashCode();
                    if (AttitudeRoll != 0D) hash ^= AttitudeRoll.GetHashCode();
                    if (RotationRateX != 0D) hash ^= RotationRateX.GetHashCode();
                    if (RotationRateY != 0D) hash ^= RotationRateY.GetHashCode();
                    if (RotationRateZ != 0D) hash ^= RotationRateZ.GetHashCode();
                    if (GravityX != 0D) hash ^= GravityX.GetHashCode();
                    if (GravityY != 0D) hash ^= GravityY.GetHashCode();
                    if (GravityZ != 0D) hash ^= GravityZ.GetHashCode();
                    if (Status != 0) hash ^= Status.GetHashCode();
                    return hash;
                }

                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (TimestampSnapshot != 0UL)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt64(TimestampSnapshot);
                    }
                    if (LinearAccelerationX != 0D)
                    {
                        output.WriteRawTag(25);
                        output.WriteDouble(LinearAccelerationX);
                    }
                    if (LinearAccelerationY != 0D)
                    {
                        output.WriteRawTag(33);
                        output.WriteDouble(LinearAccelerationY);
                    }
                    if (LinearAccelerationZ != 0D)
                    {
                        output.WriteRawTag(41);
                        output.WriteDouble(LinearAccelerationZ);
                    }
                    if (MagneticFieldX != 0D)
                    {
                        output.WriteRawTag(49);
                        output.WriteDouble(MagneticFieldX);
                    }
                    if (MagneticFieldY != 0D)
                    {
                        output.WriteRawTag(57);
                        output.WriteDouble(MagneticFieldY);
                    }
                    if (MagneticFieldZ != 0D)
                    {
                        output.WriteRawTag(65);
                        output.WriteDouble(MagneticFieldZ);
                    }
                    if (MagneticFieldAccuracy != 0)
                    {
                        output.WriteRawTag(72);
                        output.WriteInt32(MagneticFieldAccuracy);
                    }
                    if (AttitudePitch != 0D)
                    {
                        output.WriteRawTag(81);
                        output.WriteDouble(AttitudePitch);
                    }
                    if (AttitudeYaw != 0D)
                    {
                        output.WriteRawTag(89);
                        output.WriteDouble(AttitudeYaw);
                    }
                    if (AttitudeRoll != 0D)
                    {
                        output.WriteRawTag(97);
                        output.WriteDouble(AttitudeRoll);
                    }
                    if (RotationRateX != 0D)
                    {
                        output.WriteRawTag(105);
                        output.WriteDouble(RotationRateX);
                    }
                    if (RotationRateY != 0D)
                    {
                        output.WriteRawTag(113);
                        output.WriteDouble(RotationRateY);
                    }
                    if (RotationRateZ != 0D)
                    {
                        output.WriteRawTag(121);
                        output.WriteDouble(RotationRateZ);
                    }
                    if (GravityX != 0D)
                    {
                        output.WriteRawTag(129, 1);
                        output.WriteDouble(GravityX);
                    }
                    if (GravityY != 0D)
                    {
                        output.WriteRawTag(137, 1);
                        output.WriteDouble(GravityY);
                    }
                    if (GravityZ != 0D)
                    {
                        output.WriteRawTag(145, 1);
                        output.WriteDouble(GravityZ);
                    }
                    if (Status != 0)
                    {
                        output.WriteRawTag(152, 1);
                        output.WriteInt32(Status);
                    }
                }

                public int CalculateSize()
                {
                    int size = 0;
                    if (TimestampSnapshot != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TimestampSnapshot);
                    }
                    if (LinearAccelerationX != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (LinearAccelerationY != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (LinearAccelerationZ != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (MagneticFieldX != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (MagneticFieldY != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (MagneticFieldZ != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (MagneticFieldAccuracy != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MagneticFieldAccuracy);
                    }
                    if (AttitudePitch != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (AttitudeYaw != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (AttitudeRoll != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (RotationRateX != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (RotationRateY != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (RotationRateZ != 0D)
                    {
                        size += 1 + 8;
                    }
                    if (GravityX != 0D)
                    {
                        size += 2 + 8;
                    }
                    if (GravityY != 0D)
                    {
                        size += 2 + 8;
                    }
                    if (GravityZ != 0D)
                    {
                        size += 2 + 8;
                    }
                    if (Status != 0)
                    {
                        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Status);
                    }
                    return size;
                }

                public void MergeFrom(SensorInfo other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.TimestampSnapshot != 0UL)
                    {
                        TimestampSnapshot = other.TimestampSnapshot;
                    }
                    if (other.LinearAccelerationX != 0D)
                    {
                        LinearAccelerationX = other.LinearAccelerationX;
                    }
                    if (other.LinearAccelerationY != 0D)
                    {
                        LinearAccelerationY = other.LinearAccelerationY;
                    }
                    if (other.LinearAccelerationZ != 0D)
                    {
                        LinearAccelerationZ = other.LinearAccelerationZ;
                    }
                    if (other.MagneticFieldX != 0D)
                    {
                        MagneticFieldX = other.MagneticFieldX;
                    }
                    if (other.MagneticFieldY != 0D)
                    {
                        MagneticFieldY = other.MagneticFieldY;
                    }
                    if (other.MagneticFieldZ != 0D)
                    {
                        MagneticFieldZ = other.MagneticFieldZ;
                    }
                    if (other.MagneticFieldAccuracy != 0)
                    {
                        MagneticFieldAccuracy = other.MagneticFieldAccuracy;
                    }
                    if (other.AttitudePitch != 0D)
                    {
                        AttitudePitch = other.AttitudePitch;
                    }
                    if (other.AttitudeYaw != 0D)
                    {
                        AttitudeYaw = other.AttitudeYaw;
                    }
                    if (other.AttitudeRoll != 0D)
                    {
                        AttitudeRoll = other.AttitudeRoll;
                    }
                    if (other.RotationRateX != 0D)
                    {
                        RotationRateX = other.RotationRateX;
                    }
                    if (other.RotationRateY != 0D)
                    {
                        RotationRateY = other.RotationRateY;
                    }
                    if (other.RotationRateZ != 0D)
                    {
                        RotationRateZ = other.RotationRateZ;
                    }
                    if (other.GravityX != 0D)
                    {
                        GravityX = other.GravityX;
                    }
                    if (other.GravityY != 0D)
                    {
                        GravityY = other.GravityY;
                    }
                    if (other.GravityZ != 0D)
                    {
                        GravityZ = other.GravityZ;
                    }
                    if (other.Status != 0)
                    {
                        Status = other.Status;
                    }
                }

                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    TimestampSnapshot = input.ReadUInt64();
                                    break;
                                }
                            case 25:
                                {
                                    LinearAccelerationX = input.ReadDouble();
                                    break;
                                }
                            case 33:
                                {
                                    LinearAccelerationY = input.ReadDouble();
                                    break;
                                }
                            case 41:
                                {
                                    LinearAccelerationZ = input.ReadDouble();
                                    break;
                                }
                            case 49:
                                {
                                    MagneticFieldX = input.ReadDouble();
                                    break;
                                }
                            case 57:
                                {
                                    MagneticFieldY = input.ReadDouble();
                                    break;
                                }
                            case 65:
                                {
                                    MagneticFieldZ = input.ReadDouble();
                                    break;
                                }
                            case 72:
                                {
                                    MagneticFieldAccuracy = input.ReadInt32();
                                    break;
                                }
                            case 81:
                                {
                                    AttitudePitch = input.ReadDouble();
                                    break;
                                }
                            case 89:
                                {
                                    AttitudeYaw = input.ReadDouble();
                                    break;
                                }
                            case 97:
                                {
                                    AttitudeRoll = input.ReadDouble();
                                    break;
                                }
                            case 105:
                                {
                                    RotationRateX = input.ReadDouble();
                                    break;
                                }
                            case 113:
                                {
                                    RotationRateY = input.ReadDouble();
                                    break;
                                }
                            case 121:
                                {
                                    RotationRateZ = input.ReadDouble();
                                    break;
                                }
                            case 129:
                                {
                                    GravityX = input.ReadDouble();
                                    break;
                                }
                            case 137:
                                {
                                    GravityY = input.ReadDouble();
                                    break;
                                }
                            case 145:
                                {
                                    GravityZ = input.ReadDouble();
                                    break;
                                }
                            case 152:
                                {
                                    Status = input.ReadInt32();
                                    break;
                                }
                        }
                    }
                }

            }

            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class DeviceInfo : pb::IMessage<DeviceInfo>
            {
                private static readonly pb::MessageParser<DeviceInfo> _parser = new pb::MessageParser<DeviceInfo>(() => new DeviceInfo());
                public static pb::MessageParser<DeviceInfo> Parser { get { return _parser; } }

                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Signature.Descriptor.NestedTypes[3]; }
                }

                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                public DeviceInfo()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                public DeviceInfo(DeviceInfo other) : this()
                {
                    deviceId_ = other.deviceId_;
                    androidBoardName_ = other.androidBoardName_;
                    androidBootloader_ = other.androidBootloader_;
                    deviceBrand_ = other.deviceBrand_;
                    deviceModel_ = other.deviceModel_;
                    deviceModelIdentifier_ = other.deviceModelIdentifier_;
                    deviceModelBoot_ = other.deviceModelBoot_;
                    hardwareManufacturer_ = other.hardwareManufacturer_;
                    hardwareModel_ = other.hardwareModel_;
                    firmwareBrand_ = other.firmwareBrand_;
                    firmwareTags_ = other.firmwareTags_;
                    firmwareType_ = other.firmwareType_;
                    firmwareFingerprint_ = other.firmwareFingerprint_;
                }

                public DeviceInfo Clone()
                {
                    return new DeviceInfo(this);
                }

                /// <summary>Field number for the "device_id" field.</summary>
                public const int DeviceIdFieldNumber = 1;
                private string deviceId_ = "";
                /// <summary>
                ///  Hex string
                /// </summary>
                public string DeviceId
                {
                    get { return deviceId_; }
                    set
                    {
                        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "android_board_name" field.</summary>
                public const int AndroidBoardNameFieldNumber = 2;
                private string androidBoardName_ = "";
                public string AndroidBoardName
                {
                    get { return androidBoardName_; }
                    set
                    {
                        androidBoardName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "android_bootloader" field.</summary>
                public const int AndroidBootloaderFieldNumber = 3;
                private string androidBootloader_ = "";
                public string AndroidBootloader
                {
                    get { return androidBootloader_; }
                    set
                    {
                        androidBootloader_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "device_brand" field.</summary>
                public const int DeviceBrandFieldNumber = 4;
                private string deviceBrand_ = "";
                /// <summary>
                ///  On Android: product.brand
                /// </summary>
                public string DeviceBrand
                {
                    get { return deviceBrand_; }
                    set
                    {
                        deviceBrand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "device_model" field.</summary>
                public const int DeviceModelFieldNumber = 5;
                private string deviceModel_ = "";
                /// <summary>
                ///  On Android: product.device
                /// </summary>
                public string DeviceModel
                {
                    get { return deviceModel_; }
                    set
                    {
                        deviceModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "device_model_identifier" field.</summary>
                public const int DeviceModelIdentifierFieldNumber = 6;
                private string deviceModelIdentifier_ = "";
                /// <summary>
                ///  Android only, build.display.id
                /// </summary>
                public string DeviceModelIdentifier
                {
                    get { return deviceModelIdentifier_; }
                    set
                    {
                        deviceModelIdentifier_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "device_model_boot" field.</summary>
                public const int DeviceModelBootFieldNumber = 7;
                private string deviceModelBoot_ = "";
                /// <summary>
                ///  On Android: boot.hardware
                /// </summary>
                public string DeviceModelBoot
                {
                    get { return deviceModelBoot_; }
                    set
                    {
                        deviceModelBoot_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "hardware_manufacturer" field.</summary>
                public const int HardwareManufacturerFieldNumber = 8;
                private string hardwareManufacturer_ = "";
                /// <summary>
                ///  On Android: product.manufacturer
                /// </summary>
                public string HardwareManufacturer
                {
                    get { return hardwareManufacturer_; }
                    set
                    {
                        hardwareManufacturer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "hardware_model" field.</summary>
                public const int HardwareModelFieldNumber = 9;
                private string hardwareModel_ = "";
                /// <summary>
                ///  On Android: product.model
                /// </summary>
                public string HardwareModel
                {
                    get { return hardwareModel_; }
                    set
                    {
                        hardwareModel_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "firmware_brand" field.</summary>
                public const int FirmwareBrandFieldNumber = 10;
                private string firmwareBrand_ = "";
                /// <summary>
                ///  On Android: product.name, on iOS: "iPhone OS"
                /// </summary>
                public string FirmwareBrand
                {
                    get { return firmwareBrand_; }
                    set
                    {
                        firmwareBrand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "firmware_tags" field.</summary>
                public const int FirmwareTagsFieldNumber = 12;
                private string firmwareTags_ = "";
                /// <summary>
                ///  Android only, build.tags
                /// </summary>
                public string FirmwareTags
                {
                    get { return firmwareTags_; }
                    set
                    {
                        firmwareTags_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "firmware_type" field.</summary>
                public const int FirmwareTypeFieldNumber = 13;
                private string firmwareType_ = "";
                /// <summary>
                ///  On Android: build.type, on iOS instead: iOS version
                /// </summary>
                public string FirmwareType
                {
                    get { return firmwareType_; }
                    set
                    {
                        firmwareType_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                /// <summary>Field number for the "firmware_fingerprint" field.</summary>
                public const int FirmwareFingerprintFieldNumber = 14;
                private string firmwareFingerprint_ = "";
                /// <summary>
                ///  Android only, build.fingerprint
                /// </summary>
                public string FirmwareFingerprint
                {
                    get { return firmwareFingerprint_; }
                    set
                    {
                        firmwareFingerprint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public override bool Equals(object other)
                {
                    return Equals(other as DeviceInfo);
                }

                public bool Equals(DeviceInfo other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (DeviceId != other.DeviceId) return false;
                    if (AndroidBoardName != other.AndroidBoardName) return false;
                    if (AndroidBootloader != other.AndroidBootloader) return false;
                    if (DeviceBrand != other.DeviceBrand) return false;
                    if (DeviceModel != other.DeviceModel) return false;
                    if (DeviceModelIdentifier != other.DeviceModelIdentifier) return false;
                    if (DeviceModelBoot != other.DeviceModelBoot) return false;
                    if (HardwareManufacturer != other.HardwareManufacturer) return false;
                    if (HardwareModel != other.HardwareModel) return false;
                    if (FirmwareBrand != other.FirmwareBrand) return false;
                    if (FirmwareTags != other.FirmwareTags) return false;
                    if (FirmwareType != other.FirmwareType) return false;
                    if (FirmwareFingerprint != other.FirmwareFingerprint) return false;
                    return true;
                }

                public override int GetHashCode()
                {
                    int hash = 1;
                    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
                    if (AndroidBoardName.Length != 0) hash ^= AndroidBoardName.GetHashCode();
                    if (AndroidBootloader.Length != 0) hash ^= AndroidBootloader.GetHashCode();
                    if (DeviceBrand.Length != 0) hash ^= DeviceBrand.GetHashCode();
                    if (DeviceModel.Length != 0) hash ^= DeviceModel.GetHashCode();
                    if (DeviceModelIdentifier.Length != 0) hash ^= DeviceModelIdentifier.GetHashCode();
                    if (DeviceModelBoot.Length != 0) hash ^= DeviceModelBoot.GetHashCode();
                    if (HardwareManufacturer.Length != 0) hash ^= HardwareManufacturer.GetHashCode();
                    if (HardwareModel.Length != 0) hash ^= HardwareModel.GetHashCode();
                    if (FirmwareBrand.Length != 0) hash ^= FirmwareBrand.GetHashCode();
                    if (FirmwareTags.Length != 0) hash ^= FirmwareTags.GetHashCode();
                    if (FirmwareType.Length != 0) hash ^= FirmwareType.GetHashCode();
                    if (FirmwareFingerprint.Length != 0) hash ^= FirmwareFingerprint.GetHashCode();
                    return hash;
                }

                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (DeviceId.Length != 0)
                    {
                        output.WriteRawTag(10);
                        output.WriteString(DeviceId);
                    }
                    if (AndroidBoardName.Length != 0)
                    {
                        output.WriteRawTag(18);
                        output.WriteString(AndroidBoardName);
                    }
                    if (AndroidBootloader.Length != 0)
                    {
                        output.WriteRawTag(26);
                        output.WriteString(AndroidBootloader);
                    }
                    if (DeviceBrand.Length != 0)
                    {
                        output.WriteRawTag(34);
                        output.WriteString(DeviceBrand);
                    }
                    if (DeviceModel.Length != 0)
                    {
                        output.WriteRawTag(42);
                        output.WriteString(DeviceModel);
                    }
                    if (DeviceModelIdentifier.Length != 0)
                    {
                        output.WriteRawTag(50);
                        output.WriteString(DeviceModelIdentifier);
                    }
                    if (DeviceModelBoot.Length != 0)
                    {
                        output.WriteRawTag(58);
                        output.WriteString(DeviceModelBoot);
                    }
                    if (HardwareManufacturer.Length != 0)
                    {
                        output.WriteRawTag(66);
                        output.WriteString(HardwareManufacturer);
                    }
                    if (HardwareModel.Length != 0)
                    {
                        output.WriteRawTag(74);
                        output.WriteString(HardwareModel);
                    }
                    if (FirmwareBrand.Length != 0)
                    {
                        output.WriteRawTag(82);
                        output.WriteString(FirmwareBrand);
                    }
                    if (FirmwareTags.Length != 0)
                    {
                        output.WriteRawTag(98);
                        output.WriteString(FirmwareTags);
                    }
                    if (FirmwareType.Length != 0)
                    {
                        output.WriteRawTag(106);
                        output.WriteString(FirmwareType);
                    }
                    if (FirmwareFingerprint.Length != 0)
                    {
                        output.WriteRawTag(114);
                        output.WriteString(FirmwareFingerprint);
                    }
                }

                public int CalculateSize()
                {
                    int size = 0;
                    if (DeviceId.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
                    }
                    if (AndroidBoardName.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(AndroidBoardName);
                    }
                    if (AndroidBootloader.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(AndroidBootloader);
                    }
                    if (DeviceBrand.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceBrand);
                    }
                    if (DeviceModel.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModel);
                    }
                    if (DeviceModelIdentifier.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModelIdentifier);
                    }
                    if (DeviceModelBoot.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceModelBoot);
                    }
                    if (HardwareManufacturer.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareManufacturer);
                    }
                    if (HardwareModel.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareModel);
                    }
                    if (FirmwareBrand.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareBrand);
                    }
                    if (FirmwareTags.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareTags);
                    }
                    if (FirmwareType.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareType);
                    }
                    if (FirmwareFingerprint.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareFingerprint);
                    }
                    return size;
                }

                public void MergeFrom(DeviceInfo other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.DeviceId.Length != 0)
                    {
                        DeviceId = other.DeviceId;
                    }
                    if (other.AndroidBoardName.Length != 0)
                    {
                        AndroidBoardName = other.AndroidBoardName;
                    }
                    if (other.AndroidBootloader.Length != 0)
                    {
                        AndroidBootloader = other.AndroidBootloader;
                    }
                    if (other.DeviceBrand.Length != 0)
                    {
                        DeviceBrand = other.DeviceBrand;
                    }
                    if (other.DeviceModel.Length != 0)
                    {
                        DeviceModel = other.DeviceModel;
                    }
                    if (other.DeviceModelIdentifier.Length != 0)
                    {
                        DeviceModelIdentifier = other.DeviceModelIdentifier;
                    }
                    if (other.DeviceModelBoot.Length != 0)
                    {
                        DeviceModelBoot = other.DeviceModelBoot;
                    }
                    if (other.HardwareManufacturer.Length != 0)
                    {
                        HardwareManufacturer = other.HardwareManufacturer;
                    }
                    if (other.HardwareModel.Length != 0)
                    {
                        HardwareModel = other.HardwareModel;
                    }
                    if (other.FirmwareBrand.Length != 0)
                    {
                        FirmwareBrand = other.FirmwareBrand;
                    }
                    if (other.FirmwareTags.Length != 0)
                    {
                        FirmwareTags = other.FirmwareTags;
                    }
                    if (other.FirmwareType.Length != 0)
                    {
                        FirmwareType = other.FirmwareType;
                    }
                    if (other.FirmwareFingerprint.Length != 0)
                    {
                        FirmwareFingerprint = other.FirmwareFingerprint;
                    }
                }

                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 10:
                                {
                                    DeviceId = input.ReadString();
                                    break;
                                }
                            case 18:
                                {
                                    AndroidBoardName = input.ReadString();
                                    break;
                                }
                            case 26:
                                {
                                    AndroidBootloader = input.ReadString();
                                    break;
                                }
                            case 34:
                                {
                                    DeviceBrand = input.ReadString();
                                    break;
                                }
                            case 42:
                                {
                                    DeviceModel = input.ReadString();
                                    break;
                                }
                            case 50:
                                {
                                    DeviceModelIdentifier = input.ReadString();
                                    break;
                                }
                            case 58:
                                {
                                    DeviceModelBoot = input.ReadString();
                                    break;
                                }
                            case 66:
                                {
                                    HardwareManufacturer = input.ReadString();
                                    break;
                                }
                            case 74:
                                {
                                    HardwareModel = input.ReadString();
                                    break;
                                }
                            case 82:
                                {
                                    FirmwareBrand = input.ReadString();
                                    break;
                                }
                            case 98:
                                {
                                    FirmwareTags = input.ReadString();
                                    break;
                                }
                            case 106:
                                {
                                    FirmwareType = input.ReadString();
                                    break;
                                }
                            case 114:
                                {
                                    FirmwareFingerprint = input.ReadString();
                                    break;
                                }
                        }
                    }
                }

            }

            /// <summary>
            ///  Only used in iOS - Android just sends an empty version
            /// </summary>
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public sealed partial class ActivityStatus : pb::IMessage<ActivityStatus>
            {
                private static readonly pb::MessageParser<ActivityStatus> _parser = new pb::MessageParser<ActivityStatus>(() => new ActivityStatus());
                public static pb::MessageParser<ActivityStatus> Parser { get { return _parser; } }

                public static pbr::MessageDescriptor Descriptor
                {
                    get { return Signature.Descriptor.NestedTypes[4]; }
                }

                pbr::MessageDescriptor pb::IMessage.Descriptor
                {
                    get { return Descriptor; }
                }

                public ActivityStatus()
                {
                    OnConstruction();
                }

                partial void OnConstruction();

                public ActivityStatus(ActivityStatus other) : this()
                {
                    startTimeMs_ = other.startTimeMs_;
                    unknownStatus_ = other.unknownStatus_;
                    walking_ = other.walking_;
                    running_ = other.running_;
                    stationary_ = other.stationary_;
                    automotive_ = other.automotive_;
                    tilting_ = other.tilting_;
                    cycling_ = other.cycling_;
                    status_ = other.status_;
                }

                public ActivityStatus Clone()
                {
                    return new ActivityStatus(this);
                }

                /// <summary>Field number for the "start_time_ms" field.</summary>
                public const int StartTimeMsFieldNumber = 1;
                private ulong startTimeMs_;
                /// <summary>
                ///  all of these had 1 as their value
                /// </summary>
                public ulong StartTimeMs
                {
                    get { return startTimeMs_; }
                    set
                    {
                        startTimeMs_ = value;
                    }
                }

                /// <summary>Field number for the "unknown_status" field.</summary>
                public const int UnknownStatusFieldNumber = 2;
                private bool unknownStatus_;
                public bool UnknownStatus
                {
                    get { return unknownStatus_; }
                    set
                    {
                        unknownStatus_ = value;
                    }
                }

                /// <summary>Field number for the "walking" field.</summary>
                public const int WalkingFieldNumber = 3;
                private bool walking_;
                public bool Walking
                {
                    get { return walking_; }
                    set
                    {
                        walking_ = value;
                    }
                }

                /// <summary>Field number for the "running" field.</summary>
                public const int RunningFieldNumber = 4;
                private bool running_;
                public bool Running
                {
                    get { return running_; }
                    set
                    {
                        running_ = value;
                    }
                }

                /// <summary>Field number for the "stationary" field.</summary>
                public const int StationaryFieldNumber = 5;
                private bool stationary_;
                public bool Stationary
                {
                    get { return stationary_; }
                    set
                    {
                        stationary_ = value;
                    }
                }

                /// <summary>Field number for the "automotive" field.</summary>
                public const int AutomotiveFieldNumber = 6;
                private bool automotive_;
                public bool Automotive
                {
                    get { return automotive_; }
                    set
                    {
                        automotive_ = value;
                    }
                }

                /// <summary>Field number for the "tilting" field.</summary>
                public const int TiltingFieldNumber = 7;
                private bool tilting_;
                public bool Tilting
                {
                    get { return tilting_; }
                    set
                    {
                        tilting_ = value;
                    }
                }

                /// <summary>Field number for the "cycling" field.</summary>
                public const int CyclingFieldNumber = 8;
                private bool cycling_;
                public bool Cycling
                {
                    get { return cycling_; }
                    set
                    {
                        cycling_ = value;
                    }
                }

                /// <summary>Field number for the "status" field.</summary>
                public const int StatusFieldNumber = 9;
                private pb::ByteString status_ = pb::ByteString.Empty;
                public pb::ByteString Status
                {
                    get { return status_; }
                    set
                    {
                        status_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                    }
                }

                public override bool Equals(object other)
                {
                    return Equals(other as ActivityStatus);
                }

                public bool Equals(ActivityStatus other)
                {
                    if (ReferenceEquals(other, null))
                    {
                        return false;
                    }
                    if (ReferenceEquals(other, this))
                    {
                        return true;
                    }
                    if (StartTimeMs != other.StartTimeMs) return false;
                    if (UnknownStatus != other.UnknownStatus) return false;
                    if (Walking != other.Walking) return false;
                    if (Running != other.Running) return false;
                    if (Stationary != other.Stationary) return false;
                    if (Automotive != other.Automotive) return false;
                    if (Tilting != other.Tilting) return false;
                    if (Cycling != other.Cycling) return false;
                    if (Status != other.Status) return false;
                    return true;
                }

                public override int GetHashCode()
                {
                    int hash = 1;
                    if (StartTimeMs != 0UL) hash ^= StartTimeMs.GetHashCode();
                    if (UnknownStatus != false) hash ^= UnknownStatus.GetHashCode();
                    if (Walking != false) hash ^= Walking.GetHashCode();
                    if (Running != false) hash ^= Running.GetHashCode();
                    if (Stationary != false) hash ^= Stationary.GetHashCode();
                    if (Automotive != false) hash ^= Automotive.GetHashCode();
                    if (Tilting != false) hash ^= Tilting.GetHashCode();
                    if (Cycling != false) hash ^= Cycling.GetHashCode();
                    if (Status.Length != 0) hash ^= Status.GetHashCode();
                    return hash;
                }

                public override string ToString()
                {
                    return pb::JsonFormatter.ToDiagnosticString(this);
                }

                public void WriteTo(pb::CodedOutputStream output)
                {
                    if (StartTimeMs != 0UL)
                    {
                        output.WriteRawTag(8);
                        output.WriteUInt64(StartTimeMs);
                    }
                    if (UnknownStatus != false)
                    {
                        output.WriteRawTag(16);
                        output.WriteBool(UnknownStatus);
                    }
                    if (Walking != false)
                    {
                        output.WriteRawTag(24);
                        output.WriteBool(Walking);
                    }
                    if (Running != false)
                    {
                        output.WriteRawTag(32);
                        output.WriteBool(Running);
                    }
                    if (Stationary != false)
                    {
                        output.WriteRawTag(40);
                        output.WriteBool(Stationary);
                    }
                    if (Automotive != false)
                    {
                        output.WriteRawTag(48);
                        output.WriteBool(Automotive);
                    }
                    if (Tilting != false)
                    {
                        output.WriteRawTag(56);
                        output.WriteBool(Tilting);
                    }
                    if (Cycling != false)
                    {
                        output.WriteRawTag(64);
                        output.WriteBool(Cycling);
                    }
                    if (Status.Length != 0)
                    {
                        output.WriteRawTag(74);
                        output.WriteBytes(Status);
                    }
                }

                public int CalculateSize()
                {
                    int size = 0;
                    if (StartTimeMs != 0UL)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(StartTimeMs);
                    }
                    if (UnknownStatus != false)
                    {
                        size += 1 + 1;
                    }
                    if (Walking != false)
                    {
                        size += 1 + 1;
                    }
                    if (Running != false)
                    {
                        size += 1 + 1;
                    }
                    if (Stationary != false)
                    {
                        size += 1 + 1;
                    }
                    if (Automotive != false)
                    {
                        size += 1 + 1;
                    }
                    if (Tilting != false)
                    {
                        size += 1 + 1;
                    }
                    if (Cycling != false)
                    {
                        size += 1 + 1;
                    }
                    if (Status.Length != 0)
                    {
                        size += 1 + pb::CodedOutputStream.ComputeBytesSize(Status);
                    }
                    return size;
                }

                public void MergeFrom(ActivityStatus other)
                {
                    if (other == null)
                    {
                        return;
                    }
                    if (other.StartTimeMs != 0UL)
                    {
                        StartTimeMs = other.StartTimeMs;
                    }
                    if (other.UnknownStatus != false)
                    {
                        UnknownStatus = other.UnknownStatus;
                    }
                    if (other.Walking != false)
                    {
                        Walking = other.Walking;
                    }
                    if (other.Running != false)
                    {
                        Running = other.Running;
                    }
                    if (other.Stationary != false)
                    {
                        Stationary = other.Stationary;
                    }
                    if (other.Automotive != false)
                    {
                        Automotive = other.Automotive;
                    }
                    if (other.Tilting != false)
                    {
                        Tilting = other.Tilting;
                    }
                    if (other.Cycling != false)
                    {
                        Cycling = other.Cycling;
                    }
                    if (other.Status.Length != 0)
                    {
                        Status = other.Status;
                    }
                }

                public void MergeFrom(pb::CodedInputStream input)
                {
                    uint tag;
                    while ((tag = input.ReadTag()) != 0)
                    {
                        switch (tag)
                        {
                            default:
                                input.SkipLastField();
                                break;
                            case 8:
                                {
                                    StartTimeMs = input.ReadUInt64();
                                    break;
                                }
                            case 16:
                                {
                                    UnknownStatus = input.ReadBool();
                                    break;
                                }
                            case 24:
                                {
                                    Walking = input.ReadBool();
                                    break;
                                }
                            case 32:
                                {
                                    Running = input.ReadBool();
                                    break;
                                }
                            case 40:
                                {
                                    Stationary = input.ReadBool();
                                    break;
                                }
                            case 48:
                                {
                                    Automotive = input.ReadBool();
                                    break;
                                }
                            case 56:
                                {
                                    Tilting = input.ReadBool();
                                    break;
                                }
                            case 64:
                                {
                                    Cycling = input.ReadBool();
                                    break;
                                }
                            case 74:
                                {
                                    Status = input.ReadBytes();
                                    break;
                                }
                        }
                    }
                }

            }

        }
        #endregion

    }

    /// <summary>
    ///  Just a junk message to denote that we don't currently know what message something is.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class UnknownMessage : pb::IMessage<UnknownMessage>
    {
        private static readonly pb::MessageParser<UnknownMessage> _parser = new pb::MessageParser<UnknownMessage>(() => new UnknownMessage());
        public static pb::MessageParser<UnknownMessage> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor
        {
            get { return global::POGOProtos.Networking.Envelopes.SignatureReflection.Descriptor.MessageTypes[1]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor
        {
            get { return Descriptor; }
        }

        public UnknownMessage()
        {
            OnConstruction();
        }

        partial void OnConstruction();

        public UnknownMessage(UnknownMessage other) : this()
        {
        }

        public UnknownMessage Clone()
        {
            return new UnknownMessage(this);
        }

        public override bool Equals(object other)
        {
            return Equals(other as UnknownMessage);
        }

        public bool Equals(UnknownMessage other)
        {
            if (ReferenceEquals(other, null))
            {
                return false;
            }
            if (ReferenceEquals(other, this))
            {
                return true;
            }
            return true;
        }

        public override int GetHashCode()
        {
            int hash = 1;
            return hash;
        }

        public override string ToString()
        {
            return pb::JsonFormatter.ToDiagnosticString(this);
        }

        public void WriteTo(pb::CodedOutputStream output)
        {
        }

        public int CalculateSize()
        {
            int size = 0;
            return size;
        }

        public void MergeFrom(UnknownMessage other)
        {
            if (other == null)
            {
                return;
            }
        }

        public void MergeFrom(pb::CodedInputStream input)
        {
            uint tag;
            while ((tag = input.ReadTag()) != 0)
            {
                switch (tag)
                {
                    default:
                        input.SkipLastField();
                        break;
                }
            }
        }

    }

    #endregion

}

#endregion Designer generated code
