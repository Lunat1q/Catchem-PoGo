// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Settings/Master/Pokemon/CameraAttributes.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Settings.Master.Pokemon {

  /// <summary>Holder for reflection information generated from POGOProtos/Settings/Master/Pokemon/CameraAttributes.proto</summary>
  public static partial class CameraAttributesReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Settings/Master/Pokemon/CameraAttributes.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CameraAttributesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjlQT0dPUHJvdG9zL1NldHRpbmdzL01hc3Rlci9Qb2tlbW9uL0NhbWVyYUF0",
            "dHJpYnV0ZXMucHJvdG8SIlBPR09Qcm90b3MuU2V0dGluZ3MuTWFzdGVyLlBv",
            "a2Vtb24ilwEKEENhbWVyYUF0dHJpYnV0ZXMSFQoNZGlza19yYWRpdXNfbRgB",
            "IAEoAhIZChFjeWxpbmRlcl9yYWRpdXNfbRgCIAEoAhIZChFjeWxpbmRlcl9o",
            "ZWlnaHRfbRgDIAEoAhIZChFjeWxpbmRlcl9ncm91bmRfbRgEIAEoAhIbChNz",
            "aG91bGRlcl9tb2RlX3NjYWxlGAUgASgCYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Settings.Master.Pokemon.CameraAttributes), global::POGOProtos.Settings.Master.Pokemon.CameraAttributes.Parser, new[]{ "DiskRadiusM", "CylinderRadiusM", "CylinderHeightM", "CylinderGroundM", "ShoulderModeScale" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CameraAttributes : pb::IMessage<CameraAttributes> {
    private static readonly pb::MessageParser<CameraAttributes> _parser = new pb::MessageParser<CameraAttributes>(() => new CameraAttributes());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CameraAttributes> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Settings.Master.Pokemon.CameraAttributesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAttributes() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAttributes(CameraAttributes other) : this() {
      diskRadiusM_ = other.diskRadiusM_;
      cylinderRadiusM_ = other.cylinderRadiusM_;
      cylinderHeightM_ = other.cylinderHeightM_;
      cylinderGroundM_ = other.cylinderGroundM_;
      shoulderModeScale_ = other.shoulderModeScale_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CameraAttributes Clone() {
      return new CameraAttributes(this);
    }

    /// <summary>Field number for the "disk_radius_m" field.</summary>
    public const int DiskRadiusMFieldNumber = 1;
    private float diskRadiusM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float DiskRadiusM {
      get { return diskRadiusM_; }
      set {
        diskRadiusM_ = value;
      }
    }

    /// <summary>Field number for the "cylinder_radius_m" field.</summary>
    public const int CylinderRadiusMFieldNumber = 2;
    private float cylinderRadiusM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CylinderRadiusM {
      get { return cylinderRadiusM_; }
      set {
        cylinderRadiusM_ = value;
      }
    }

    /// <summary>Field number for the "cylinder_height_m" field.</summary>
    public const int CylinderHeightMFieldNumber = 3;
    private float cylinderHeightM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CylinderHeightM {
      get { return cylinderHeightM_; }
      set {
        cylinderHeightM_ = value;
      }
    }

    /// <summary>Field number for the "cylinder_ground_m" field.</summary>
    public const int CylinderGroundMFieldNumber = 4;
    private float cylinderGroundM_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float CylinderGroundM {
      get { return cylinderGroundM_; }
      set {
        cylinderGroundM_ = value;
      }
    }

    /// <summary>Field number for the "shoulder_mode_scale" field.</summary>
    public const int ShoulderModeScaleFieldNumber = 5;
    private float shoulderModeScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public float ShoulderModeScale {
      get { return shoulderModeScale_; }
      set {
        shoulderModeScale_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CameraAttributes);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CameraAttributes other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DiskRadiusM != other.DiskRadiusM) return false;
      if (CylinderRadiusM != other.CylinderRadiusM) return false;
      if (CylinderHeightM != other.CylinderHeightM) return false;
      if (CylinderGroundM != other.CylinderGroundM) return false;
      if (ShoulderModeScale != other.ShoulderModeScale) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DiskRadiusM != 0F) hash ^= DiskRadiusM.GetHashCode();
      if (CylinderRadiusM != 0F) hash ^= CylinderRadiusM.GetHashCode();
      if (CylinderHeightM != 0F) hash ^= CylinderHeightM.GetHashCode();
      if (CylinderGroundM != 0F) hash ^= CylinderGroundM.GetHashCode();
      if (ShoulderModeScale != 0F) hash ^= ShoulderModeScale.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DiskRadiusM != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(DiskRadiusM);
      }
      if (CylinderRadiusM != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(CylinderRadiusM);
      }
      if (CylinderHeightM != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(CylinderHeightM);
      }
      if (CylinderGroundM != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(CylinderGroundM);
      }
      if (ShoulderModeScale != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(ShoulderModeScale);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DiskRadiusM != 0F) {
        size += 1 + 4;
      }
      if (CylinderRadiusM != 0F) {
        size += 1 + 4;
      }
      if (CylinderHeightM != 0F) {
        size += 1 + 4;
      }
      if (CylinderGroundM != 0F) {
        size += 1 + 4;
      }
      if (ShoulderModeScale != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CameraAttributes other) {
      if (other == null) {
        return;
      }
      if (other.DiskRadiusM != 0F) {
        DiskRadiusM = other.DiskRadiusM;
      }
      if (other.CylinderRadiusM != 0F) {
        CylinderRadiusM = other.CylinderRadiusM;
      }
      if (other.CylinderHeightM != 0F) {
        CylinderHeightM = other.CylinderHeightM;
      }
      if (other.CylinderGroundM != 0F) {
        CylinderGroundM = other.CylinderGroundM;
      }
      if (other.ShoulderModeScale != 0F) {
        ShoulderModeScale = other.ShoulderModeScale;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            DiskRadiusM = input.ReadFloat();
            break;
          }
          case 21: {
            CylinderRadiusM = input.ReadFloat();
            break;
          }
          case 29: {
            CylinderHeightM = input.ReadFloat();
            break;
          }
          case 37: {
            CylinderGroundM = input.ReadFloat();
            break;
          }
          case 45: {
            ShoulderModeScale = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
