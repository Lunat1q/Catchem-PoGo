// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Networking/Responses/CheckChallengeResponse.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Networking.Responses {

  /// <summary>Holder for reflection information generated from POGOProtos/Networking/Responses/CheckChallengeResponse.proto</summary>
  public static partial class CheckChallengeResponseReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Networking/Responses/CheckChallengeResponse.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CheckChallengeResponseReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CjxQT0dPUHJvdG9zL05ldHdvcmtpbmcvUmVzcG9uc2VzL0NoZWNrQ2hhbGxl",
            "bmdlUmVzcG9uc2UucHJvdG8SH1BPR09Qcm90b3MuTmV0d29ya2luZy5SZXNw",
            "b25zZXMiRwoWQ2hlY2tDaGFsbGVuZ2VSZXNwb25zZRIWCg5zaG93X2NoYWxs",
            "ZW5nZRgBIAEoCBIVCg1jaGFsbGVuZ2VfdXJsGAIgASgJYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Networking.Responses.CheckChallengeResponse), global::POGOProtos.Networking.Responses.CheckChallengeResponse.Parser, new[]{ "ShowChallenge", "ChallengeUrl" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CheckChallengeResponse : pb::IMessage<CheckChallengeResponse> {
    private static readonly pb::MessageParser<CheckChallengeResponse> _parser = new pb::MessageParser<CheckChallengeResponse>(() => new CheckChallengeResponse());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CheckChallengeResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Networking.Responses.CheckChallengeResponseReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckChallengeResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckChallengeResponse(CheckChallengeResponse other) : this() {
      showChallenge_ = other.showChallenge_;
      challengeUrl_ = other.challengeUrl_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CheckChallengeResponse Clone() {
      return new CheckChallengeResponse(this);
    }

    /// <summary>Field number for the "show_challenge" field.</summary>
    public const int ShowChallengeFieldNumber = 1;
    private bool showChallenge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool ShowChallenge {
      get { return showChallenge_; }
      set {
        showChallenge_ = value;
      }
    }

    /// <summary>Field number for the "challenge_url" field.</summary>
    public const int ChallengeUrlFieldNumber = 2;
    private string challengeUrl_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ChallengeUrl {
      get { return challengeUrl_; }
      set {
        challengeUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CheckChallengeResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CheckChallengeResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ShowChallenge != other.ShowChallenge) return false;
      if (ChallengeUrl != other.ChallengeUrl) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ShowChallenge != false) hash ^= ShowChallenge.GetHashCode();
      if (ChallengeUrl.Length != 0) hash ^= ChallengeUrl.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (ShowChallenge != false) {
        output.WriteRawTag(8);
        output.WriteBool(ShowChallenge);
      }
      if (ChallengeUrl.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ChallengeUrl);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ShowChallenge != false) {
        size += 1 + 1;
      }
      if (ChallengeUrl.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ChallengeUrl);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CheckChallengeResponse other) {
      if (other == null) {
        return;
      }
      if (other.ShowChallenge != false) {
        ShowChallenge = other.ShowChallenge;
      }
      if (other.ChallengeUrl.Length != 0) {
        ChallengeUrl = other.ChallengeUrl;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ShowChallenge = input.ReadBool();
            break;
          }
          case 18: {
            ChallengeUrl = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
