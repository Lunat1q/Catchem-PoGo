// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: POGOProtos/Data/PlayerBadge.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace POGOProtos.Data {

  /// <summary>Holder for reflection information generated from POGOProtos/Data/PlayerBadge.proto</summary>
  public static partial class PlayerBadgeReflection {

    #region Descriptor
    /// <summary>File descriptor for POGOProtos/Data/PlayerBadge.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PlayerBadgeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFQT0dPUHJvdG9zL0RhdGEvUGxheWVyQmFkZ2UucHJvdG8SD1BPR09Qcm90",
            "b3MuRGF0YRogUE9HT1Byb3Rvcy9FbnVtcy9CYWRnZVR5cGUucHJvdG8iiwEK",
            "C1BsYXllckJhZGdlEi8KCmJhZGdlX3R5cGUYASABKA4yGy5QT0dPUHJvdG9z",
            "LkVudW1zLkJhZGdlVHlwZRIMCgRyYW5rGAIgASgFEhMKC3N0YXJ0X3ZhbHVl",
            "GAMgASgFEhEKCWVuZF92YWx1ZRgEIAEoBRIVCg1jdXJyZW50X3ZhbHVlGAUg",
            "ASgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::POGOProtos.Enums.BadgeTypeReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::POGOProtos.Data.PlayerBadge), global::POGOProtos.Data.PlayerBadge.Parser, new[]{ "BadgeType", "Rank", "StartValue", "EndValue", "CurrentValue" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class PlayerBadge : pb::IMessage<PlayerBadge> {
    private static readonly pb::MessageParser<PlayerBadge> _parser = new pb::MessageParser<PlayerBadge>(() => new PlayerBadge());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<PlayerBadge> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::POGOProtos.Data.PlayerBadgeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBadge() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBadge(PlayerBadge other) : this() {
      badgeType_ = other.badgeType_;
      rank_ = other.rank_;
      startValue_ = other.startValue_;
      endValue_ = other.endValue_;
      currentValue_ = other.currentValue_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public PlayerBadge Clone() {
      return new PlayerBadge(this);
    }

    /// <summary>Field number for the "badge_type" field.</summary>
    public const int BadgeTypeFieldNumber = 1;
    private global::POGOProtos.Enums.BadgeType badgeType_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::POGOProtos.Enums.BadgeType BadgeType {
      get { return badgeType_; }
      set {
        badgeType_ = value;
      }
    }

    /// <summary>Field number for the "rank" field.</summary>
    public const int RankFieldNumber = 2;
    private int rank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    /// <summary>Field number for the "start_value" field.</summary>
    public const int StartValueFieldNumber = 3;
    private int startValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StartValue {
      get { return startValue_; }
      set {
        startValue_ = value;
      }
    }

    /// <summary>Field number for the "end_value" field.</summary>
    public const int EndValueFieldNumber = 4;
    private int endValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int EndValue {
      get { return endValue_; }
      set {
        endValue_ = value;
      }
    }

    /// <summary>Field number for the "current_value" field.</summary>
    public const int CurrentValueFieldNumber = 5;
    private double currentValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double CurrentValue {
      get { return currentValue_; }
      set {
        currentValue_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as PlayerBadge);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(PlayerBadge other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (BadgeType != other.BadgeType) return false;
      if (Rank != other.Rank) return false;
      if (StartValue != other.StartValue) return false;
      if (EndValue != other.EndValue) return false;
      if (CurrentValue != other.CurrentValue) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (BadgeType != 0) hash ^= BadgeType.GetHashCode();
      if (Rank != 0) hash ^= Rank.GetHashCode();
      if (StartValue != 0) hash ^= StartValue.GetHashCode();
      if (EndValue != 0) hash ^= EndValue.GetHashCode();
      if (CurrentValue != 0D) hash ^= CurrentValue.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (BadgeType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) BadgeType);
      }
      if (Rank != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Rank);
      }
      if (StartValue != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(StartValue);
      }
      if (EndValue != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EndValue);
      }
      if (CurrentValue != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(CurrentValue);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (BadgeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BadgeType);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (StartValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartValue);
      }
      if (EndValue != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EndValue);
      }
      if (CurrentValue != 0D) {
        size += 1 + 8;
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(PlayerBadge other) {
      if (other == null) {
        return;
      }
      if (other.BadgeType != 0) {
        BadgeType = other.BadgeType;
      }
      if (other.Rank != 0) {
        Rank = other.Rank;
      }
      if (other.StartValue != 0) {
        StartValue = other.StartValue;
      }
      if (other.EndValue != 0) {
        EndValue = other.EndValue;
      }
      if (other.CurrentValue != 0D) {
        CurrentValue = other.CurrentValue;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            badgeType_ = (global::POGOProtos.Enums.BadgeType) input.ReadEnum();
            break;
          }
          case 16: {
            Rank = input.ReadInt32();
            break;
          }
          case 24: {
            StartValue = input.ReadInt32();
            break;
          }
          case 32: {
            EndValue = input.ReadInt32();
            break;
          }
          case 41: {
            CurrentValue = input.ReadDouble();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
